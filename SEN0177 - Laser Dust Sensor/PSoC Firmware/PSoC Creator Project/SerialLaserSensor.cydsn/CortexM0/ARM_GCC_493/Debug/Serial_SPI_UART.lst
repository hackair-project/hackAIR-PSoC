ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Serial_SPI_UART.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	Serial_rxBufferHead,4,4
  18              		.comm	Serial_rxBufferTail,4,4
  19              		.comm	Serial_rxBufferOverflow,1,1
  20              		.comm	Serial_rxBufferInternal,36,4
  21              		.section	.text.Serial_SpiUartReadRxData,"ax",%progbits
  22              		.align	2
  23              		.global	Serial_SpiUartReadRxData
  24              		.code	16
  25              		.thumb_func
  26              		.type	Serial_SpiUartReadRxData, %function
  27              	Serial_SpiUartReadRxData:
  28              	.LFB2:
  29              		.file 1 "Generated_Source\\PSoC4\\Serial_SPI_UART.c"
   1:Generated_Source\PSoC4/Serial_SPI_UART.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/Serial_SPI_UART.c **** * File Name: Serial_SPI_UART.c
   3:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Version 3.10
   4:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
   5:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Description:
   6:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  This file provides the source code to the API for the SCB Component in
   7:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  SPI and UART modes.
   8:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
   9:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Note:
  10:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
  11:Generated_Source\PSoC4/Serial_SPI_UART.c **** *******************************************************************************
  12:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/Serial_SPI_UART.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/Serial_SPI_UART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/Serial_SPI_UART.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/Serial_SPI_UART.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  18:Generated_Source\PSoC4/Serial_SPI_UART.c **** #include "Serial_PVT.h"
  19:Generated_Source\PSoC4/Serial_SPI_UART.c **** #include "Serial_SPI_UART_PVT.h"
  20:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  21:Generated_Source\PSoC4/Serial_SPI_UART.c **** /***************************************
  22:Generated_Source\PSoC4/Serial_SPI_UART.c **** *        SPI/UART Private Vars
  23:Generated_Source\PSoC4/Serial_SPI_UART.c **** ***************************************/
  24:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  25:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_INTERNAL_RX_SW_BUFFER_CONST)
  26:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint32 Serial_rxBufferHead;
  27:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint32 Serial_rxBufferTail;
  28:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint8  Serial_rxBufferOverflow;
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 2


  29:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_INTERNAL_RX_SW_BUFFER_CONST) */
  30:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  31:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_INTERNAL_TX_SW_BUFFER_CONST)
  32:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint32 Serial_txBufferHead;
  33:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint32 Serial_txBufferTail;
  34:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_INTERNAL_TX_SW_BUFFER_CONST) */
  35:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  36:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_INTERNAL_RX_SW_BUFFER)
  37:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /* Add one element to the buffer to receive full packet. One byte in receive buffer is always e
  38:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint8 Serial_rxBufferInternal[Serial_INTERNAL_RX_BUFFER_SIZE];
  39:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_INTERNAL_RX_SW_BUFFER) */
  40:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  41:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_INTERNAL_TX_SW_BUFFER)
  42:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint8 Serial_txBufferInternal[Serial_TX_BUFFER_SIZE];
  43:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_INTERNAL_TX_SW_BUFFER) */
  44:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  45:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  46:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_RX_DIRECTION)
  47:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
  48:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartReadRxData
  49:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ********************************************************************************
  50:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  51:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Summary:
  52:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Retrieves the next data element from the receive buffer.
  53:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - RX software buffer is disabled: Returns data element retrieved from
  54:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     RX FIFO. Undefined data will be returned if the RX FIFO is empty.
  55:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - RX software buffer is enabled: Returns data element from the software
  56:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     receive buffer. Zero value is returned if the software receive buffer
  57:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     is empty.
  58:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  59:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Parameters:
  60:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
  61:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  62:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Return:
  63:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Next data element from the receive buffer.
  64:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  65:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Global Variables:
  66:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Look into Serial_SpiInit for description.
  67:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  68:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
  69:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 Serial_SpiUartReadRxData(void)
  70:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
  30              		.loc 1 70 0
  31              		.cfi_startproc
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  71:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 rxData = 0u;
  40              		.loc 1 71 0
  41 0006 0023     		mov	r3, #0
  42 0008 7B60     		str	r3, [r7, #4]
  72:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 3


  73:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #if (Serial_INTERNAL_RX_SW_BUFFER_CONST)
  74:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 locTail;
  75:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #endif /* (Serial_INTERNAL_RX_SW_BUFFER_CONST) */
  76:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  77:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_RX_SW_BUFFER)
  78:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
  79:Generated_Source\PSoC4/Serial_SPI_UART.c ****             if (Serial_rxBufferHead != Serial_rxBufferTail)
  43              		.loc 1 79 0
  44 000a 0E4B     		ldr	r3, .L5
  45 000c 1A68     		ldr	r2, [r3]
  46 000e 0E4B     		ldr	r3, .L5+4
  47 0010 1B68     		ldr	r3, [r3]
  48 0012 9A42     		cmp	r2, r3
  49 0014 11D0     		beq	.L2
  80:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
  81:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* There is data in RX software buffer */
  82:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  83:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Calculate index to read from */
  84:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 locTail = (Serial_rxBufferTail + 1u);
  50              		.loc 1 84 0
  51 0016 0C4B     		ldr	r3, .L5+4
  52 0018 1B68     		ldr	r3, [r3]
  53 001a 0133     		add	r3, r3, #1
  54 001c 3B60     		str	r3, [r7]
  85:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  86:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 if (Serial_INTERNAL_RX_BUFFER_SIZE == locTail)
  55              		.loc 1 86 0
  56 001e 3B68     		ldr	r3, [r7]
  57 0020 242B     		cmp	r3, #36
  58 0022 01D1     		bne	.L3
  87:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
  88:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     locTail = 0u;
  59              		.loc 1 88 0
  60 0024 0023     		mov	r3, #0
  61 0026 3B60     		str	r3, [r7]
  62              	.L3:
  89:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
  90:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  91:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Get data from RX software buffer */
  92:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 rxData = Serial_GetWordFromRxBuffer(locTail);
  63              		.loc 1 92 0
  64 0028 084A     		ldr	r2, .L5+8
  65 002a 3B68     		ldr	r3, [r7]
  66 002c D318     		add	r3, r2, r3
  67 002e 1B78     		ldrb	r3, [r3]
  68 0030 DBB2     		uxtb	r3, r3
  69 0032 7B60     		str	r3, [r7, #4]
  93:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  94:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Change index in the buffer */
  95:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_rxBufferTail = locTail;
  70              		.loc 1 95 0
  71 0034 044B     		ldr	r3, .L5+4
  72 0036 3A68     		ldr	r2, [r7]
  73 0038 1A60     		str	r2, [r3]
  74              	.L2:
  96:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  97:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 #if (Serial_CHECK_UART_RTS_CONTROL_FLOW)
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 4


  98:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
  99:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     /* Check if RX Not Empty is disabled in the interrupt */
 100:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     if (0u == (Serial_INTR_RX_MASK_REG & Serial_INTR_RX_NOT_EMPTY))
 101:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     {
 102:Generated_Source\PSoC4/Serial_SPI_UART.c ****                         /* Enable RX Not Empty interrupt source to continue
 103:Generated_Source\PSoC4/Serial_SPI_UART.c ****                         * receiving data into software buffer.
 104:Generated_Source\PSoC4/Serial_SPI_UART.c ****                         */
 105:Generated_Source\PSoC4/Serial_SPI_UART.c ****                         Serial_INTR_RX_MASK_REG |= Serial_INTR_RX_NOT_EMPTY;
 106:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     }
 107:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 108:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 #endif
 109:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 110:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 111:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 112:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 113:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 114:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Read data from RX FIFO */
 115:Generated_Source\PSoC4/Serial_SPI_UART.c ****             rxData = Serial_RX_FIFO_RD_REG;
 116:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 117:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 118:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 119:Generated_Source\PSoC4/Serial_SPI_UART.c ****         return (rxData);
  75              		.loc 1 119 0
  76 003a 7B68     		ldr	r3, [r7, #4]
 120:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
  77              		.loc 1 120 0
  78 003c 181C     		mov	r0, r3
  79 003e BD46     		mov	sp, r7
  80 0040 02B0     		add	sp, sp, #8
  81              		@ sp needed
  82 0042 80BD     		pop	{r7, pc}
  83              	.L6:
  84              		.align	2
  85              	.L5:
  86 0044 00000000 		.word	Serial_rxBufferHead
  87 0048 00000000 		.word	Serial_rxBufferTail
  88 004c 00000000 		.word	Serial_rxBufferInternal
  89              		.cfi_endproc
  90              	.LFE2:
  91              		.size	Serial_SpiUartReadRxData, .-Serial_SpiUartReadRxData
  92              		.section	.text.Serial_SpiUartGetRxBufferSize,"ax",%progbits
  93              		.align	2
  94              		.global	Serial_SpiUartGetRxBufferSize
  95              		.code	16
  96              		.thumb_func
  97              		.type	Serial_SpiUartGetRxBufferSize, %function
  98              	Serial_SpiUartGetRxBufferSize:
  99              	.LFB3:
 121:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 122:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 123:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 124:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartGetRxBufferSize
 125:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ********************************************************************************
 126:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 127:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Summary:
 128:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Returns the number of received data elements in the receive buffer.
 129:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - RX software buffer disabled: returns the number of used entries in
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 5


 130:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     RX FIFO.
 131:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - RX software buffer enabled: returns the number of elements which were
 132:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     placed in the receive buffer. This does not include the hardware RX FIFO.
 133:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 134:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Parameters:
 135:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
 136:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 137:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Return:
 138:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Number of received data elements
 139:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 140:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 141:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 Serial_SpiUartGetRxBufferSize(void)
 142:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 100              		.loc 1 142 0
 101              		.cfi_startproc
 102 0000 80B5     		push	{r7, lr}
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 7, -8
 105              		.cfi_offset 14, -4
 106 0002 82B0     		sub	sp, sp, #8
 107              		.cfi_def_cfa_offset 16
 108 0004 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 143:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 size;
 144:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #if (Serial_INTERNAL_RX_SW_BUFFER_CONST)
 145:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 locHead;
 146:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #endif /* (Serial_INTERNAL_RX_SW_BUFFER_CONST) */
 147:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 148:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_RX_SW_BUFFER)
 149:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 150:Generated_Source\PSoC4/Serial_SPI_UART.c ****             locHead = Serial_rxBufferHead;
 110              		.loc 1 150 0
 111 0006 0C4B     		ldr	r3, .L11
 112 0008 1B68     		ldr	r3, [r3]
 113 000a 3B60     		str	r3, [r7]
 151:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 152:Generated_Source\PSoC4/Serial_SPI_UART.c ****             if(locHead >= Serial_rxBufferTail)
 114              		.loc 1 152 0
 115 000c 0B4B     		ldr	r3, .L11+4
 116 000e 1B68     		ldr	r3, [r3]
 117 0010 3A68     		ldr	r2, [r7]
 118 0012 9A42     		cmp	r2, r3
 119 0014 05D3     		bcc	.L8
 153:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 154:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 size = (locHead - Serial_rxBufferTail);
 120              		.loc 1 154 0
 121 0016 094B     		ldr	r3, .L11+4
 122 0018 1B68     		ldr	r3, [r3]
 123 001a 3A68     		ldr	r2, [r7]
 124 001c D31A     		sub	r3, r2, r3
 125 001e 7B60     		str	r3, [r7, #4]
 126 0020 05E0     		b	.L9
 127              	.L8:
 155:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 156:Generated_Source\PSoC4/Serial_SPI_UART.c ****             else
 157:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 158:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 size = (locHead + (Serial_INTERNAL_RX_BUFFER_SIZE - Serial_rxBufferTail));
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 6


 128              		.loc 1 158 0
 129 0022 064B     		ldr	r3, .L11+4
 130 0024 1B68     		ldr	r3, [r3]
 131 0026 3A68     		ldr	r2, [r7]
 132 0028 D31A     		sub	r3, r2, r3
 133 002a 2433     		add	r3, r3, #36
 134 002c 7B60     		str	r3, [r7, #4]
 135              	.L9:
 159:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 160:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 161:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 162:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 163:Generated_Source\PSoC4/Serial_SPI_UART.c ****             size = Serial_GET_RX_FIFO_ENTRIES;
 164:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 165:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 166:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 167:Generated_Source\PSoC4/Serial_SPI_UART.c ****         return (size);
 136              		.loc 1 167 0
 137 002e 7B68     		ldr	r3, [r7, #4]
 168:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 138              		.loc 1 168 0
 139 0030 181C     		mov	r0, r3
 140 0032 BD46     		mov	sp, r7
 141 0034 02B0     		add	sp, sp, #8
 142              		@ sp needed
 143 0036 80BD     		pop	{r7, pc}
 144              	.L12:
 145              		.align	2
 146              	.L11:
 147 0038 00000000 		.word	Serial_rxBufferHead
 148 003c 00000000 		.word	Serial_rxBufferTail
 149              		.cfi_endproc
 150              	.LFE3:
 151              		.size	Serial_SpiUartGetRxBufferSize, .-Serial_SpiUartGetRxBufferSize
 152              		.section	.text.Serial_SpiUartClearRxBuffer,"ax",%progbits
 153              		.align	2
 154              		.global	Serial_SpiUartClearRxBuffer
 155              		.code	16
 156              		.thumb_func
 157              		.type	Serial_SpiUartClearRxBuffer, %function
 158              	Serial_SpiUartClearRxBuffer:
 159              	.LFB4:
 169:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 170:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 171:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 172:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartClearRxBuffer
 173:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ********************************************************************************
 174:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 175:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Summary:
 176:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Clears the receive buffer and RX FIFO.
 177:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 178:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Parameters:
 179:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
 180:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 181:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Return:
 182:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
 183:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 7


 184:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 185:Generated_Source\PSoC4/Serial_SPI_UART.c ****     void Serial_SpiUartClearRxBuffer(void)
 186:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 160              		.loc 1 186 0
 161              		.cfi_startproc
 162 0000 80B5     		push	{r7, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 00AF     		add	r7, sp, #0
 167              		.cfi_def_cfa_register 7
 187:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_RX_SW_BUFFER)
 188:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 189:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Lock from component interruption */
 190:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_DisableInt();
 168              		.loc 1 190 0
 169 0004 0920     		mov	r0, #9
 170 0006 FFF7FEFF 		bl	CyIntDisable
 191:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 192:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Flush RX software buffer */
 193:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_rxBufferHead = Serial_rxBufferTail;
 171              		.loc 1 193 0
 172 000a 0E4B     		ldr	r3, .L14
 173 000c 1A68     		ldr	r2, [r3]
 174 000e 0E4B     		ldr	r3, .L14+4
 175 0010 1A60     		str	r2, [r3]
 194:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_rxBufferOverflow = 0u;
 176              		.loc 1 194 0
 177 0012 0E4B     		ldr	r3, .L14+8
 178 0014 0022     		mov	r2, #0
 179 0016 1A70     		strb	r2, [r3]
 195:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 196:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_CLEAR_RX_FIFO;
 180              		.loc 1 196 0
 181 0018 0D4B     		ldr	r3, .L14+12
 182 001a 0D4A     		ldr	r2, .L14+12
 183 001c 1268     		ldr	r2, [r2]
 184 001e 8021     		mov	r1, #128
 185 0020 4902     		lsl	r1, r1, #9
 186 0022 0A43     		orr	r2, r1
 187 0024 1A60     		str	r2, [r3]
 188 0026 0A4B     		ldr	r3, .L14+12
 189 0028 094A     		ldr	r2, .L14+12
 190 002a 1268     		ldr	r2, [r2]
 191 002c 0949     		ldr	r1, .L14+16
 192 002e 0A40     		and	r2, r1
 193 0030 1A60     		str	r2, [r3]
 197:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_ClearRxInterruptSource(Serial_INTR_RX_ALL);
 194              		.loc 1 197 0
 195 0032 094B     		ldr	r3, .L14+20
 196 0034 094A     		ldr	r2, .L14+24
 197 0036 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 199:Generated_Source\PSoC4/Serial_SPI_UART.c ****             #if (Serial_CHECK_UART_RTS_CONTROL_FLOW)
 200:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 201:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Enable RX Not Empty interrupt source to continue receiving
 202:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 * data into software buffer.
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 8


 203:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 */
 204:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_INTR_RX_MASK_REG |= Serial_INTR_RX_NOT_EMPTY;
 205:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 206:Generated_Source\PSoC4/Serial_SPI_UART.c ****             #endif
 207:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 208:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Release lock */
 209:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_EnableInt();
 198              		.loc 1 209 0
 199 0038 0920     		mov	r0, #9
 200 003a FFF7FEFF 		bl	CyIntEnable
 210:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 211:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 212:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 213:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_CLEAR_RX_FIFO;
 214:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 215:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 216:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 201              		.loc 1 216 0
 202 003e BD46     		mov	sp, r7
 203              		@ sp needed
 204 0040 80BD     		pop	{r7, pc}
 205              	.L15:
 206 0042 C046     		.align	2
 207              	.L14:
 208 0044 00000000 		.word	Serial_rxBufferTail
 209 0048 00000000 		.word	Serial_rxBufferHead
 210 004c 00000000 		.word	Serial_rxBufferOverflow
 211 0050 04032440 		.word	1076101892
 212 0054 FFFFFEFF 		.word	-65537
 213 0058 C00F2440 		.word	1076105152
 214 005c ED0F0000 		.word	4077
 215              		.cfi_endproc
 216              	.LFE4:
 217              		.size	Serial_SpiUartClearRxBuffer, .-Serial_SpiUartClearRxBuffer
 218              		.section	.text.Serial_SpiUartDisableIntRx,"ax",%progbits
 219              		.align	2
 220              		.global	Serial_SpiUartDisableIntRx
 221              		.code	16
 222              		.thumb_func
 223              		.type	Serial_SpiUartDisableIntRx, %function
 224              	Serial_SpiUartDisableIntRx:
 225              	.LFB5:
 217:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 218:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_RX_DIRECTION) */
 219:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 220:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 221:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_TX_DIRECTION)
 222:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 223:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartWriteTxData
 224:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ********************************************************************************
 225:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 226:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Summary:
 227:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Places a data entry into the transmit buffer to be sent at the next available
 228:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  bus time.
 229:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  This function is blocking and waits until there is space available to put the
 230:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  requested data in the transmit buffer.
 231:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 9


 232:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Parameters:
 233:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  txDataByte: the data to be transmitted.
 234:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 235:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Return:
 236:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
 237:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 238:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 239:Generated_Source\PSoC4/Serial_SPI_UART.c ****     void Serial_SpiUartWriteTxData(uint32 txData)
 240:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 241:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #if (Serial_INTERNAL_TX_SW_BUFFER_CONST)
 242:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 locHead;
 243:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #endif /* (Serial_INTERNAL_TX_SW_BUFFER_CONST) */
 244:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 245:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_TX_SW_BUFFER)
 246:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 247:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Put data directly into the TX FIFO */
 248:Generated_Source\PSoC4/Serial_SPI_UART.c ****             if ((Serial_txBufferHead == Serial_txBufferTail) &&
 249:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 (Serial_SPI_UART_FIFO_SIZE != Serial_GET_TX_FIFO_ENTRIES))
 250:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 251:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* TX software buffer is empty: put data directly in TX FIFO */
 252:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_TX_FIFO_WR_REG = txData;
 253:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 254:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Put data into TX software buffer */
 255:Generated_Source\PSoC4/Serial_SPI_UART.c ****             else
 256:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 257:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Head index to put data */
 258:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 locHead = (Serial_txBufferHead + 1u);
 259:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 260:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Adjust TX software buffer index */
 261:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 if (Serial_TX_BUFFER_SIZE == locHead)
 262:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
 263:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     locHead = 0u;
 264:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 265:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 266:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Wait for space in TX software buffer */
 267:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 while (locHead == Serial_txBufferTail)
 268:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
 269:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 270:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 271:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* TX software buffer has at least one room */
 272:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 273:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Clear old status of INTR_TX_NOT_FULL. It sets at the end of transfer when TX FIF
 274:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_ClearTxInterruptSource(Serial_INTR_TX_NOT_FULL);
 275:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 276:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_PutWordInTxBuffer(locHead, txData);
 277:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 278:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_txBufferHead = locHead;
 279:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 280:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Check if TX Not Full is disabled in interrupt */
 281:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 if (0u == (Serial_INTR_TX_MASK_REG & Serial_INTR_TX_NOT_FULL))
 282:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
 283:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     /* Enable TX Not Full interrupt source to transmit from software buffer */
 284:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     Serial_INTR_TX_MASK_REG |= (uint32) Serial_INTR_TX_NOT_FULL;
 285:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 286:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 287:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 288:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 10


 289:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 290:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Wait until TX FIFO has space to put data element */
 291:Generated_Source\PSoC4/Serial_SPI_UART.c ****             while (Serial_SPI_UART_FIFO_SIZE == Serial_GET_TX_FIFO_ENTRIES)
 292:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 293:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 294:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 295:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_TX_FIFO_WR_REG = txData;
 296:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 297:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 298:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 299:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 300:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 301:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 302:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartPutArray
 303:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ********************************************************************************
 304:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 305:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Summary:
 306:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Places an array of data into the transmit buffer to be sent.
 307:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  This function is blocking and waits until there is a space available to put
 308:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  all the requested data in the transmit buffer. The array size can be greater
 309:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  than transmit buffer size.
 310:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 311:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Parameters:
 312:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  wrBuf:  pointer to an array with data to be placed in transmit buffer.
 313:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  count:  number of data elements to be placed in the transmit buffer.
 314:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 315:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Return:
 316:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
 317:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 318:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 319:Generated_Source\PSoC4/Serial_SPI_UART.c ****     void Serial_SpiUartPutArray(const uint8 wrBuf[], uint32 count)
 320:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 321:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 i;
 322:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 323:Generated_Source\PSoC4/Serial_SPI_UART.c ****         for (i=0u; i < count; i++)
 324:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 325:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_SpiUartWriteTxData((uint32) wrBuf[i]);
 326:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 327:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 328:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 329:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 330:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 331:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartGetTxBufferSize
 332:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ********************************************************************************
 333:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 334:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Summary:
 335:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Returns the number of elements currently in the transmit buffer.
 336:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  - TX software buffer is disabled: returns the number of used entries in
 337:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *    TX FIFO.
 338:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  - TX software buffer is enabled: returns the number of elements currently
 339:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *    used in the transmit buffer. This number does not include used entries in
 340:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *    the TX FIFO. The transmit buffer size is zero until the TX FIFO is
 341:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *    not full.
 342:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 343:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Parameters:
 344:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
 345:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 11


 346:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Return:
 347:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Number of data elements ready to transmit.
 348:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 349:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 350:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 Serial_SpiUartGetTxBufferSize(void)
 351:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 352:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 size;
 353:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #if (Serial_INTERNAL_TX_SW_BUFFER_CONST)
 354:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 locTail;
 355:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #endif /* (Serial_INTERNAL_TX_SW_BUFFER_CONST) */
 356:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 357:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_TX_SW_BUFFER)
 358:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 359:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Get current Tail index */
 360:Generated_Source\PSoC4/Serial_SPI_UART.c ****             locTail = Serial_txBufferTail;
 361:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 362:Generated_Source\PSoC4/Serial_SPI_UART.c ****             if (Serial_txBufferHead >= locTail)
 363:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 364:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 size = (Serial_txBufferHead - locTail);
 365:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 366:Generated_Source\PSoC4/Serial_SPI_UART.c ****             else
 367:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 368:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 size = (Serial_txBufferHead + (Serial_TX_BUFFER_SIZE - locTail));
 369:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 370:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 371:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 372:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 373:Generated_Source\PSoC4/Serial_SPI_UART.c ****             size = Serial_GET_TX_FIFO_ENTRIES;
 374:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 375:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 376:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 377:Generated_Source\PSoC4/Serial_SPI_UART.c ****         return (size);
 378:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 379:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 380:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 381:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 382:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartClearTxBuffer
 383:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ********************************************************************************
 384:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 385:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Summary:
 386:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Clears the transmit buffer and TX FIFO.
 387:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 388:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Parameters:
 389:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
 390:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 391:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Return:
 392:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  None
 393:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 394:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 395:Generated_Source\PSoC4/Serial_SPI_UART.c ****     void Serial_SpiUartClearTxBuffer(void)
 396:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 397:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_TX_SW_BUFFER)
 398:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 399:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Lock from component interruption */
 400:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_DisableInt();
 401:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 402:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Flush TX software buffer */
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 12


 403:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_txBufferHead = Serial_txBufferTail;
 404:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 405:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_INTR_TX_MASK_REG &= (uint32) ~Serial_INTR_TX_NOT_FULL;
 406:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_CLEAR_TX_FIFO;
 407:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_ClearTxInterruptSource(Serial_INTR_TX_ALL);
 408:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 409:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Release lock */
 410:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_EnableInt();
 411:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 412:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 413:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 414:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_CLEAR_TX_FIFO;
 415:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 416:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 417:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 418:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 419:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_TX_DIRECTION) */
 420:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 421:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 422:Generated_Source\PSoC4/Serial_SPI_UART.c **** /*******************************************************************************
 423:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Function Name: Serial_SpiUartDisableIntRx
 424:Generated_Source\PSoC4/Serial_SPI_UART.c **** ********************************************************************************
 425:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 426:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Summary:
 427:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  Disables the RX interrupt sources.
 428:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 429:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Parameters:
 430:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  None
 431:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 432:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Return:
 433:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  Returns the RX interrupt sources enabled before the function call.
 434:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 435:Generated_Source\PSoC4/Serial_SPI_UART.c **** *******************************************************************************/
 436:Generated_Source\PSoC4/Serial_SPI_UART.c **** uint32 Serial_SpiUartDisableIntRx(void)
 437:Generated_Source\PSoC4/Serial_SPI_UART.c **** {
 226              		.loc 1 437 0
 227              		.cfi_startproc
 228 0000 80B5     		push	{r7, lr}
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 7, -8
 231              		.cfi_offset 14, -4
 232 0002 82B0     		sub	sp, sp, #8
 233              		.cfi_def_cfa_offset 16
 234 0004 00AF     		add	r7, sp, #0
 235              		.cfi_def_cfa_register 7
 438:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 intSource;
 439:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 440:Generated_Source\PSoC4/Serial_SPI_UART.c ****     intSource = Serial_GetRxInterruptMode();
 236              		.loc 1 440 0
 237 0006 054B     		ldr	r3, .L18
 238 0008 1B68     		ldr	r3, [r3]
 239 000a 7B60     		str	r3, [r7, #4]
 441:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 442:Generated_Source\PSoC4/Serial_SPI_UART.c ****     Serial_SetRxInterruptMode(Serial_NO_INTR_SOURCES);
 240              		.loc 1 442 0
 241 000c 034B     		ldr	r3, .L18
 242 000e 0022     		mov	r2, #0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 13


 243 0010 1A60     		str	r2, [r3]
 443:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 444:Generated_Source\PSoC4/Serial_SPI_UART.c ****     return (intSource);
 244              		.loc 1 444 0
 245 0012 7B68     		ldr	r3, [r7, #4]
 445:Generated_Source\PSoC4/Serial_SPI_UART.c **** }
 246              		.loc 1 445 0
 247 0014 181C     		mov	r0, r3
 248 0016 BD46     		mov	sp, r7
 249 0018 02B0     		add	sp, sp, #8
 250              		@ sp needed
 251 001a 80BD     		pop	{r7, pc}
 252              	.L19:
 253              		.align	2
 254              	.L18:
 255 001c C80F2440 		.word	1076105160
 256              		.cfi_endproc
 257              	.LFE5:
 258              		.size	Serial_SpiUartDisableIntRx, .-Serial_SpiUartDisableIntRx
 259              		.section	.text.Serial_SpiUartDisableIntTx,"ax",%progbits
 260              		.align	2
 261              		.global	Serial_SpiUartDisableIntTx
 262              		.code	16
 263              		.thumb_func
 264              		.type	Serial_SpiUartDisableIntTx, %function
 265              	Serial_SpiUartDisableIntTx:
 266              	.LFB6:
 446:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 447:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 448:Generated_Source\PSoC4/Serial_SPI_UART.c **** /*******************************************************************************
 449:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Function Name: Serial_SpiUartDisableIntTx
 450:Generated_Source\PSoC4/Serial_SPI_UART.c **** ********************************************************************************
 451:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 452:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Summary:
 453:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  Disables TX interrupt sources.
 454:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 455:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Parameters:
 456:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  None
 457:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 458:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Return:
 459:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  Returns TX interrupt sources enabled before function call.
 460:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 461:Generated_Source\PSoC4/Serial_SPI_UART.c **** *******************************************************************************/
 462:Generated_Source\PSoC4/Serial_SPI_UART.c **** uint32 Serial_SpiUartDisableIntTx(void)
 463:Generated_Source\PSoC4/Serial_SPI_UART.c **** {
 267              		.loc 1 463 0
 268              		.cfi_startproc
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 464:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 intSourceMask;
 465:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 14


 466:Generated_Source\PSoC4/Serial_SPI_UART.c ****     intSourceMask = Serial_GetTxInterruptMode();
 277              		.loc 1 466 0
 278 0006 054B     		ldr	r3, .L22
 279 0008 1B68     		ldr	r3, [r3]
 280 000a 7B60     		str	r3, [r7, #4]
 467:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 468:Generated_Source\PSoC4/Serial_SPI_UART.c ****     Serial_SetTxInterruptMode(Serial_NO_INTR_SOURCES);
 281              		.loc 1 468 0
 282 000c 034B     		ldr	r3, .L22
 283 000e 0022     		mov	r2, #0
 284 0010 1A60     		str	r2, [r3]
 469:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 470:Generated_Source\PSoC4/Serial_SPI_UART.c ****     return (intSourceMask);
 285              		.loc 1 470 0
 286 0012 7B68     		ldr	r3, [r7, #4]
 471:Generated_Source\PSoC4/Serial_SPI_UART.c **** }
 287              		.loc 1 471 0
 288 0014 181C     		mov	r0, r3
 289 0016 BD46     		mov	sp, r7
 290 0018 02B0     		add	sp, sp, #8
 291              		@ sp needed
 292 001a 80BD     		pop	{r7, pc}
 293              	.L23:
 294              		.align	2
 295              	.L22:
 296 001c 880F2440 		.word	1076105096
 297              		.cfi_endproc
 298              	.LFE6:
 299              		.size	Serial_SpiUartDisableIntTx, .-Serial_SpiUartDisableIntTx
 300              		.text
 301              	.Letext0:
 302              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 303              		.section	.debug_info,"",%progbits
 304              	.Ldebug_info0:
 305 0000 DC010000 		.4byte	0x1dc
 306 0004 0400     		.2byte	0x4
 307 0006 00000000 		.4byte	.Ldebug_abbrev0
 308 000a 04       		.byte	0x4
 309 000b 01       		.uleb128 0x1
 310 000c FE000000 		.4byte	.LASF30
 311 0010 01       		.byte	0x1
 312 0011 E1010000 		.4byte	.LASF31
 313 0015 06000000 		.4byte	.LASF32
 314 0019 00000000 		.4byte	.Ldebug_ranges0+0
 315 001d 00000000 		.4byte	0
 316 0021 00000000 		.4byte	.Ldebug_line0
 317 0025 02       		.uleb128 0x2
 318 0026 01       		.byte	0x1
 319 0027 06       		.byte	0x6
 320 0028 C3020000 		.4byte	.LASF0
 321 002c 02       		.uleb128 0x2
 322 002d 01       		.byte	0x1
 323 002e 08       		.byte	0x8
 324 002f 93010000 		.4byte	.LASF1
 325 0033 02       		.uleb128 0x2
 326 0034 02       		.byte	0x2
 327 0035 05       		.byte	0x5
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 15


 328 0036 81020000 		.4byte	.LASF2
 329 003a 02       		.uleb128 0x2
 330 003b 02       		.byte	0x2
 331 003c 07       		.byte	0x7
 332 003d 73000000 		.4byte	.LASF3
 333 0041 02       		.uleb128 0x2
 334 0042 04       		.byte	0x4
 335 0043 05       		.byte	0x5
 336 0044 BA020000 		.4byte	.LASF4
 337 0048 02       		.uleb128 0x2
 338 0049 04       		.byte	0x4
 339 004a 07       		.byte	0x7
 340 004b A6000000 		.4byte	.LASF5
 341 004f 02       		.uleb128 0x2
 342 0050 08       		.byte	0x8
 343 0051 05       		.byte	0x5
 344 0052 0A020000 		.4byte	.LASF6
 345 0056 02       		.uleb128 0x2
 346 0057 08       		.byte	0x8
 347 0058 07       		.byte	0x7
 348 0059 B9010000 		.4byte	.LASF7
 349 005d 03       		.uleb128 0x3
 350 005e 04       		.byte	0x4
 351 005f 05       		.byte	0x5
 352 0060 696E7400 		.ascii	"int\000"
 353 0064 02       		.uleb128 0x2
 354 0065 04       		.byte	0x4
 355 0066 07       		.byte	0x7
 356 0067 86000000 		.4byte	.LASF8
 357 006b 04       		.uleb128 0x4
 358 006c B8000000 		.4byte	.LASF9
 359 0070 02       		.byte	0x2
 360 0071 3801     		.2byte	0x138
 361 0073 2C000000 		.4byte	0x2c
 362 0077 04       		.uleb128 0x4
 363 0078 8C010000 		.4byte	.LASF10
 364 007c 02       		.byte	0x2
 365 007d 3A01     		.2byte	0x13a
 366 007f 48000000 		.4byte	0x48
 367 0083 02       		.uleb128 0x2
 368 0084 04       		.byte	0x4
 369 0085 04       		.byte	0x4
 370 0086 9B000000 		.4byte	.LASF11
 371 008a 02       		.uleb128 0x2
 372 008b 08       		.byte	0x8
 373 008c 04       		.byte	0x4
 374 008d F7000000 		.4byte	.LASF12
 375 0091 02       		.uleb128 0x2
 376 0092 01       		.byte	0x1
 377 0093 08       		.byte	0x8
 378 0094 30020000 		.4byte	.LASF13
 379 0098 05       		.uleb128 0x5
 380 0099 6B000000 		.4byte	0x6b
 381 009d 04       		.uleb128 0x4
 382 009e 00000000 		.4byte	.LASF14
 383 00a2 02       		.byte	0x2
 384 00a3 E401     		.2byte	0x1e4
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 16


 385 00a5 A9000000 		.4byte	0xa9
 386 00a9 05       		.uleb128 0x5
 387 00aa 77000000 		.4byte	0x77
 388 00ae 02       		.uleb128 0x2
 389 00af 04       		.byte	0x4
 390 00b0 07       		.byte	0x7
 391 00b1 D8010000 		.4byte	.LASF15
 392 00b5 06       		.uleb128 0x6
 393 00b6 35020000 		.4byte	.LASF18
 394 00ba 01       		.byte	0x1
 395 00bb 45       		.byte	0x45
 396 00bc 77000000 		.4byte	0x77
 397 00c0 00000000 		.4byte	.LFB2
 398 00c4 50000000 		.4byte	.LFE2-.LFB2
 399 00c8 01       		.uleb128 0x1
 400 00c9 9C       		.byte	0x9c
 401 00ca EB000000 		.4byte	0xeb
 402 00ce 07       		.uleb128 0x7
 403 00cf BE000000 		.4byte	.LASF16
 404 00d3 01       		.byte	0x1
 405 00d4 47       		.byte	0x47
 406 00d5 77000000 		.4byte	0x77
 407 00d9 02       		.uleb128 0x2
 408 00da 91       		.byte	0x91
 409 00db 74       		.sleb128 -12
 410 00dc 07       		.uleb128 0x7
 411 00dd D0010000 		.4byte	.LASF17
 412 00e1 01       		.byte	0x1
 413 00e2 4A       		.byte	0x4a
 414 00e3 77000000 		.4byte	0x77
 415 00e7 02       		.uleb128 0x2
 416 00e8 91       		.byte	0x91
 417 00e9 70       		.sleb128 -16
 418 00ea 00       		.byte	0
 419 00eb 06       		.uleb128 0x6
 420 00ec D9000000 		.4byte	.LASF19
 421 00f0 01       		.byte	0x1
 422 00f1 8D       		.byte	0x8d
 423 00f2 77000000 		.4byte	0x77
 424 00f6 00000000 		.4byte	.LFB3
 425 00fa 40000000 		.4byte	.LFE3-.LFB3
 426 00fe 01       		.uleb128 0x1
 427 00ff 9C       		.byte	0x9c
 428 0100 21010000 		.4byte	0x121
 429 0104 07       		.uleb128 0x7
 430 0105 A1000000 		.4byte	.LASF20
 431 0109 01       		.byte	0x1
 432 010a 8F       		.byte	0x8f
 433 010b 77000000 		.4byte	0x77
 434 010f 02       		.uleb128 0x2
 435 0110 91       		.byte	0x91
 436 0111 74       		.sleb128 -12
 437 0112 07       		.uleb128 0x7
 438 0113 93000000 		.4byte	.LASF21
 439 0117 01       		.byte	0x1
 440 0118 91       		.byte	0x91
 441 0119 77000000 		.4byte	0x77
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 17


 442 011d 02       		.uleb128 0x2
 443 011e 91       		.byte	0x91
 444 011f 70       		.sleb128 -16
 445 0120 00       		.byte	0
 446 0121 08       		.uleb128 0x8
 447 0122 57000000 		.4byte	.LASF33
 448 0126 01       		.byte	0x1
 449 0127 B9       		.byte	0xb9
 450 0128 00000000 		.4byte	.LFB4
 451 012c 60000000 		.4byte	.LFE4-.LFB4
 452 0130 01       		.uleb128 0x1
 453 0131 9C       		.byte	0x9c
 454 0132 09       		.uleb128 0x9
 455 0133 66020000 		.4byte	.LASF22
 456 0137 01       		.byte	0x1
 457 0138 B401     		.2byte	0x1b4
 458 013a 77000000 		.4byte	0x77
 459 013e 00000000 		.4byte	.LFB5
 460 0142 20000000 		.4byte	.LFE5-.LFB5
 461 0146 01       		.uleb128 0x1
 462 0147 9C       		.byte	0x9c
 463 0148 5C010000 		.4byte	0x15c
 464 014c 0A       		.uleb128 0xa
 465 014d AF010000 		.4byte	.LASF23
 466 0151 01       		.byte	0x1
 467 0152 B601     		.2byte	0x1b6
 468 0154 77000000 		.4byte	0x77
 469 0158 02       		.uleb128 0x2
 470 0159 91       		.byte	0x91
 471 015a 74       		.sleb128 -12
 472 015b 00       		.byte	0
 473 015c 09       		.uleb128 0x9
 474 015d 8B020000 		.4byte	.LASF24
 475 0161 01       		.byte	0x1
 476 0162 CE01     		.2byte	0x1ce
 477 0164 77000000 		.4byte	0x77
 478 0168 00000000 		.4byte	.LFB6
 479 016c 20000000 		.4byte	.LFE6-.LFB6
 480 0170 01       		.uleb128 0x1
 481 0171 9C       		.byte	0x9c
 482 0172 86010000 		.4byte	0x186
 483 0176 0A       		.uleb128 0xa
 484 0177 A1010000 		.4byte	.LASF25
 485 017b 01       		.byte	0x1
 486 017c D001     		.2byte	0x1d0
 487 017e 77000000 		.4byte	0x77
 488 0182 02       		.uleb128 0x2
 489 0183 91       		.byte	0x91
 490 0184 74       		.sleb128 -12
 491 0185 00       		.byte	0
 492 0186 0B       		.uleb128 0xb
 493 0187 C5000000 		.4byte	.LASF26
 494 018b 01       		.byte	0x1
 495 018c 1A       		.byte	0x1a
 496 018d A9000000 		.4byte	0xa9
 497 0191 05       		.uleb128 0x5
 498 0192 03       		.byte	0x3
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 18


 499 0193 00000000 		.4byte	Serial_rxBufferHead
 500 0197 0B       		.uleb128 0xb
 501 0198 A6020000 		.4byte	.LASF27
 502 019c 01       		.byte	0x1
 503 019d 1B       		.byte	0x1b
 504 019e A9000000 		.4byte	0xa9
 505 01a2 05       		.uleb128 0x5
 506 01a3 03       		.byte	0x3
 507 01a4 00000000 		.4byte	Serial_rxBufferTail
 508 01a8 0B       		.uleb128 0xb
 509 01a9 4E020000 		.4byte	.LASF28
 510 01ad 01       		.byte	0x1
 511 01ae 1C       		.byte	0x1c
 512 01af 98000000 		.4byte	0x98
 513 01b3 05       		.uleb128 0x5
 514 01b4 03       		.byte	0x3
 515 01b5 00000000 		.4byte	Serial_rxBufferOverflow
 516 01b9 0C       		.uleb128 0xc
 517 01ba 6B000000 		.4byte	0x6b
 518 01be C9010000 		.4byte	0x1c9
 519 01c2 0D       		.uleb128 0xd
 520 01c3 AE000000 		.4byte	0xae
 521 01c7 23       		.byte	0x23
 522 01c8 00       		.byte	0
 523 01c9 0B       		.uleb128 0xb
 524 01ca 18020000 		.4byte	.LASF29
 525 01ce 01       		.byte	0x1
 526 01cf 26       		.byte	0x26
 527 01d0 DA010000 		.4byte	0x1da
 528 01d4 05       		.uleb128 0x5
 529 01d5 03       		.byte	0x3
 530 01d6 00000000 		.4byte	Serial_rxBufferInternal
 531 01da 05       		.uleb128 0x5
 532 01db B9010000 		.4byte	0x1b9
 533 01df 00       		.byte	0
 534              		.section	.debug_abbrev,"",%progbits
 535              	.Ldebug_abbrev0:
 536 0000 01       		.uleb128 0x1
 537 0001 11       		.uleb128 0x11
 538 0002 01       		.byte	0x1
 539 0003 25       		.uleb128 0x25
 540 0004 0E       		.uleb128 0xe
 541 0005 13       		.uleb128 0x13
 542 0006 0B       		.uleb128 0xb
 543 0007 03       		.uleb128 0x3
 544 0008 0E       		.uleb128 0xe
 545 0009 1B       		.uleb128 0x1b
 546 000a 0E       		.uleb128 0xe
 547 000b 55       		.uleb128 0x55
 548 000c 17       		.uleb128 0x17
 549 000d 11       		.uleb128 0x11
 550 000e 01       		.uleb128 0x1
 551 000f 10       		.uleb128 0x10
 552 0010 17       		.uleb128 0x17
 553 0011 00       		.byte	0
 554 0012 00       		.byte	0
 555 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 19


 556 0014 24       		.uleb128 0x24
 557 0015 00       		.byte	0
 558 0016 0B       		.uleb128 0xb
 559 0017 0B       		.uleb128 0xb
 560 0018 3E       		.uleb128 0x3e
 561 0019 0B       		.uleb128 0xb
 562 001a 03       		.uleb128 0x3
 563 001b 0E       		.uleb128 0xe
 564 001c 00       		.byte	0
 565 001d 00       		.byte	0
 566 001e 03       		.uleb128 0x3
 567 001f 24       		.uleb128 0x24
 568 0020 00       		.byte	0
 569 0021 0B       		.uleb128 0xb
 570 0022 0B       		.uleb128 0xb
 571 0023 3E       		.uleb128 0x3e
 572 0024 0B       		.uleb128 0xb
 573 0025 03       		.uleb128 0x3
 574 0026 08       		.uleb128 0x8
 575 0027 00       		.byte	0
 576 0028 00       		.byte	0
 577 0029 04       		.uleb128 0x4
 578 002a 16       		.uleb128 0x16
 579 002b 00       		.byte	0
 580 002c 03       		.uleb128 0x3
 581 002d 0E       		.uleb128 0xe
 582 002e 3A       		.uleb128 0x3a
 583 002f 0B       		.uleb128 0xb
 584 0030 3B       		.uleb128 0x3b
 585 0031 05       		.uleb128 0x5
 586 0032 49       		.uleb128 0x49
 587 0033 13       		.uleb128 0x13
 588 0034 00       		.byte	0
 589 0035 00       		.byte	0
 590 0036 05       		.uleb128 0x5
 591 0037 35       		.uleb128 0x35
 592 0038 00       		.byte	0
 593 0039 49       		.uleb128 0x49
 594 003a 13       		.uleb128 0x13
 595 003b 00       		.byte	0
 596 003c 00       		.byte	0
 597 003d 06       		.uleb128 0x6
 598 003e 2E       		.uleb128 0x2e
 599 003f 01       		.byte	0x1
 600 0040 3F       		.uleb128 0x3f
 601 0041 19       		.uleb128 0x19
 602 0042 03       		.uleb128 0x3
 603 0043 0E       		.uleb128 0xe
 604 0044 3A       		.uleb128 0x3a
 605 0045 0B       		.uleb128 0xb
 606 0046 3B       		.uleb128 0x3b
 607 0047 0B       		.uleb128 0xb
 608 0048 27       		.uleb128 0x27
 609 0049 19       		.uleb128 0x19
 610 004a 49       		.uleb128 0x49
 611 004b 13       		.uleb128 0x13
 612 004c 11       		.uleb128 0x11
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 20


 613 004d 01       		.uleb128 0x1
 614 004e 12       		.uleb128 0x12
 615 004f 06       		.uleb128 0x6
 616 0050 40       		.uleb128 0x40
 617 0051 18       		.uleb128 0x18
 618 0052 9742     		.uleb128 0x2117
 619 0054 19       		.uleb128 0x19
 620 0055 01       		.uleb128 0x1
 621 0056 13       		.uleb128 0x13
 622 0057 00       		.byte	0
 623 0058 00       		.byte	0
 624 0059 07       		.uleb128 0x7
 625 005a 34       		.uleb128 0x34
 626 005b 00       		.byte	0
 627 005c 03       		.uleb128 0x3
 628 005d 0E       		.uleb128 0xe
 629 005e 3A       		.uleb128 0x3a
 630 005f 0B       		.uleb128 0xb
 631 0060 3B       		.uleb128 0x3b
 632 0061 0B       		.uleb128 0xb
 633 0062 49       		.uleb128 0x49
 634 0063 13       		.uleb128 0x13
 635 0064 02       		.uleb128 0x2
 636 0065 18       		.uleb128 0x18
 637 0066 00       		.byte	0
 638 0067 00       		.byte	0
 639 0068 08       		.uleb128 0x8
 640 0069 2E       		.uleb128 0x2e
 641 006a 00       		.byte	0
 642 006b 3F       		.uleb128 0x3f
 643 006c 19       		.uleb128 0x19
 644 006d 03       		.uleb128 0x3
 645 006e 0E       		.uleb128 0xe
 646 006f 3A       		.uleb128 0x3a
 647 0070 0B       		.uleb128 0xb
 648 0071 3B       		.uleb128 0x3b
 649 0072 0B       		.uleb128 0xb
 650 0073 27       		.uleb128 0x27
 651 0074 19       		.uleb128 0x19
 652 0075 11       		.uleb128 0x11
 653 0076 01       		.uleb128 0x1
 654 0077 12       		.uleb128 0x12
 655 0078 06       		.uleb128 0x6
 656 0079 40       		.uleb128 0x40
 657 007a 18       		.uleb128 0x18
 658 007b 9642     		.uleb128 0x2116
 659 007d 19       		.uleb128 0x19
 660 007e 00       		.byte	0
 661 007f 00       		.byte	0
 662 0080 09       		.uleb128 0x9
 663 0081 2E       		.uleb128 0x2e
 664 0082 01       		.byte	0x1
 665 0083 3F       		.uleb128 0x3f
 666 0084 19       		.uleb128 0x19
 667 0085 03       		.uleb128 0x3
 668 0086 0E       		.uleb128 0xe
 669 0087 3A       		.uleb128 0x3a
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 21


 670 0088 0B       		.uleb128 0xb
 671 0089 3B       		.uleb128 0x3b
 672 008a 05       		.uleb128 0x5
 673 008b 27       		.uleb128 0x27
 674 008c 19       		.uleb128 0x19
 675 008d 49       		.uleb128 0x49
 676 008e 13       		.uleb128 0x13
 677 008f 11       		.uleb128 0x11
 678 0090 01       		.uleb128 0x1
 679 0091 12       		.uleb128 0x12
 680 0092 06       		.uleb128 0x6
 681 0093 40       		.uleb128 0x40
 682 0094 18       		.uleb128 0x18
 683 0095 9742     		.uleb128 0x2117
 684 0097 19       		.uleb128 0x19
 685 0098 01       		.uleb128 0x1
 686 0099 13       		.uleb128 0x13
 687 009a 00       		.byte	0
 688 009b 00       		.byte	0
 689 009c 0A       		.uleb128 0xa
 690 009d 34       		.uleb128 0x34
 691 009e 00       		.byte	0
 692 009f 03       		.uleb128 0x3
 693 00a0 0E       		.uleb128 0xe
 694 00a1 3A       		.uleb128 0x3a
 695 00a2 0B       		.uleb128 0xb
 696 00a3 3B       		.uleb128 0x3b
 697 00a4 05       		.uleb128 0x5
 698 00a5 49       		.uleb128 0x49
 699 00a6 13       		.uleb128 0x13
 700 00a7 02       		.uleb128 0x2
 701 00a8 18       		.uleb128 0x18
 702 00a9 00       		.byte	0
 703 00aa 00       		.byte	0
 704 00ab 0B       		.uleb128 0xb
 705 00ac 34       		.uleb128 0x34
 706 00ad 00       		.byte	0
 707 00ae 03       		.uleb128 0x3
 708 00af 0E       		.uleb128 0xe
 709 00b0 3A       		.uleb128 0x3a
 710 00b1 0B       		.uleb128 0xb
 711 00b2 3B       		.uleb128 0x3b
 712 00b3 0B       		.uleb128 0xb
 713 00b4 49       		.uleb128 0x49
 714 00b5 13       		.uleb128 0x13
 715 00b6 3F       		.uleb128 0x3f
 716 00b7 19       		.uleb128 0x19
 717 00b8 02       		.uleb128 0x2
 718 00b9 18       		.uleb128 0x18
 719 00ba 00       		.byte	0
 720 00bb 00       		.byte	0
 721 00bc 0C       		.uleb128 0xc
 722 00bd 01       		.uleb128 0x1
 723 00be 01       		.byte	0x1
 724 00bf 49       		.uleb128 0x49
 725 00c0 13       		.uleb128 0x13
 726 00c1 01       		.uleb128 0x1
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 22


 727 00c2 13       		.uleb128 0x13
 728 00c3 00       		.byte	0
 729 00c4 00       		.byte	0
 730 00c5 0D       		.uleb128 0xd
 731 00c6 21       		.uleb128 0x21
 732 00c7 00       		.byte	0
 733 00c8 49       		.uleb128 0x49
 734 00c9 13       		.uleb128 0x13
 735 00ca 2F       		.uleb128 0x2f
 736 00cb 0B       		.uleb128 0xb
 737 00cc 00       		.byte	0
 738 00cd 00       		.byte	0
 739 00ce 00       		.byte	0
 740              		.section	.debug_aranges,"",%progbits
 741 0000 3C000000 		.4byte	0x3c
 742 0004 0200     		.2byte	0x2
 743 0006 00000000 		.4byte	.Ldebug_info0
 744 000a 04       		.byte	0x4
 745 000b 00       		.byte	0
 746 000c 0000     		.2byte	0
 747 000e 0000     		.2byte	0
 748 0010 00000000 		.4byte	.LFB2
 749 0014 50000000 		.4byte	.LFE2-.LFB2
 750 0018 00000000 		.4byte	.LFB3
 751 001c 40000000 		.4byte	.LFE3-.LFB3
 752 0020 00000000 		.4byte	.LFB4
 753 0024 60000000 		.4byte	.LFE4-.LFB4
 754 0028 00000000 		.4byte	.LFB5
 755 002c 20000000 		.4byte	.LFE5-.LFB5
 756 0030 00000000 		.4byte	.LFB6
 757 0034 20000000 		.4byte	.LFE6-.LFB6
 758 0038 00000000 		.4byte	0
 759 003c 00000000 		.4byte	0
 760              		.section	.debug_ranges,"",%progbits
 761              	.Ldebug_ranges0:
 762 0000 00000000 		.4byte	.LFB2
 763 0004 50000000 		.4byte	.LFE2
 764 0008 00000000 		.4byte	.LFB3
 765 000c 40000000 		.4byte	.LFE3
 766 0010 00000000 		.4byte	.LFB4
 767 0014 60000000 		.4byte	.LFE4
 768 0018 00000000 		.4byte	.LFB5
 769 001c 20000000 		.4byte	.LFE5
 770 0020 00000000 		.4byte	.LFB6
 771 0024 20000000 		.4byte	.LFE6
 772 0028 00000000 		.4byte	0
 773 002c 00000000 		.4byte	0
 774              		.section	.debug_line,"",%progbits
 775              	.Ldebug_line0:
 776 0000 C5000000 		.section	.debug_str,"MS",%progbits,1
 776      02004C00 
 776      00000201 
 776      FB0E0D00 
 776      01010101 
 777              	.LASF14:
 778 0000 72656733 		.ascii	"reg32\000"
 778      3200
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 23


 779              	.LASF32:
 780 0006 433A5C55 		.ascii	"C:\\Users\\TTSS\\Dropbox\\Projects\\hackAIR\\AirQua"
 780      73657273 
 780      5C545453 
 780      535C4472 
 780      6F70626F 
 781 0033 6C697479 		.ascii	"lityBeacons\\SerialLaserSensor.cydsn\000"
 781      42656163 
 781      6F6E735C 
 781      53657269 
 781      616C4C61 
 782              	.LASF33:
 783 0057 53657269 		.ascii	"Serial_SpiUartClearRxBuffer\000"
 783      616C5F53 
 783      70695561 
 783      7274436C 
 783      65617252 
 784              	.LASF3:
 785 0073 73686F72 		.ascii	"short unsigned int\000"
 785      7420756E 
 785      7369676E 
 785      65642069 
 785      6E7400
 786              	.LASF8:
 787 0086 756E7369 		.ascii	"unsigned int\000"
 787      676E6564 
 787      20696E74 
 787      00
 788              	.LASF21:
 789 0093 6C6F6348 		.ascii	"locHead\000"
 789      65616400 
 790              	.LASF11:
 791 009b 666C6F61 		.ascii	"float\000"
 791      7400
 792              	.LASF20:
 793 00a1 73697A65 		.ascii	"size\000"
 793      00
 794              	.LASF5:
 795 00a6 6C6F6E67 		.ascii	"long unsigned int\000"
 795      20756E73 
 795      69676E65 
 795      6420696E 
 795      7400
 796              	.LASF9:
 797 00b8 75696E74 		.ascii	"uint8\000"
 797      3800
 798              	.LASF16:
 799 00be 72784461 		.ascii	"rxData\000"
 799      746100
 800              	.LASF26:
 801 00c5 53657269 		.ascii	"Serial_rxBufferHead\000"
 801      616C5F72 
 801      78427566 
 801      66657248 
 801      65616400 
 802              	.LASF19:
 803 00d9 53657269 		.ascii	"Serial_SpiUartGetRxBufferSize\000"
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 24


 803      616C5F53 
 803      70695561 
 803      72744765 
 803      74527842 
 804              	.LASF12:
 805 00f7 646F7562 		.ascii	"double\000"
 805      6C6500
 806              	.LASF30:
 807 00fe 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 807      4320342E 
 807      392E3320 
 807      32303135 
 807      30333033 
 808 0131 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 808      20726576 
 808      6973696F 
 808      6E203232 
 808      31323230 
 809 0164 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 809      66756E63 
 809      74696F6E 
 809      2D736563 
 809      74696F6E 
 810              	.LASF10:
 811 018c 75696E74 		.ascii	"uint32\000"
 811      333200
 812              	.LASF1:
 813 0193 756E7369 		.ascii	"unsigned char\000"
 813      676E6564 
 813      20636861 
 813      7200
 814              	.LASF25:
 815 01a1 696E7453 		.ascii	"intSourceMask\000"
 815      6F757263 
 815      654D6173 
 815      6B00
 816              	.LASF23:
 817 01af 696E7453 		.ascii	"intSource\000"
 817      6F757263 
 817      6500
 818              	.LASF7:
 819 01b9 6C6F6E67 		.ascii	"long long unsigned int\000"
 819      206C6F6E 
 819      6720756E 
 819      7369676E 
 819      65642069 
 820              	.LASF17:
 821 01d0 6C6F6354 		.ascii	"locTail\000"
 821      61696C00 
 822              	.LASF15:
 823 01d8 73697A65 		.ascii	"sizetype\000"
 823      74797065 
 823      00
 824              	.LASF31:
 825 01e1 47656E65 		.ascii	"Generated_Source\\PSoC4\\Serial_SPI_UART.c\000"
 825      72617465 
 825      645F536F 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 25


 825      75726365 
 825      5C50536F 
 826              	.LASF6:
 827 020a 6C6F6E67 		.ascii	"long long int\000"
 827      206C6F6E 
 827      6720696E 
 827      7400
 828              	.LASF29:
 829 0218 53657269 		.ascii	"Serial_rxBufferInternal\000"
 829      616C5F72 
 829      78427566 
 829      66657249 
 829      6E746572 
 830              	.LASF13:
 831 0230 63686172 		.ascii	"char\000"
 831      00
 832              	.LASF18:
 833 0235 53657269 		.ascii	"Serial_SpiUartReadRxData\000"
 833      616C5F53 
 833      70695561 
 833      72745265 
 833      61645278 
 834              	.LASF28:
 835 024e 53657269 		.ascii	"Serial_rxBufferOverflow\000"
 835      616C5F72 
 835      78427566 
 835      6665724F 
 835      76657266 
 836              	.LASF22:
 837 0266 53657269 		.ascii	"Serial_SpiUartDisableIntRx\000"
 837      616C5F53 
 837      70695561 
 837      72744469 
 837      7361626C 
 838              	.LASF2:
 839 0281 73686F72 		.ascii	"short int\000"
 839      7420696E 
 839      7400
 840              	.LASF24:
 841 028b 53657269 		.ascii	"Serial_SpiUartDisableIntTx\000"
 841      616C5F53 
 841      70695561 
 841      72744469 
 841      7361626C 
 842              	.LASF27:
 843 02a6 53657269 		.ascii	"Serial_rxBufferTail\000"
 843      616C5F72 
 843      78427566 
 843      66657254 
 843      61696C00 
 844              	.LASF4:
 845 02ba 6C6F6E67 		.ascii	"long int\000"
 845      20696E74 
 845      00
 846              	.LASF0:
 847 02c3 7369676E 		.ascii	"signed char\000"
 847      65642063 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\cc37lGYw.s 			page 26


 847      68617200 
 848              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
