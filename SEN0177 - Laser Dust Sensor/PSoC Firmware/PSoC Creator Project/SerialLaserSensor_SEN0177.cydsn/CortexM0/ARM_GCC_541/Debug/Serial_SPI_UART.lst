ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Serial_SPI_UART.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	Serial_rxBufferHead,4,4
  20              		.comm	Serial_rxBufferTail,4,4
  21              		.comm	Serial_rxBufferOverflow,1,1
  22              		.comm	Serial_rxBufferInternal,36,4
  23              		.section	.text.Serial_SpiUartReadRxData,"ax",%progbits
  24              		.align	2
  25              		.global	Serial_SpiUartReadRxData
  26              		.code	16
  27              		.thumb_func
  28              		.type	Serial_SpiUartReadRxData, %function
  29              	Serial_SpiUartReadRxData:
  30              	.LFB2:
  31              		.file 1 "Generated_Source\\PSoC4\\Serial_SPI_UART.c"
   1:Generated_Source\PSoC4/Serial_SPI_UART.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/Serial_SPI_UART.c **** * \file Serial_SPI_UART.c
   3:Generated_Source\PSoC4/Serial_SPI_UART.c **** * \version 4.0
   4:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
   5:Generated_Source\PSoC4/Serial_SPI_UART.c **** * \brief
   6:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  This file provides the source code to the API for the SCB Component in
   7:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  SPI and UART modes.
   8:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
   9:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Note:
  10:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
  11:Generated_Source\PSoC4/Serial_SPI_UART.c **** *******************************************************************************
  12:Generated_Source\PSoC4/Serial_SPI_UART.c **** * \copyright
  13:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Copyright 2013-2017, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/Serial_SPI_UART.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/Serial_SPI_UART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/Serial_SPI_UART.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/Serial_SPI_UART.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  19:Generated_Source\PSoC4/Serial_SPI_UART.c **** #include "Serial_PVT.h"
  20:Generated_Source\PSoC4/Serial_SPI_UART.c **** #include "Serial_SPI_UART_PVT.h"
  21:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  22:Generated_Source\PSoC4/Serial_SPI_UART.c **** /***************************************
  23:Generated_Source\PSoC4/Serial_SPI_UART.c **** *        SPI/UART Private Vars
  24:Generated_Source\PSoC4/Serial_SPI_UART.c **** ***************************************/
  25:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  26:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_INTERNAL_RX_SW_BUFFER_CONST)
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 2


  27:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /* Start index to put data into the software receive buffer.*/
  28:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint32 Serial_rxBufferHead;
  29:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /* Start index to get data from the software receive buffer.*/
  30:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint32 Serial_rxBufferTail;
  31:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /**
  32:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \addtogroup group_globals
  33:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \{
  34:Generated_Source\PSoC4/Serial_SPI_UART.c ****     */
  35:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /** Sets when internal software receive buffer overflow
  36:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  was occurred.
  37:Generated_Source\PSoC4/Serial_SPI_UART.c ****     */
  38:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint8  Serial_rxBufferOverflow;
  39:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /** \} globals */
  40:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_INTERNAL_RX_SW_BUFFER_CONST) */
  41:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  42:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_INTERNAL_TX_SW_BUFFER_CONST)
  43:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /* Start index to put data into the software transmit buffer.*/
  44:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint32 Serial_txBufferHead;
  45:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /* Start index to get data from the software transmit buffer.*/
  46:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint32 Serial_txBufferTail;
  47:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_INTERNAL_TX_SW_BUFFER_CONST) */
  48:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  49:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_INTERNAL_RX_SW_BUFFER)
  50:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /* Add one element to the buffer to receive full packet. One byte in receive buffer is always e
  51:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint8 Serial_rxBufferInternal[Serial_INTERNAL_RX_BUFFER_SIZE];
  52:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_INTERNAL_RX_SW_BUFFER) */
  53:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  54:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_INTERNAL_TX_SW_BUFFER)
  55:Generated_Source\PSoC4/Serial_SPI_UART.c ****     volatile uint8 Serial_txBufferInternal[Serial_TX_BUFFER_SIZE];
  56:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_INTERNAL_TX_SW_BUFFER) */
  57:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  58:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  59:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_RX_DIRECTION)
  60:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
  61:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartReadRxData
  62:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ****************************************************************************//**
  63:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  64:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Retrieves the next data element from the receive buffer.
  65:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - RX software buffer is disabled: Returns data element retrieved from
  66:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     RX FIFO. Undefined data will be returned if the RX FIFO is empty.
  67:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - RX software buffer is enabled: Returns data element from the software
  68:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     receive buffer. Zero value is returned if the software receive buffer
  69:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     is empty.
  70:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  71:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \return
  72:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Next data element from the receive buffer. 
  73:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  The amount of data bits to be received depends on RX data bits selection 
  74:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  (the data bit counting starts from LSB of return value).
  75:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  76:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \globalvars
  77:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_rxBufferHead - the start index to put data into the 
  78:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software receive buffer.
  79:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_rxBufferTail - the start index to get data from the 
  80:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software receive buffer.
  81:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
  82:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
  83:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 Serial_SpiUartReadRxData(void)
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 3


  84:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
  32              		.loc 1 84 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 8
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 80B5     		push	{r7, lr}
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  85:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 rxData = 0u;
  44              		.loc 1 85 0
  45 0006 0023     		movs	r3, #0
  46 0008 7B60     		str	r3, [r7, #4]
  86:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  87:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #if (Serial_INTERNAL_RX_SW_BUFFER_CONST)
  88:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 locTail;
  89:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #endif /* (Serial_INTERNAL_RX_SW_BUFFER_CONST) */
  90:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  91:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_RX_SW_BUFFER)
  92:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
  93:Generated_Source\PSoC4/Serial_SPI_UART.c ****             if (Serial_rxBufferHead != Serial_rxBufferTail)
  47              		.loc 1 93 0
  48 000a 0E4B     		ldr	r3, .L5
  49 000c 1A68     		ldr	r2, [r3]
  50 000e 0E4B     		ldr	r3, .L5+4
  51 0010 1B68     		ldr	r3, [r3]
  52 0012 9A42     		cmp	r2, r3
  53 0014 11D0     		beq	.L2
  94:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
  95:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* There is data in RX software buffer */
  96:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
  97:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Calculate index to read from */
  98:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 locTail = (Serial_rxBufferTail + 1u);
  54              		.loc 1 98 0
  55 0016 0C4B     		ldr	r3, .L5+4
  56 0018 1B68     		ldr	r3, [r3]
  57 001a 0133     		adds	r3, r3, #1
  58 001c 3B60     		str	r3, [r7]
  99:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 100:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 if (Serial_INTERNAL_RX_BUFFER_SIZE == locTail)
  59              		.loc 1 100 0
  60 001e 3B68     		ldr	r3, [r7]
  61 0020 242B     		cmp	r3, #36
  62 0022 01D1     		bne	.L3
 101:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
 102:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     locTail = 0u;
  63              		.loc 1 102 0
  64 0024 0023     		movs	r3, #0
  65 0026 3B60     		str	r3, [r7]
  66              	.L3:
 103:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 104:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 105:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Get data from RX software buffer */
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 4


 106:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 rxData = Serial_GetWordFromRxBuffer(locTail);
  67              		.loc 1 106 0
  68 0028 084A     		ldr	r2, .L5+8
  69 002a 3B68     		ldr	r3, [r7]
  70 002c D318     		adds	r3, r2, r3
  71 002e 1B78     		ldrb	r3, [r3]
  72 0030 DBB2     		uxtb	r3, r3
  73 0032 7B60     		str	r3, [r7, #4]
 107:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 108:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Change index in the buffer */
 109:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_rxBufferTail = locTail;
  74              		.loc 1 109 0
  75 0034 044B     		ldr	r3, .L5+4
  76 0036 3A68     		ldr	r2, [r7]
  77 0038 1A60     		str	r2, [r3]
  78              	.L2:
 110:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 111:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 #if (Serial_CHECK_UART_RTS_CONTROL_FLOW)
 112:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
 113:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     /* Check if RX Not Empty is disabled in the interrupt */
 114:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     if (0u == (Serial_INTR_RX_MASK_REG & Serial_INTR_RX_NOT_EMPTY))
 115:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     {
 116:Generated_Source\PSoC4/Serial_SPI_UART.c ****                         /* Enable RX Not Empty interrupt source to continue
 117:Generated_Source\PSoC4/Serial_SPI_UART.c ****                         * receiving data into software buffer.
 118:Generated_Source\PSoC4/Serial_SPI_UART.c ****                         */
 119:Generated_Source\PSoC4/Serial_SPI_UART.c ****                         Serial_INTR_RX_MASK_REG |= Serial_INTR_RX_NOT_EMPTY;
 120:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     }
 121:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 122:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 #endif
 123:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 124:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 125:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 126:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 127:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 128:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Read data from RX FIFO */
 129:Generated_Source\PSoC4/Serial_SPI_UART.c ****             rxData = Serial_RX_FIFO_RD_REG;
 130:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 131:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 132:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 133:Generated_Source\PSoC4/Serial_SPI_UART.c ****         return (rxData);
  79              		.loc 1 133 0
  80 003a 7B68     		ldr	r3, [r7, #4]
 134:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
  81              		.loc 1 134 0
  82 003c 1800     		movs	r0, r3
  83 003e BD46     		mov	sp, r7
  84 0040 02B0     		add	sp, sp, #8
  85              		@ sp needed
  86 0042 80BD     		pop	{r7, pc}
  87              	.L6:
  88              		.align	2
  89              	.L5:
  90 0044 00000000 		.word	Serial_rxBufferHead
  91 0048 00000000 		.word	Serial_rxBufferTail
  92 004c 00000000 		.word	Serial_rxBufferInternal
  93              		.cfi_endproc
  94              	.LFE2:
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 5


  95              		.size	Serial_SpiUartReadRxData, .-Serial_SpiUartReadRxData
  96              		.section	.text.Serial_SpiUartGetRxBufferSize,"ax",%progbits
  97              		.align	2
  98              		.global	Serial_SpiUartGetRxBufferSize
  99              		.code	16
 100              		.thumb_func
 101              		.type	Serial_SpiUartGetRxBufferSize, %function
 102              	Serial_SpiUartGetRxBufferSize:
 103              	.LFB3:
 135:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 136:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 137:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 138:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartGetRxBufferSize
 139:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ****************************************************************************//**
 140:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 141:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Returns the number of received data elements in the receive buffer.
 142:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - RX software buffer disabled: returns the number of used entries in
 143:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     RX FIFO.
 144:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - RX software buffer enabled: returns the number of elements which were
 145:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     placed in the receive buffer. This does not include the hardware RX FIFO.
 146:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 147:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \return
 148:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Number of received data elements.
 149:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 150:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \globalvars
 151:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_rxBufferHead - the start index to put data into the 
 152:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software receive buffer.
 153:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_rxBufferTail - the start index to get data from the 
 154:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software receive buffer.
 155:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 156:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 157:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 Serial_SpiUartGetRxBufferSize(void)
 158:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 104              		.loc 1 158 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 8
 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108 0000 80B5     		push	{r7, lr}
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 82B0     		sub	sp, sp, #8
 113              		.cfi_def_cfa_offset 16
 114 0004 00AF     		add	r7, sp, #0
 115              		.cfi_def_cfa_register 7
 159:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 size;
 160:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #if (Serial_INTERNAL_RX_SW_BUFFER_CONST)
 161:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 locHead;
 162:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #endif /* (Serial_INTERNAL_RX_SW_BUFFER_CONST) */
 163:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 164:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_RX_SW_BUFFER)
 165:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 166:Generated_Source\PSoC4/Serial_SPI_UART.c ****             locHead = Serial_rxBufferHead;
 116              		.loc 1 166 0
 117 0006 0C4B     		ldr	r3, .L11
 118 0008 1B68     		ldr	r3, [r3]
 119 000a 3B60     		str	r3, [r7]
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 6


 167:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 168:Generated_Source\PSoC4/Serial_SPI_UART.c ****             if(locHead >= Serial_rxBufferTail)
 120              		.loc 1 168 0
 121 000c 0B4B     		ldr	r3, .L11+4
 122 000e 1B68     		ldr	r3, [r3]
 123 0010 3A68     		ldr	r2, [r7]
 124 0012 9A42     		cmp	r2, r3
 125 0014 05D3     		bcc	.L8
 169:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 170:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 size = (locHead - Serial_rxBufferTail);
 126              		.loc 1 170 0
 127 0016 094B     		ldr	r3, .L11+4
 128 0018 1B68     		ldr	r3, [r3]
 129 001a 3A68     		ldr	r2, [r7]
 130 001c D31A     		subs	r3, r2, r3
 131 001e 7B60     		str	r3, [r7, #4]
 132 0020 05E0     		b	.L9
 133              	.L8:
 171:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 172:Generated_Source\PSoC4/Serial_SPI_UART.c ****             else
 173:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 174:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 size = (locHead + (Serial_INTERNAL_RX_BUFFER_SIZE - Serial_rxBufferTail));
 134              		.loc 1 174 0
 135 0022 064B     		ldr	r3, .L11+4
 136 0024 1B68     		ldr	r3, [r3]
 137 0026 3A68     		ldr	r2, [r7]
 138 0028 D31A     		subs	r3, r2, r3
 139 002a 2433     		adds	r3, r3, #36
 140 002c 7B60     		str	r3, [r7, #4]
 141              	.L9:
 175:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 176:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 177:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 178:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 179:Generated_Source\PSoC4/Serial_SPI_UART.c ****             size = Serial_GET_RX_FIFO_ENTRIES;
 180:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 181:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 182:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 183:Generated_Source\PSoC4/Serial_SPI_UART.c ****         return (size);
 142              		.loc 1 183 0
 143 002e 7B68     		ldr	r3, [r7, #4]
 184:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 144              		.loc 1 184 0
 145 0030 1800     		movs	r0, r3
 146 0032 BD46     		mov	sp, r7
 147 0034 02B0     		add	sp, sp, #8
 148              		@ sp needed
 149 0036 80BD     		pop	{r7, pc}
 150              	.L12:
 151              		.align	2
 152              	.L11:
 153 0038 00000000 		.word	Serial_rxBufferHead
 154 003c 00000000 		.word	Serial_rxBufferTail
 155              		.cfi_endproc
 156              	.LFE3:
 157              		.size	Serial_SpiUartGetRxBufferSize, .-Serial_SpiUartGetRxBufferSize
 158              		.section	.text.Serial_SpiUartClearRxBuffer,"ax",%progbits
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 7


 159              		.align	2
 160              		.global	Serial_SpiUartClearRxBuffer
 161              		.code	16
 162              		.thumb_func
 163              		.type	Serial_SpiUartClearRxBuffer, %function
 164              	Serial_SpiUartClearRxBuffer:
 165              	.LFB4:
 185:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 186:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 187:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 188:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartClearRxBuffer
 189:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ****************************************************************************//**
 190:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 191:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Clears the receive buffer and RX FIFO.
 192:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 193:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \globalvars
 194:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_rxBufferHead - the start index to put data into the 
 195:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software receive buffer.
 196:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_rxBufferTail - the start index to get data from the 
 197:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software receive buffer.
 198:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 199:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 200:Generated_Source\PSoC4/Serial_SPI_UART.c ****     void Serial_SpiUartClearRxBuffer(void)
 201:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 166              		.loc 1 201 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 1, uses_anonymous_args = 0
 170 0000 80B5     		push	{r7, lr}
 171              		.cfi_def_cfa_offset 8
 172              		.cfi_offset 7, -8
 173              		.cfi_offset 14, -4
 174 0002 00AF     		add	r7, sp, #0
 175              		.cfi_def_cfa_register 7
 202:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_RX_SW_BUFFER)
 203:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 204:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Lock from component interruption */
 205:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_DisableInt();
 176              		.loc 1 205 0
 177 0004 0920     		movs	r0, #9
 178 0006 FFF7FEFF 		bl	CyIntDisable
 206:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 207:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Flush RX software buffer */
 208:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_rxBufferHead = Serial_rxBufferTail;
 179              		.loc 1 208 0
 180 000a 0E4B     		ldr	r3, .L14
 181 000c 1A68     		ldr	r2, [r3]
 182 000e 0E4B     		ldr	r3, .L14+4
 183 0010 1A60     		str	r2, [r3]
 209:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_rxBufferOverflow = 0u;
 184              		.loc 1 209 0
 185 0012 0E4B     		ldr	r3, .L14+8
 186 0014 0022     		movs	r2, #0
 187 0016 1A70     		strb	r2, [r3]
 210:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 211:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_CLEAR_RX_FIFO;
 188              		.loc 1 211 0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 8


 189 0018 0D4B     		ldr	r3, .L14+12
 190 001a 0D4A     		ldr	r2, .L14+12
 191 001c 1268     		ldr	r2, [r2]
 192 001e 8021     		movs	r1, #128
 193 0020 4902     		lsls	r1, r1, #9
 194 0022 0A43     		orrs	r2, r1
 195 0024 1A60     		str	r2, [r3]
 196 0026 0A4B     		ldr	r3, .L14+12
 197 0028 094A     		ldr	r2, .L14+12
 198 002a 1268     		ldr	r2, [r2]
 199 002c 0949     		ldr	r1, .L14+16
 200 002e 0A40     		ands	r2, r1
 201 0030 1A60     		str	r2, [r3]
 212:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_ClearRxInterruptSource(Serial_INTR_RX_ALL);
 202              		.loc 1 212 0
 203 0032 094B     		ldr	r3, .L14+20
 204 0034 094A     		ldr	r2, .L14+24
 205 0036 1A60     		str	r2, [r3]
 213:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 214:Generated_Source\PSoC4/Serial_SPI_UART.c ****             #if (Serial_CHECK_UART_RTS_CONTROL_FLOW)
 215:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 216:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Enable RX Not Empty interrupt source to continue receiving
 217:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 * data into software buffer.
 218:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 */
 219:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_INTR_RX_MASK_REG |= Serial_INTR_RX_NOT_EMPTY;
 220:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 221:Generated_Source\PSoC4/Serial_SPI_UART.c ****             #endif
 222:Generated_Source\PSoC4/Serial_SPI_UART.c ****             
 223:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Release lock */
 224:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_EnableInt();
 206              		.loc 1 224 0
 207 0038 0920     		movs	r0, #9
 208 003a FFF7FEFF 		bl	CyIntEnable
 225:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 226:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 227:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 228:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_CLEAR_RX_FIFO;
 229:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 230:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 231:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 209              		.loc 1 231 0
 210 003e C046     		nop
 211 0040 BD46     		mov	sp, r7
 212              		@ sp needed
 213 0042 80BD     		pop	{r7, pc}
 214              	.L15:
 215              		.align	2
 216              	.L14:
 217 0044 00000000 		.word	Serial_rxBufferTail
 218 0048 00000000 		.word	Serial_rxBufferHead
 219 004c 00000000 		.word	Serial_rxBufferOverflow
 220 0050 04032440 		.word	1076101892
 221 0054 FFFFFEFF 		.word	-65537
 222 0058 C00F2440 		.word	1076105152
 223 005c ED0F0000 		.word	4077
 224              		.cfi_endproc
 225              	.LFE4:
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 9


 226              		.size	Serial_SpiUartClearRxBuffer, .-Serial_SpiUartClearRxBuffer
 227              		.section	.text.Serial_SpiUartDisableIntRx,"ax",%progbits
 228              		.align	2
 229              		.global	Serial_SpiUartDisableIntRx
 230              		.code	16
 231              		.thumb_func
 232              		.type	Serial_SpiUartDisableIntRx, %function
 233              	Serial_SpiUartDisableIntRx:
 234              	.LFB5:
 232:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 233:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_RX_DIRECTION) */
 234:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 235:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 236:Generated_Source\PSoC4/Serial_SPI_UART.c **** #if(Serial_TX_DIRECTION)
 237:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 238:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartWriteTxData
 239:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ****************************************************************************//**
 240:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 241:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Places a data entry into the transmit buffer to be sent at the next available
 242:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  bus time.
 243:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  This function is blocking and waits until there is space available to put the
 244:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  requested data in the transmit buffer.
 245:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 246:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  \param txDataByte: the data to be transmitted.
 247:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   The amount of data bits to be transmitted depends on TX data bits selection 
 248:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   (the data bit counting starts from LSB of txDataByte).
 249:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 250:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \globalvars
 251:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_txBufferHead - the start index to put data into the 
 252:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software transmit buffer.
 253:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_txBufferTail - start index to get data from the software
 254:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  transmit buffer.
 255:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 256:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 257:Generated_Source\PSoC4/Serial_SPI_UART.c ****     void Serial_SpiUartWriteTxData(uint32 txData)
 258:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 259:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #if (Serial_INTERNAL_TX_SW_BUFFER_CONST)
 260:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 locHead;
 261:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #endif /* (Serial_INTERNAL_TX_SW_BUFFER_CONST) */
 262:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 263:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_TX_SW_BUFFER)
 264:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 265:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Put data directly into the TX FIFO */
 266:Generated_Source\PSoC4/Serial_SPI_UART.c ****             if ((Serial_txBufferHead == Serial_txBufferTail) &&
 267:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 (Serial_SPI_UART_FIFO_SIZE != Serial_GET_TX_FIFO_ENTRIES))
 268:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 269:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* TX software buffer is empty: put data directly in TX FIFO */
 270:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_TX_FIFO_WR_REG = txData;
 271:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 272:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Put data into TX software buffer */
 273:Generated_Source\PSoC4/Serial_SPI_UART.c ****             else
 274:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 275:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Head index to put data */
 276:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 locHead = (Serial_txBufferHead + 1u);
 277:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 278:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Adjust TX software buffer index */
 279:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 if (Serial_TX_BUFFER_SIZE == locHead)
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 10


 280:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
 281:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     locHead = 0u;
 282:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 283:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 284:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Wait for space in TX software buffer */
 285:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 while (locHead == Serial_txBufferTail)
 286:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
 287:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 288:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 289:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* TX software buffer has at least one room */
 290:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 291:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Clear old status of INTR_TX_NOT_FULL. It sets at the end of transfer when TX FIF
 292:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_ClearTxInterruptSource(Serial_INTR_TX_NOT_FULL);
 293:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 294:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_PutWordInTxBuffer(locHead, txData);
 295:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 296:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 Serial_txBufferHead = locHead;
 297:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 298:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 /* Check if TX Not Full is disabled in interrupt */
 299:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 if (0u == (Serial_INTR_TX_MASK_REG & Serial_INTR_TX_NOT_FULL))
 300:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 {
 301:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     /* Enable TX Not Full interrupt source to transmit from software buffer */
 302:Generated_Source\PSoC4/Serial_SPI_UART.c ****                     Serial_INTR_TX_MASK_REG |= (uint32) Serial_INTR_TX_NOT_FULL;
 303:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 }
 304:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 305:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 306:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 307:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 308:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Wait until TX FIFO has space to put data element */
 309:Generated_Source\PSoC4/Serial_SPI_UART.c ****             while (Serial_SPI_UART_FIFO_SIZE == Serial_GET_TX_FIFO_ENTRIES)
 310:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 311:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 312:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 313:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_TX_FIFO_WR_REG = txData;
 314:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 315:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 316:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 317:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 318:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 319:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 320:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartPutArray
 321:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ****************************************************************************//**
 322:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 323:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Places an array of data into the transmit buffer to be sent.
 324:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  This function is blocking and waits until there is a space available to put
 325:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  all the requested data in the transmit buffer. The array size can be greater
 326:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  than transmit buffer size.
 327:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 328:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \param wrBuf: pointer to an array of data to be placed in transmit buffer. 
 329:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  The width of the data to be transmitted depends on TX data width selection 
 330:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  (the data bit counting starts from LSB for each array element).
 331:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \param count: number of data elements to be placed in the transmit buffer.
 332:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 333:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \globalvars
 334:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_txBufferHead - the start index to put data into the 
 335:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software transmit buffer.
 336:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_txBufferTail - start index to get data from the software
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 11


 337:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  transmit buffer.
 338:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 339:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 340:Generated_Source\PSoC4/Serial_SPI_UART.c ****     void Serial_SpiUartPutArray(const uint8 wrBuf[], uint32 count)
 341:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 342:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 i;
 343:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 344:Generated_Source\PSoC4/Serial_SPI_UART.c ****         for (i=0u; i < count; i++)
 345:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 346:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_SpiUartWriteTxData((uint32) wrBuf[i]);
 347:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 348:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 349:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 350:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 351:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 352:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartGetTxBufferSize
 353:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ****************************************************************************//**
 354:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 355:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Returns the number of elements currently in the transmit buffer.
 356:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - TX software buffer is disabled: returns the number of used entries in
 357:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     TX FIFO.
 358:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *   - TX software buffer is enabled: returns the number of elements currently
 359:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     used in the transmit buffer. This number does not include used entries in
 360:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     the TX FIFO. The transmit buffer size is zero until the TX FIFO is
 361:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *     not full.
 362:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 363:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \return
 364:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Number of data elements ready to transmit.
 365:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 366:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \globalvars
 367:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_txBufferHead - the start index to put data into the 
 368:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software transmit buffer.
 369:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_txBufferTail - start index to get data from the software
 370:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  transmit buffer.
 371:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 372:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 373:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 Serial_SpiUartGetTxBufferSize(void)
 374:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 375:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 size;
 376:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #if (Serial_INTERNAL_TX_SW_BUFFER_CONST)
 377:Generated_Source\PSoC4/Serial_SPI_UART.c ****         uint32 locTail;
 378:Generated_Source\PSoC4/Serial_SPI_UART.c ****     #endif /* (Serial_INTERNAL_TX_SW_BUFFER_CONST) */
 379:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 380:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_TX_SW_BUFFER)
 381:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 382:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Get current Tail index */
 383:Generated_Source\PSoC4/Serial_SPI_UART.c ****             locTail = Serial_txBufferTail;
 384:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 385:Generated_Source\PSoC4/Serial_SPI_UART.c ****             if (Serial_txBufferHead >= locTail)
 386:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 387:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 size = (Serial_txBufferHead - locTail);
 388:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 389:Generated_Source\PSoC4/Serial_SPI_UART.c ****             else
 390:Generated_Source\PSoC4/Serial_SPI_UART.c ****             {
 391:Generated_Source\PSoC4/Serial_SPI_UART.c ****                 size = (Serial_txBufferHead + (Serial_TX_BUFFER_SIZE - locTail));
 392:Generated_Source\PSoC4/Serial_SPI_UART.c ****             }
 393:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 12


 394:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 395:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 396:Generated_Source\PSoC4/Serial_SPI_UART.c ****             size = Serial_GET_TX_FIFO_ENTRIES;
 397:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 398:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 399:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 400:Generated_Source\PSoC4/Serial_SPI_UART.c ****         return (size);
 401:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 402:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 403:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 404:Generated_Source\PSoC4/Serial_SPI_UART.c ****     /*******************************************************************************
 405:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * Function Name: Serial_SpiUartClearTxBuffer
 406:Generated_Source\PSoC4/Serial_SPI_UART.c ****     ****************************************************************************//**
 407:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 408:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Clears the transmit buffer and TX FIFO.
 409:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 410:Generated_Source\PSoC4/Serial_SPI_UART.c ****     * \globalvars
 411:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_txBufferHead - the start index to put data into the 
 412:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  software transmit buffer.
 413:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  Serial_txBufferTail - start index to get data from the software
 414:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *  transmit buffer.
 415:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *
 416:Generated_Source\PSoC4/Serial_SPI_UART.c ****     *******************************************************************************/
 417:Generated_Source\PSoC4/Serial_SPI_UART.c ****     void Serial_SpiUartClearTxBuffer(void)
 418:Generated_Source\PSoC4/Serial_SPI_UART.c ****     {
 419:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #if (Serial_CHECK_TX_SW_BUFFER)
 420:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 421:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Lock from component interruption */
 422:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_DisableInt();
 423:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 424:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Flush TX software buffer */
 425:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_txBufferHead = Serial_txBufferTail;
 426:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 427:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_INTR_TX_MASK_REG &= (uint32) ~Serial_INTR_TX_NOT_FULL;
 428:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_CLEAR_TX_FIFO;
 429:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_ClearTxInterruptSource(Serial_INTR_TX_ALL);
 430:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 431:Generated_Source\PSoC4/Serial_SPI_UART.c ****             /* Release lock */
 432:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_EnableInt();
 433:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 434:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #else
 435:Generated_Source\PSoC4/Serial_SPI_UART.c ****         {
 436:Generated_Source\PSoC4/Serial_SPI_UART.c ****             Serial_CLEAR_TX_FIFO;
 437:Generated_Source\PSoC4/Serial_SPI_UART.c ****         }
 438:Generated_Source\PSoC4/Serial_SPI_UART.c ****         #endif
 439:Generated_Source\PSoC4/Serial_SPI_UART.c ****     }
 440:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 441:Generated_Source\PSoC4/Serial_SPI_UART.c **** #endif /* (Serial_TX_DIRECTION) */
 442:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 443:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 444:Generated_Source\PSoC4/Serial_SPI_UART.c **** /*******************************************************************************
 445:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Function Name: Serial_SpiUartDisableIntRx
 446:Generated_Source\PSoC4/Serial_SPI_UART.c **** ****************************************************************************//**
 447:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 448:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  Disables the RX interrupt sources.
 449:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 450:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  \return
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 13


 451:Generated_Source\PSoC4/Serial_SPI_UART.c **** *   Returns the RX interrupt sources enabled before the function call.
 452:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 453:Generated_Source\PSoC4/Serial_SPI_UART.c **** *******************************************************************************/
 454:Generated_Source\PSoC4/Serial_SPI_UART.c **** uint32 Serial_SpiUartDisableIntRx(void)
 455:Generated_Source\PSoC4/Serial_SPI_UART.c **** {
 235              		.loc 1 455 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 8
 238              		@ frame_needed = 1, uses_anonymous_args = 0
 239 0000 80B5     		push	{r7, lr}
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 7, -8
 242              		.cfi_offset 14, -4
 243 0002 82B0     		sub	sp, sp, #8
 244              		.cfi_def_cfa_offset 16
 245 0004 00AF     		add	r7, sp, #0
 246              		.cfi_def_cfa_register 7
 456:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 intSource;
 457:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 458:Generated_Source\PSoC4/Serial_SPI_UART.c ****     intSource = Serial_GetRxInterruptMode();
 247              		.loc 1 458 0
 248 0006 054B     		ldr	r3, .L18
 249 0008 1B68     		ldr	r3, [r3]
 250 000a 7B60     		str	r3, [r7, #4]
 459:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 460:Generated_Source\PSoC4/Serial_SPI_UART.c ****     Serial_SetRxInterruptMode(Serial_NO_INTR_SOURCES);
 251              		.loc 1 460 0
 252 000c 034B     		ldr	r3, .L18
 253 000e 0022     		movs	r2, #0
 254 0010 1A60     		str	r2, [r3]
 461:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 462:Generated_Source\PSoC4/Serial_SPI_UART.c ****     return (intSource);
 255              		.loc 1 462 0
 256 0012 7B68     		ldr	r3, [r7, #4]
 463:Generated_Source\PSoC4/Serial_SPI_UART.c **** }
 257              		.loc 1 463 0
 258 0014 1800     		movs	r0, r3
 259 0016 BD46     		mov	sp, r7
 260 0018 02B0     		add	sp, sp, #8
 261              		@ sp needed
 262 001a 80BD     		pop	{r7, pc}
 263              	.L19:
 264              		.align	2
 265              	.L18:
 266 001c C80F2440 		.word	1076105160
 267              		.cfi_endproc
 268              	.LFE5:
 269              		.size	Serial_SpiUartDisableIntRx, .-Serial_SpiUartDisableIntRx
 270              		.section	.text.Serial_SpiUartDisableIntTx,"ax",%progbits
 271              		.align	2
 272              		.global	Serial_SpiUartDisableIntTx
 273              		.code	16
 274              		.thumb_func
 275              		.type	Serial_SpiUartDisableIntTx, %function
 276              	Serial_SpiUartDisableIntTx:
 277              	.LFB6:
 464:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 14


 465:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 466:Generated_Source\PSoC4/Serial_SPI_UART.c **** /*******************************************************************************
 467:Generated_Source\PSoC4/Serial_SPI_UART.c **** * Function Name: Serial_SpiUartDisableIntTx
 468:Generated_Source\PSoC4/Serial_SPI_UART.c **** ****************************************************************************//**
 469:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 470:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  Disables TX interrupt sources.
 471:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 472:Generated_Source\PSoC4/Serial_SPI_UART.c **** *  \return
 473:Generated_Source\PSoC4/Serial_SPI_UART.c **** *   Returns TX interrupt sources enabled before function call.
 474:Generated_Source\PSoC4/Serial_SPI_UART.c **** *
 475:Generated_Source\PSoC4/Serial_SPI_UART.c **** *******************************************************************************/
 476:Generated_Source\PSoC4/Serial_SPI_UART.c **** uint32 Serial_SpiUartDisableIntTx(void)
 477:Generated_Source\PSoC4/Serial_SPI_UART.c **** {
 278              		.loc 1 477 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 8
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282 0000 80B5     		push	{r7, lr}
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 82B0     		sub	sp, sp, #8
 287              		.cfi_def_cfa_offset 16
 288 0004 00AF     		add	r7, sp, #0
 289              		.cfi_def_cfa_register 7
 478:Generated_Source\PSoC4/Serial_SPI_UART.c ****     uint32 intSourceMask;
 479:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 480:Generated_Source\PSoC4/Serial_SPI_UART.c ****     intSourceMask = Serial_GetTxInterruptMode();
 290              		.loc 1 480 0
 291 0006 054B     		ldr	r3, .L22
 292 0008 1B68     		ldr	r3, [r3]
 293 000a 7B60     		str	r3, [r7, #4]
 481:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 482:Generated_Source\PSoC4/Serial_SPI_UART.c ****     Serial_SetTxInterruptMode(Serial_NO_INTR_SOURCES);
 294              		.loc 1 482 0
 295 000c 034B     		ldr	r3, .L22
 296 000e 0022     		movs	r2, #0
 297 0010 1A60     		str	r2, [r3]
 483:Generated_Source\PSoC4/Serial_SPI_UART.c **** 
 484:Generated_Source\PSoC4/Serial_SPI_UART.c ****     return (intSourceMask);
 298              		.loc 1 484 0
 299 0012 7B68     		ldr	r3, [r7, #4]
 485:Generated_Source\PSoC4/Serial_SPI_UART.c **** }
 300              		.loc 1 485 0
 301 0014 1800     		movs	r0, r3
 302 0016 BD46     		mov	sp, r7
 303 0018 02B0     		add	sp, sp, #8
 304              		@ sp needed
 305 001a 80BD     		pop	{r7, pc}
 306              	.L23:
 307              		.align	2
 308              	.L22:
 309 001c 880F2440 		.word	1076105096
 310              		.cfi_endproc
 311              	.LFE6:
 312              		.size	Serial_SpiUartDisableIntTx, .-Serial_SpiUartDisableIntTx
 313              		.text
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 15


 314              	.Letext0:
 315              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 316              		.section	.debug_info,"",%progbits
 317              	.Ldebug_info0:
 318 0000 E3010000 		.4byte	0x1e3
 319 0004 0400     		.2byte	0x4
 320 0006 00000000 		.4byte	.Ldebug_abbrev0
 321 000a 04       		.byte	0x4
 322 000b 01       		.uleb128 0x1
 323 000c 75000000 		.4byte	.LASF31
 324 0010 0C       		.byte	0xc
 325 0011 21020000 		.4byte	.LASF32
 326 0015 4A010000 		.4byte	.LASF33
 327 0019 00000000 		.4byte	.Ldebug_ranges0+0
 328 001d 00000000 		.4byte	0
 329 0021 00000000 		.4byte	.Ldebug_line0
 330 0025 02       		.uleb128 0x2
 331 0026 01       		.byte	0x1
 332 0027 06       		.byte	0x6
 333 0028 0F030000 		.4byte	.LASF0
 334 002c 02       		.uleb128 0x2
 335 002d 01       		.byte	0x1
 336 002e 08       		.byte	0x8
 337 002f 0A020000 		.4byte	.LASF1
 338 0033 02       		.uleb128 0x2
 339 0034 02       		.byte	0x2
 340 0035 05       		.byte	0x5
 341 0036 C1020000 		.4byte	.LASF2
 342 003a 02       		.uleb128 0x2
 343 003b 02       		.byte	0x2
 344 003c 07       		.byte	0x7
 345 003d 2A000000 		.4byte	.LASF3
 346 0041 02       		.uleb128 0x2
 347 0042 04       		.byte	0x4
 348 0043 05       		.byte	0x5
 349 0044 FA020000 		.4byte	.LASF4
 350 0048 02       		.uleb128 0x2
 351 0049 04       		.byte	0x4
 352 004a 07       		.byte	0x7
 353 004b 5D000000 		.4byte	.LASF5
 354 004f 02       		.uleb128 0x2
 355 0050 08       		.byte	0x8
 356 0051 05       		.byte	0x5
 357 0052 4A020000 		.4byte	.LASF6
 358 0056 02       		.uleb128 0x2
 359 0057 08       		.byte	0x8
 360 0058 07       		.byte	0x7
 361 0059 F3010000 		.4byte	.LASF7
 362 005d 03       		.uleb128 0x3
 363 005e 04       		.byte	0x4
 364 005f 05       		.byte	0x5
 365 0060 696E7400 		.ascii	"int\000"
 366 0064 02       		.uleb128 0x2
 367 0065 04       		.byte	0x4
 368 0066 07       		.byte	0x7
 369 0067 3D000000 		.4byte	.LASF8
 370 006b 04       		.uleb128 0x4
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 16


 371 006c 6F000000 		.4byte	.LASF9
 372 0070 02       		.byte	0x2
 373 0071 D201     		.2byte	0x1d2
 374 0073 2C000000 		.4byte	0x2c
 375 0077 04       		.uleb128 0x4
 376 0078 43010000 		.4byte	.LASF10
 377 007c 02       		.byte	0x2
 378 007d D401     		.2byte	0x1d4
 379 007f 48000000 		.4byte	0x48
 380 0083 02       		.uleb128 0x2
 381 0084 04       		.byte	0x4
 382 0085 04       		.byte	0x4
 383 0086 52000000 		.4byte	.LASF11
 384 008a 02       		.uleb128 0x2
 385 008b 08       		.byte	0x8
 386 008c 04       		.byte	0x4
 387 008d 3C010000 		.4byte	.LASF12
 388 0091 02       		.uleb128 0x2
 389 0092 01       		.byte	0x1
 390 0093 08       		.byte	0x8
 391 0094 70020000 		.4byte	.LASF13
 392 0098 05       		.uleb128 0x5
 393 0099 6B000000 		.4byte	0x6b
 394 009d 04       		.uleb128 0x4
 395 009e 00000000 		.4byte	.LASF14
 396 00a2 02       		.byte	0x2
 397 00a3 7E02     		.2byte	0x27e
 398 00a5 A9000000 		.4byte	0xa9
 399 00a9 05       		.uleb128 0x5
 400 00aa 77000000 		.4byte	0x77
 401 00ae 02       		.uleb128 0x2
 402 00af 08       		.byte	0x8
 403 00b0 04       		.byte	0x4
 404 00b1 03030000 		.4byte	.LASF15
 405 00b5 02       		.uleb128 0x2
 406 00b6 04       		.byte	0x4
 407 00b7 07       		.byte	0x7
 408 00b8 18020000 		.4byte	.LASF16
 409 00bc 06       		.uleb128 0x6
 410 00bd 75020000 		.4byte	.LASF19
 411 00c1 01       		.byte	0x1
 412 00c2 53       		.byte	0x53
 413 00c3 77000000 		.4byte	0x77
 414 00c7 00000000 		.4byte	.LFB2
 415 00cb 50000000 		.4byte	.LFE2-.LFB2
 416 00cf 01       		.uleb128 0x1
 417 00d0 9C       		.byte	0x9c
 418 00d1 F2000000 		.4byte	0xf2
 419 00d5 07       		.uleb128 0x7
 420 00d6 03010000 		.4byte	.LASF17
 421 00da 01       		.byte	0x1
 422 00db 55       		.byte	0x55
 423 00dc 77000000 		.4byte	0x77
 424 00e0 02       		.uleb128 0x2
 425 00e1 91       		.byte	0x91
 426 00e2 74       		.sleb128 -12
 427 00e3 07       		.uleb128 0x7
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 17


 428 00e4 06000000 		.4byte	.LASF18
 429 00e8 01       		.byte	0x1
 430 00e9 58       		.byte	0x58
 431 00ea 77000000 		.4byte	0x77
 432 00ee 02       		.uleb128 0x2
 433 00ef 91       		.byte	0x91
 434 00f0 70       		.sleb128 -16
 435 00f1 00       		.byte	0
 436 00f2 06       		.uleb128 0x6
 437 00f3 1E010000 		.4byte	.LASF20
 438 00f7 01       		.byte	0x1
 439 00f8 9D       		.byte	0x9d
 440 00f9 77000000 		.4byte	0x77
 441 00fd 00000000 		.4byte	.LFB3
 442 0101 40000000 		.4byte	.LFE3-.LFB3
 443 0105 01       		.uleb128 0x1
 444 0106 9C       		.byte	0x9c
 445 0107 28010000 		.4byte	0x128
 446 010b 07       		.uleb128 0x7
 447 010c 58000000 		.4byte	.LASF21
 448 0110 01       		.byte	0x1
 449 0111 9F       		.byte	0x9f
 450 0112 77000000 		.4byte	0x77
 451 0116 02       		.uleb128 0x2
 452 0117 91       		.byte	0x91
 453 0118 74       		.sleb128 -12
 454 0119 07       		.uleb128 0x7
 455 011a 4A000000 		.4byte	.LASF22
 456 011e 01       		.byte	0x1
 457 011f A1       		.byte	0xa1
 458 0120 77000000 		.4byte	0x77
 459 0124 02       		.uleb128 0x2
 460 0125 91       		.byte	0x91
 461 0126 70       		.sleb128 -16
 462 0127 00       		.byte	0
 463 0128 08       		.uleb128 0x8
 464 0129 0E000000 		.4byte	.LASF34
 465 012d 01       		.byte	0x1
 466 012e C8       		.byte	0xc8
 467 012f 00000000 		.4byte	.LFB4
 468 0133 60000000 		.4byte	.LFE4-.LFB4
 469 0137 01       		.uleb128 0x1
 470 0138 9C       		.byte	0x9c
 471 0139 09       		.uleb128 0x9
 472 013a A6020000 		.4byte	.LASF23
 473 013e 01       		.byte	0x1
 474 013f C601     		.2byte	0x1c6
 475 0141 77000000 		.4byte	0x77
 476 0145 00000000 		.4byte	.LFB5
 477 0149 20000000 		.4byte	.LFE5-.LFB5
 478 014d 01       		.uleb128 0x1
 479 014e 9C       		.byte	0x9c
 480 014f 63010000 		.4byte	0x163
 481 0153 0A       		.uleb128 0xa
 482 0154 E9010000 		.4byte	.LASF24
 483 0158 01       		.byte	0x1
 484 0159 C801     		.2byte	0x1c8
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 18


 485 015b 77000000 		.4byte	0x77
 486 015f 02       		.uleb128 0x2
 487 0160 91       		.byte	0x91
 488 0161 74       		.sleb128 -12
 489 0162 00       		.byte	0
 490 0163 09       		.uleb128 0x9
 491 0164 CB020000 		.4byte	.LASF25
 492 0168 01       		.byte	0x1
 493 0169 DC01     		.2byte	0x1dc
 494 016b 77000000 		.4byte	0x77
 495 016f 00000000 		.4byte	.LFB6
 496 0173 20000000 		.4byte	.LFE6-.LFB6
 497 0177 01       		.uleb128 0x1
 498 0178 9C       		.byte	0x9c
 499 0179 8D010000 		.4byte	0x18d
 500 017d 0A       		.uleb128 0xa
 501 017e DB010000 		.4byte	.LASF26
 502 0182 01       		.byte	0x1
 503 0183 DE01     		.2byte	0x1de
 504 0185 77000000 		.4byte	0x77
 505 0189 02       		.uleb128 0x2
 506 018a 91       		.byte	0x91
 507 018b 74       		.sleb128 -12
 508 018c 00       		.byte	0
 509 018d 0B       		.uleb128 0xb
 510 018e 0A010000 		.4byte	.LASF27
 511 0192 01       		.byte	0x1
 512 0193 1C       		.byte	0x1c
 513 0194 A9000000 		.4byte	0xa9
 514 0198 05       		.uleb128 0x5
 515 0199 03       		.byte	0x3
 516 019a 00000000 		.4byte	Serial_rxBufferHead
 517 019e 0B       		.uleb128 0xb
 518 019f E6020000 		.4byte	.LASF28
 519 01a3 01       		.byte	0x1
 520 01a4 1E       		.byte	0x1e
 521 01a5 A9000000 		.4byte	0xa9
 522 01a9 05       		.uleb128 0x5
 523 01aa 03       		.byte	0x3
 524 01ab 00000000 		.4byte	Serial_rxBufferTail
 525 01af 0B       		.uleb128 0xb
 526 01b0 8E020000 		.4byte	.LASF29
 527 01b4 01       		.byte	0x1
 528 01b5 26       		.byte	0x26
 529 01b6 98000000 		.4byte	0x98
 530 01ba 05       		.uleb128 0x5
 531 01bb 03       		.byte	0x3
 532 01bc 00000000 		.4byte	Serial_rxBufferOverflow
 533 01c0 0C       		.uleb128 0xc
 534 01c1 98000000 		.4byte	0x98
 535 01c5 D0010000 		.4byte	0x1d0
 536 01c9 0D       		.uleb128 0xd
 537 01ca B5000000 		.4byte	0xb5
 538 01ce 23       		.byte	0x23
 539 01cf 00       		.byte	0
 540 01d0 0B       		.uleb128 0xb
 541 01d1 58020000 		.4byte	.LASF30
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 19


 542 01d5 01       		.byte	0x1
 543 01d6 33       		.byte	0x33
 544 01d7 E1010000 		.4byte	0x1e1
 545 01db 05       		.uleb128 0x5
 546 01dc 03       		.byte	0x3
 547 01dd 00000000 		.4byte	Serial_rxBufferInternal
 548 01e1 05       		.uleb128 0x5
 549 01e2 C0010000 		.4byte	0x1c0
 550 01e6 00       		.byte	0
 551              		.section	.debug_abbrev,"",%progbits
 552              	.Ldebug_abbrev0:
 553 0000 01       		.uleb128 0x1
 554 0001 11       		.uleb128 0x11
 555 0002 01       		.byte	0x1
 556 0003 25       		.uleb128 0x25
 557 0004 0E       		.uleb128 0xe
 558 0005 13       		.uleb128 0x13
 559 0006 0B       		.uleb128 0xb
 560 0007 03       		.uleb128 0x3
 561 0008 0E       		.uleb128 0xe
 562 0009 1B       		.uleb128 0x1b
 563 000a 0E       		.uleb128 0xe
 564 000b 55       		.uleb128 0x55
 565 000c 17       		.uleb128 0x17
 566 000d 11       		.uleb128 0x11
 567 000e 01       		.uleb128 0x1
 568 000f 10       		.uleb128 0x10
 569 0010 17       		.uleb128 0x17
 570 0011 00       		.byte	0
 571 0012 00       		.byte	0
 572 0013 02       		.uleb128 0x2
 573 0014 24       		.uleb128 0x24
 574 0015 00       		.byte	0
 575 0016 0B       		.uleb128 0xb
 576 0017 0B       		.uleb128 0xb
 577 0018 3E       		.uleb128 0x3e
 578 0019 0B       		.uleb128 0xb
 579 001a 03       		.uleb128 0x3
 580 001b 0E       		.uleb128 0xe
 581 001c 00       		.byte	0
 582 001d 00       		.byte	0
 583 001e 03       		.uleb128 0x3
 584 001f 24       		.uleb128 0x24
 585 0020 00       		.byte	0
 586 0021 0B       		.uleb128 0xb
 587 0022 0B       		.uleb128 0xb
 588 0023 3E       		.uleb128 0x3e
 589 0024 0B       		.uleb128 0xb
 590 0025 03       		.uleb128 0x3
 591 0026 08       		.uleb128 0x8
 592 0027 00       		.byte	0
 593 0028 00       		.byte	0
 594 0029 04       		.uleb128 0x4
 595 002a 16       		.uleb128 0x16
 596 002b 00       		.byte	0
 597 002c 03       		.uleb128 0x3
 598 002d 0E       		.uleb128 0xe
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 20


 599 002e 3A       		.uleb128 0x3a
 600 002f 0B       		.uleb128 0xb
 601 0030 3B       		.uleb128 0x3b
 602 0031 05       		.uleb128 0x5
 603 0032 49       		.uleb128 0x49
 604 0033 13       		.uleb128 0x13
 605 0034 00       		.byte	0
 606 0035 00       		.byte	0
 607 0036 05       		.uleb128 0x5
 608 0037 35       		.uleb128 0x35
 609 0038 00       		.byte	0
 610 0039 49       		.uleb128 0x49
 611 003a 13       		.uleb128 0x13
 612 003b 00       		.byte	0
 613 003c 00       		.byte	0
 614 003d 06       		.uleb128 0x6
 615 003e 2E       		.uleb128 0x2e
 616 003f 01       		.byte	0x1
 617 0040 3F       		.uleb128 0x3f
 618 0041 19       		.uleb128 0x19
 619 0042 03       		.uleb128 0x3
 620 0043 0E       		.uleb128 0xe
 621 0044 3A       		.uleb128 0x3a
 622 0045 0B       		.uleb128 0xb
 623 0046 3B       		.uleb128 0x3b
 624 0047 0B       		.uleb128 0xb
 625 0048 27       		.uleb128 0x27
 626 0049 19       		.uleb128 0x19
 627 004a 49       		.uleb128 0x49
 628 004b 13       		.uleb128 0x13
 629 004c 11       		.uleb128 0x11
 630 004d 01       		.uleb128 0x1
 631 004e 12       		.uleb128 0x12
 632 004f 06       		.uleb128 0x6
 633 0050 40       		.uleb128 0x40
 634 0051 18       		.uleb128 0x18
 635 0052 9742     		.uleb128 0x2117
 636 0054 19       		.uleb128 0x19
 637 0055 01       		.uleb128 0x1
 638 0056 13       		.uleb128 0x13
 639 0057 00       		.byte	0
 640 0058 00       		.byte	0
 641 0059 07       		.uleb128 0x7
 642 005a 34       		.uleb128 0x34
 643 005b 00       		.byte	0
 644 005c 03       		.uleb128 0x3
 645 005d 0E       		.uleb128 0xe
 646 005e 3A       		.uleb128 0x3a
 647 005f 0B       		.uleb128 0xb
 648 0060 3B       		.uleb128 0x3b
 649 0061 0B       		.uleb128 0xb
 650 0062 49       		.uleb128 0x49
 651 0063 13       		.uleb128 0x13
 652 0064 02       		.uleb128 0x2
 653 0065 18       		.uleb128 0x18
 654 0066 00       		.byte	0
 655 0067 00       		.byte	0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 21


 656 0068 08       		.uleb128 0x8
 657 0069 2E       		.uleb128 0x2e
 658 006a 00       		.byte	0
 659 006b 3F       		.uleb128 0x3f
 660 006c 19       		.uleb128 0x19
 661 006d 03       		.uleb128 0x3
 662 006e 0E       		.uleb128 0xe
 663 006f 3A       		.uleb128 0x3a
 664 0070 0B       		.uleb128 0xb
 665 0071 3B       		.uleb128 0x3b
 666 0072 0B       		.uleb128 0xb
 667 0073 27       		.uleb128 0x27
 668 0074 19       		.uleb128 0x19
 669 0075 11       		.uleb128 0x11
 670 0076 01       		.uleb128 0x1
 671 0077 12       		.uleb128 0x12
 672 0078 06       		.uleb128 0x6
 673 0079 40       		.uleb128 0x40
 674 007a 18       		.uleb128 0x18
 675 007b 9642     		.uleb128 0x2116
 676 007d 19       		.uleb128 0x19
 677 007e 00       		.byte	0
 678 007f 00       		.byte	0
 679 0080 09       		.uleb128 0x9
 680 0081 2E       		.uleb128 0x2e
 681 0082 01       		.byte	0x1
 682 0083 3F       		.uleb128 0x3f
 683 0084 19       		.uleb128 0x19
 684 0085 03       		.uleb128 0x3
 685 0086 0E       		.uleb128 0xe
 686 0087 3A       		.uleb128 0x3a
 687 0088 0B       		.uleb128 0xb
 688 0089 3B       		.uleb128 0x3b
 689 008a 05       		.uleb128 0x5
 690 008b 27       		.uleb128 0x27
 691 008c 19       		.uleb128 0x19
 692 008d 49       		.uleb128 0x49
 693 008e 13       		.uleb128 0x13
 694 008f 11       		.uleb128 0x11
 695 0090 01       		.uleb128 0x1
 696 0091 12       		.uleb128 0x12
 697 0092 06       		.uleb128 0x6
 698 0093 40       		.uleb128 0x40
 699 0094 18       		.uleb128 0x18
 700 0095 9742     		.uleb128 0x2117
 701 0097 19       		.uleb128 0x19
 702 0098 01       		.uleb128 0x1
 703 0099 13       		.uleb128 0x13
 704 009a 00       		.byte	0
 705 009b 00       		.byte	0
 706 009c 0A       		.uleb128 0xa
 707 009d 34       		.uleb128 0x34
 708 009e 00       		.byte	0
 709 009f 03       		.uleb128 0x3
 710 00a0 0E       		.uleb128 0xe
 711 00a1 3A       		.uleb128 0x3a
 712 00a2 0B       		.uleb128 0xb
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 22


 713 00a3 3B       		.uleb128 0x3b
 714 00a4 05       		.uleb128 0x5
 715 00a5 49       		.uleb128 0x49
 716 00a6 13       		.uleb128 0x13
 717 00a7 02       		.uleb128 0x2
 718 00a8 18       		.uleb128 0x18
 719 00a9 00       		.byte	0
 720 00aa 00       		.byte	0
 721 00ab 0B       		.uleb128 0xb
 722 00ac 34       		.uleb128 0x34
 723 00ad 00       		.byte	0
 724 00ae 03       		.uleb128 0x3
 725 00af 0E       		.uleb128 0xe
 726 00b0 3A       		.uleb128 0x3a
 727 00b1 0B       		.uleb128 0xb
 728 00b2 3B       		.uleb128 0x3b
 729 00b3 0B       		.uleb128 0xb
 730 00b4 49       		.uleb128 0x49
 731 00b5 13       		.uleb128 0x13
 732 00b6 3F       		.uleb128 0x3f
 733 00b7 19       		.uleb128 0x19
 734 00b8 02       		.uleb128 0x2
 735 00b9 18       		.uleb128 0x18
 736 00ba 00       		.byte	0
 737 00bb 00       		.byte	0
 738 00bc 0C       		.uleb128 0xc
 739 00bd 01       		.uleb128 0x1
 740 00be 01       		.byte	0x1
 741 00bf 49       		.uleb128 0x49
 742 00c0 13       		.uleb128 0x13
 743 00c1 01       		.uleb128 0x1
 744 00c2 13       		.uleb128 0x13
 745 00c3 00       		.byte	0
 746 00c4 00       		.byte	0
 747 00c5 0D       		.uleb128 0xd
 748 00c6 21       		.uleb128 0x21
 749 00c7 00       		.byte	0
 750 00c8 49       		.uleb128 0x49
 751 00c9 13       		.uleb128 0x13
 752 00ca 2F       		.uleb128 0x2f
 753 00cb 0B       		.uleb128 0xb
 754 00cc 00       		.byte	0
 755 00cd 00       		.byte	0
 756 00ce 00       		.byte	0
 757              		.section	.debug_aranges,"",%progbits
 758 0000 3C000000 		.4byte	0x3c
 759 0004 0200     		.2byte	0x2
 760 0006 00000000 		.4byte	.Ldebug_info0
 761 000a 04       		.byte	0x4
 762 000b 00       		.byte	0
 763 000c 0000     		.2byte	0
 764 000e 0000     		.2byte	0
 765 0010 00000000 		.4byte	.LFB2
 766 0014 50000000 		.4byte	.LFE2-.LFB2
 767 0018 00000000 		.4byte	.LFB3
 768 001c 40000000 		.4byte	.LFE3-.LFB3
 769 0020 00000000 		.4byte	.LFB4
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 23


 770 0024 60000000 		.4byte	.LFE4-.LFB4
 771 0028 00000000 		.4byte	.LFB5
 772 002c 20000000 		.4byte	.LFE5-.LFB5
 773 0030 00000000 		.4byte	.LFB6
 774 0034 20000000 		.4byte	.LFE6-.LFB6
 775 0038 00000000 		.4byte	0
 776 003c 00000000 		.4byte	0
 777              		.section	.debug_ranges,"",%progbits
 778              	.Ldebug_ranges0:
 779 0000 00000000 		.4byte	.LFB2
 780 0004 50000000 		.4byte	.LFE2
 781 0008 00000000 		.4byte	.LFB3
 782 000c 40000000 		.4byte	.LFE3
 783 0010 00000000 		.4byte	.LFB4
 784 0014 60000000 		.4byte	.LFE4
 785 0018 00000000 		.4byte	.LFB5
 786 001c 20000000 		.4byte	.LFE5
 787 0020 00000000 		.4byte	.LFB6
 788 0024 20000000 		.4byte	.LFE6
 789 0028 00000000 		.4byte	0
 790 002c 00000000 		.4byte	0
 791              		.section	.debug_line,"",%progbits
 792              	.Ldebug_line0:
 793 0000 C5000000 		.section	.debug_str,"MS",%progbits,1
 793      02004C00 
 793      00000201 
 793      FB0E0D00 
 793      01010101 
 794              	.LASF14:
 795 0000 72656733 		.ascii	"reg32\000"
 795      3200
 796              	.LASF18:
 797 0006 6C6F6354 		.ascii	"locTail\000"
 797      61696C00 
 798              	.LASF34:
 799 000e 53657269 		.ascii	"Serial_SpiUartClearRxBuffer\000"
 799      616C5F53 
 799      70695561 
 799      7274436C 
 799      65617252 
 800              	.LASF3:
 801 002a 73686F72 		.ascii	"short unsigned int\000"
 801      7420756E 
 801      7369676E 
 801      65642069 
 801      6E7400
 802              	.LASF8:
 803 003d 756E7369 		.ascii	"unsigned int\000"
 803      676E6564 
 803      20696E74 
 803      00
 804              	.LASF22:
 805 004a 6C6F6348 		.ascii	"locHead\000"
 805      65616400 
 806              	.LASF11:
 807 0052 666C6F61 		.ascii	"float\000"
 807      7400
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 24


 808              	.LASF21:
 809 0058 73697A65 		.ascii	"size\000"
 809      00
 810              	.LASF5:
 811 005d 6C6F6E67 		.ascii	"long unsigned int\000"
 811      20756E73 
 811      69676E65 
 811      6420696E 
 811      7400
 812              	.LASF9:
 813 006f 75696E74 		.ascii	"uint8\000"
 813      3800
 814              	.LASF31:
 815 0075 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 815      43313120 
 815      352E342E 
 815      31203230 
 815      31363036 
 816 00a8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 816      20726576 
 816      6973696F 
 816      6E203233 
 816      37373135 
 817 00db 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 817      66756E63 
 817      74696F6E 
 817      2D736563 
 817      74696F6E 
 818              	.LASF17:
 819 0103 72784461 		.ascii	"rxData\000"
 819      746100
 820              	.LASF27:
 821 010a 53657269 		.ascii	"Serial_rxBufferHead\000"
 821      616C5F72 
 821      78427566 
 821      66657248 
 821      65616400 
 822              	.LASF20:
 823 011e 53657269 		.ascii	"Serial_SpiUartGetRxBufferSize\000"
 823      616C5F53 
 823      70695561 
 823      72744765 
 823      74527842 
 824              	.LASF12:
 825 013c 646F7562 		.ascii	"double\000"
 825      6C6500
 826              	.LASF10:
 827 0143 75696E74 		.ascii	"uint32\000"
 827      333200
 828              	.LASF33:
 829 014a 433A5C55 		.ascii	"C:\\Users\\TTSS\\Documents\\Repositories\\hackAIR-P"
 829      73657273 
 829      5C545453 
 829      535C446F 
 829      63756D65 
 830 0178 536F435C 		.ascii	"SoC\\SEN0177 - Laser Dust Sensor\\PSoC Firmware\\PS"
 830      53454E30 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 25


 830      31373720 
 830      2D204C61 
 830      73657220 
 831 01a8 6F432043 		.ascii	"oC Creator Project\\SerialLaserSensor_SEN0177.cydsn"
 831      72656174 
 831      6F722050 
 831      726F6A65 
 831      63745C53 
 832 01da 00       		.ascii	"\000"
 833              	.LASF26:
 834 01db 696E7453 		.ascii	"intSourceMask\000"
 834      6F757263 
 834      654D6173 
 834      6B00
 835              	.LASF24:
 836 01e9 696E7453 		.ascii	"intSource\000"
 836      6F757263 
 836      6500
 837              	.LASF7:
 838 01f3 6C6F6E67 		.ascii	"long long unsigned int\000"
 838      206C6F6E 
 838      6720756E 
 838      7369676E 
 838      65642069 
 839              	.LASF1:
 840 020a 756E7369 		.ascii	"unsigned char\000"
 840      676E6564 
 840      20636861 
 840      7200
 841              	.LASF16:
 842 0218 73697A65 		.ascii	"sizetype\000"
 842      74797065 
 842      00
 843              	.LASF32:
 844 0221 47656E65 		.ascii	"Generated_Source\\PSoC4\\Serial_SPI_UART.c\000"
 844      72617465 
 844      645F536F 
 844      75726365 
 844      5C50536F 
 845              	.LASF6:
 846 024a 6C6F6E67 		.ascii	"long long int\000"
 846      206C6F6E 
 846      6720696E 
 846      7400
 847              	.LASF30:
 848 0258 53657269 		.ascii	"Serial_rxBufferInternal\000"
 848      616C5F72 
 848      78427566 
 848      66657249 
 848      6E746572 
 849              	.LASF13:
 850 0270 63686172 		.ascii	"char\000"
 850      00
 851              	.LASF19:
 852 0275 53657269 		.ascii	"Serial_SpiUartReadRxData\000"
 852      616C5F53 
 852      70695561 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccFnBkQJ.s 			page 26


 852      72745265 
 852      61645278 
 853              	.LASF29:
 854 028e 53657269 		.ascii	"Serial_rxBufferOverflow\000"
 854      616C5F72 
 854      78427566 
 854      6665724F 
 854      76657266 
 855              	.LASF23:
 856 02a6 53657269 		.ascii	"Serial_SpiUartDisableIntRx\000"
 856      616C5F53 
 856      70695561 
 856      72744469 
 856      7361626C 
 857              	.LASF2:
 858 02c1 73686F72 		.ascii	"short int\000"
 858      7420696E 
 858      7400
 859              	.LASF25:
 860 02cb 53657269 		.ascii	"Serial_SpiUartDisableIntTx\000"
 860      616C5F53 
 860      70695561 
 860      72744469 
 860      7361626C 
 861              	.LASF28:
 862 02e6 53657269 		.ascii	"Serial_rxBufferTail\000"
 862      616C5F72 
 862      78427566 
 862      66657254 
 862      61696C00 
 863              	.LASF4:
 864 02fa 6C6F6E67 		.ascii	"long int\000"
 864      20696E74 
 864      00
 865              	.LASF15:
 866 0303 6C6F6E67 		.ascii	"long double\000"
 866      20646F75 
 866      626C6500 
 867              	.LASF0:
 868 030f 7369676E 		.ascii	"signed char\000"
 868      65642063 
 868      68617200 
 869              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
