ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.10
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 2


  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 4


  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****         };
 136:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 137:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 5


 138:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 140 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 141:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 141 0
  97 000e 534B     		ldr	r3, .L16
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 142:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:Generated_Source\PSoC4/ADC.c **** 
 144:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 145 0
 102 0018 514B     		ldr	r3, .L16+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 146:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 147:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 148:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 148 0
 106 001e 514B     		ldr	r3, .L16+8
 107 0020 1B68     		ldr	r3, [r3]
 146:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 146 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 146:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 146 0 is_stmt 0 discriminator 1
 112 0026 5049     		ldr	r1, .L16+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 146:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 146 0 discriminator 2
 116 002a 5049     		ldr	r1, .L16+16
 117              	.L7:
 146:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 146 0 discriminator 4
 119 002c 504B     		ldr	r3, .L16+20
 120 002e 504A     		ldr	r2, .L16+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 149:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 150:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 150 0 is_stmt 1 discriminator 4
 125 0036 4F4B     		ldr	r3, .L16+24
 126 0038 4F4A     		ldr	r2, .L16+28
 127 003a 1A60     		str	r2, [r3]
 151:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 151 0 discriminator 4
 129 003c 4F4B     		ldr	r3, .L16+32
 130 003e 504A     		ldr	r2, .L16+36
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 6


 131 0040 1A60     		str	r2, [r3]
 152:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 132              		.loc 1 152 0 discriminator 4
 133 0042 504B     		ldr	r3, .L16+40
 134 0044 0022     		mov	r2, #0
 135 0046 1A60     		str	r2, [r3]
 153:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 136              		.loc 1 153 0 discriminator 4
 137 0048 4F4B     		ldr	r3, .L16+44
 138 004a 504A     		ldr	r2, .L16+48
 139 004c 1A60     		str	r2, [r3]
 154:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 140              		.loc 1 154 0 discriminator 4
 141 004e 504B     		ldr	r3, .L16+52
 142 0050 4E4A     		ldr	r2, .L16+48
 143 0052 1A60     		str	r2, [r3]
 155:Generated_Source\PSoC4/ADC.c ****     
 156:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 157:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 158:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 144              		.loc 1 158 0 discriminator 4
 145 0054 4F4B     		ldr	r3, .L16+56
 146 0056 4F4A     		ldr	r2, .L16+56
 147 0058 1268     		ldr	r2, [r2]
 148 005a 8021     		mov	r1, #128
 149 005c 4902     		lsl	r1, r1, #9
 150 005e 0A43     		orr	r2, r1
 151 0060 1A60     		str	r2, [r3]
 159:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 160:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 161:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 162:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 163:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 164:Generated_Source\PSoC4/ADC.c **** 
 165:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 152              		.loc 1 165 0 discriminator 4
 153 0062 4D4B     		ldr	r3, .L16+60
 154 0064 0022     		mov	r2, #0
 155 0066 1A60     		str	r2, [r3]
 166:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 156              		.loc 1 166 0 discriminator 4
 157 0068 4C4B     		ldr	r3, .L16+64
 158 006a 0022     		mov	r2, #0
 159 006c 1A60     		str	r2, [r3]
 167:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 160              		.loc 1 167 0 discriminator 4
 161 006e 4C4B     		ldr	r3, .L16+68
 162 0070 0122     		mov	r2, #1
 163 0072 1A60     		str	r2, [r3]
 168:Generated_Source\PSoC4/ADC.c **** 
 169:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 170:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 171:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 172:Generated_Source\PSoC4/ADC.c **** 
 173:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 174:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 164              		.loc 1 174 0 discriminator 4
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 7


 165 0074 4B4B     		ldr	r3, .L16+72
 166 0076 1B68     		ldr	r3, [r3]
 167 0078 7B60     		str	r3, [r7, #4]
 175:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 168              		.loc 1 175 0 discriminator 4
 169 007a 7B68     		ldr	r3, [r7, #4]
 170 007c 4A4A     		ldr	r2, .L16+76
 171 007e 1340     		and	r3, r2
 172 0080 7B60     		str	r3, [r7, #4]
 176:Generated_Source\PSoC4/ADC.c ****     
 177:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 178:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 179:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 180:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 181:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 182:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 183:Generated_Source\PSoC4/ADC.c ****     #else
 184:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 185:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 186:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 187:Generated_Source\PSoC4/ADC.c ****         #else
 188:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 173              		.loc 1 188 0 discriminator 4
 174 0082 7B68     		ldr	r3, [r7, #4]
 175 0084 8022     		mov	r2, #128
 176 0086 9205     		lsl	r2, r2, #22
 177 0088 1343     		orr	r3, r2
 178 008a 7B60     		str	r3, [r7, #4]
 189:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 179              		.loc 1 189 0 discriminator 4
 180 008c 7B68     		ldr	r3, [r7, #4]
 181 008e 0122     		mov	r2, #1
 182 0090 9343     		bic	r3, r2
 183 0092 7B60     		str	r3, [r7, #4]
 190:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 191:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 192:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 193:Generated_Source\PSoC4/ADC.c ****     
 194:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 184              		.loc 1 194 0 discriminator 4
 185 0094 434B     		ldr	r3, .L16+72
 186 0096 7A68     		ldr	r2, [r7, #4]
 187 0098 1A60     		str	r2, [r3]
 195:Generated_Source\PSoC4/ADC.c **** 
 196:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 197:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 198:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 199:Generated_Source\PSoC4/ADC.c **** 
 200:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 188              		.loc 1 200 0 discriminator 4
 189 009a 0023     		mov	r3, #0
 190 009c FB60     		str	r3, [r7, #12]
 191 009e 57E0     		b	.L8
 192              	.L15:
 201:Generated_Source\PSoC4/ADC.c ****     {
 202:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 193              		.loc 1 202 0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 8


 194 00a0 0022     		mov	r2, #0
 195 00a2 DC23     		mov	r3, #220
 196 00a4 9B01     		lsl	r3, r3, #6
 197 00a6 1340     		and	r3, r2
 198 00a8 7B60     		str	r3, [r7, #4]
 203:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 204:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 205:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 206:Generated_Source\PSoC4/ADC.c ****         
 207:Generated_Source\PSoC4/ADC.c ****         
 208:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 209:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 210:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 211:Generated_Source\PSoC4/ADC.c ****         */
 212:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 213:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 214:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 215:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 216:Generated_Source\PSoC4/ADC.c **** 
 217:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 218:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 219:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 220:Generated_Source\PSoC4/ADC.c ****         {
 221:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 199              		.loc 1 221 0
 200 00aa FB68     		ldr	r3, [r7, #12]
 201 00ac 9B00     		lsl	r3, r3, #2
 202 00ae 3F4A     		ldr	r2, .L16+80
 203 00b0 9446     		mov	ip, r2
 204 00b2 6344     		add	r3, r3, ip
 205 00b4 7A68     		ldr	r2, [r7, #4]
 206 00b6 1A60     		str	r2, [r3]
 222:Generated_Source\PSoC4/ADC.c **** 
 223:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 207              		.loc 1 223 0
 208 00b8 0022     		mov	r2, #0
 209 00ba 0123     		mov	r3, #1
 210 00bc 1340     		and	r3, r2
 211 00be 09D0     		beq	.L9
 224:Generated_Source\PSoC4/ADC.c ****             {
 225:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 212              		.loc 1 225 0
 213 00c0 354B     		ldr	r3, .L16+60
 214 00c2 354A     		ldr	r2, .L16+60
 215 00c4 1268     		ldr	r2, [r2]
 216 00c6 F968     		ldr	r1, [r7, #12]
 217 00c8 0120     		mov	r0, #1
 218 00ca 8840     		lsl	r0, r0, r1
 219 00cc 011C     		mov	r1, r0
 220 00ce 89B2     		uxth	r1, r1
 221 00d0 0A43     		orr	r2, r1
 222 00d2 1A60     		str	r2, [r3]
 223              	.L9:
 226:Generated_Source\PSoC4/ADC.c ****             }
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 224              		.loc 1 228 0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 9


 225 00d4 0022     		mov	r2, #0
 226 00d6 0223     		mov	r3, #2
 227 00d8 1340     		and	r3, r2
 228 00da 09D0     		beq	.L10
 229:Generated_Source\PSoC4/ADC.c ****             {
 230:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 229              		.loc 1 230 0
 230 00dc 2F4B     		ldr	r3, .L16+64
 231 00de 2F4A     		ldr	r2, .L16+64
 232 00e0 1268     		ldr	r2, [r2]
 233 00e2 F968     		ldr	r1, [r7, #12]
 234 00e4 0120     		mov	r0, #1
 235 00e6 8840     		lsl	r0, r0, r1
 236 00e8 011C     		mov	r1, r0
 237 00ea 89B2     		uxth	r1, r1
 238 00ec 0A43     		orr	r2, r1
 239 00ee 1A60     		str	r2, [r3]
 240              	.L10:
 231:Generated_Source\PSoC4/ADC.c ****             }
 232:Generated_Source\PSoC4/ADC.c ****         }
 233:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 234:Generated_Source\PSoC4/ADC.c ****             else
 235:Generated_Source\PSoC4/ADC.c ****             {
 236:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 237:Generated_Source\PSoC4/ADC.c **** 
 238:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 239:Generated_Source\PSoC4/ADC.c ****                 {
 240:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 241:Generated_Source\PSoC4/ADC.c ****                 }
 242:Generated_Source\PSoC4/ADC.c **** 
 243:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 244:Generated_Source\PSoC4/ADC.c ****                 {
 245:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 246:Generated_Source\PSoC4/ADC.c ****                 }
 247:Generated_Source\PSoC4/ADC.c ****             }
 248:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 249:Generated_Source\PSoC4/ADC.c **** 
 250:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 241              		.loc 1 250 0
 242 00f0 0022     		mov	r2, #0
 243 00f2 8023     		mov	r3, #128
 244 00f4 9B00     		lsl	r3, r3, #2
 245 00f6 1340     		and	r3, r2
 246 00f8 03D0     		beq	.L11
 251:Generated_Source\PSoC4/ADC.c ****         {
 252:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 247              		.loc 1 252 0
 248 00fa 8023     		mov	r3, #128
 249 00fc 5B00     		lsl	r3, r3, #1
 250 00fe BB60     		str	r3, [r7, #8]
 251 0100 02E0     		b	.L12
 252              	.L11:
 253:Generated_Source\PSoC4/ADC.c ****         }
 254:Generated_Source\PSoC4/ADC.c ****         else
 255:Generated_Source\PSoC4/ADC.c ****         {
 256:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 253              		.loc 1 256 0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 10


 254 0102 8023     		mov	r3, #128
 255 0104 5B01     		lsl	r3, r3, #5
 256 0106 BB60     		str	r3, [r7, #8]
 257              	.L12:
 257:Generated_Source\PSoC4/ADC.c ****         }
 258:Generated_Source\PSoC4/ADC.c **** 
 259:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 258              		.loc 1 259 0
 259 0108 0022     		mov	r2, #0
 260 010a 8023     		mov	r3, #128
 261 010c 5B00     		lsl	r3, r3, #1
 262 010e 1340     		and	r3, r2
 263 0110 05D1     		bne	.L13
 260:Generated_Source\PSoC4/ADC.c ****         {
 261:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 262:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 263:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 264:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 265:Generated_Source\PSoC4/ADC.c ****             #else
 266:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 264              		.loc 1 266 0
 265 0112 274B     		ldr	r3, .L16+84
 266 0114 FA68     		ldr	r2, [r7, #12]
 267 0116 5200     		lsl	r2, r2, #1
 268 0118 0021     		mov	r1, #0
 269 011a D152     		strh	r1, [r2, r3]
 270 011c 04E0     		b	.L14
 271              	.L13:
 267:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 268:Generated_Source\PSoC4/ADC.c ****         }
 269:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 270:Generated_Source\PSoC4/ADC.c ****         {
 271:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 272:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 273:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 274:Generated_Source\PSoC4/ADC.c ****             #else
 275:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 272              		.loc 1 275 0
 273 011e 244B     		ldr	r3, .L16+84
 274 0120 FA68     		ldr	r2, [r7, #12]
 275 0122 5200     		lsl	r2, r2, #1
 276 0124 0021     		mov	r1, #0
 277 0126 D152     		strh	r1, [r2, r3]
 278              	.L14:
 276:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 277:Generated_Source\PSoC4/ADC.c ****         }
 278:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 279:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 279              		.loc 1 279 0 discriminator 2
 280 0128 BB68     		ldr	r3, [r7, #8]
 281 012a 224A     		ldr	r2, .L16+88
 282 012c 5343     		mul	r3, r2
 283 012e 224A     		ldr	r2, .L16+92
 284 0130 9446     		mov	ip, r2
 285 0132 6344     		add	r3, r3, ip
 280:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 286              		.loc 1 280 0 discriminator 2
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 11


 287 0134 181C     		mov	r0, r3
 288 0136 1F49     		ldr	r1, .L16+88
 289 0138 FFF7FEFF 		bl	__aeabi_idiv
 290 013c 031C     		mov	r3, r0
 279:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 291              		.loc 1 279 0 discriminator 2
 292 013e 9BB2     		uxth	r3, r3
 293 0140 19B2     		sxth	r1, r3
 294 0142 1E4B     		ldr	r3, .L16+96
 295 0144 FA68     		ldr	r2, [r7, #12]
 296 0146 9200     		lsl	r2, r2, #2
 297 0148 D150     		str	r1, [r2, r3]
 200:Generated_Source\PSoC4/ADC.c ****     {
 298              		.loc 1 200 0 discriminator 2
 299 014a FB68     		ldr	r3, [r7, #12]
 300 014c 0133     		add	r3, r3, #1
 301 014e FB60     		str	r3, [r7, #12]
 302              	.L8:
 200:Generated_Source\PSoC4/ADC.c ****     {
 303              		.loc 1 200 0 is_stmt 0 discriminator 1
 304 0150 FB68     		ldr	r3, [r7, #12]
 305 0152 002B     		cmp	r3, #0
 306 0154 A4D0     		beq	.L15
 281:Generated_Source\PSoC4/ADC.c ****     }
 282:Generated_Source\PSoC4/ADC.c **** }
 307              		.loc 1 282 0 is_stmt 1
 308 0156 BD46     		mov	sp, r7
 309 0158 04B0     		add	sp, sp, #16
 310              		@ sp needed
 311 015a 80BD     		pop	{r7, pc}
 312              	.L17:
 313              		.align	2
 314              	.L16:
 315 015c 00000000 		.word	ADC_ISR
 316 0160 20003A40 		.word	1077542944
 317 0164 80033A40 		.word	1077543808
 318 0168 70021053 		.word	1393558128
 319 016c 70020053 		.word	1392509552
 320 0170 00003A40 		.word	1077542912
 321 0174 04003A40 		.word	1077542916
 322 0178 BC000080 		.word	-2147483460
 323 017c 18003A40 		.word	1077542936
 324 0180 0000FF07 		.word	134152192
 325 0184 1C003A40 		.word	1077542940
 326 0188 10003A40 		.word	1077542928
 327 018c 02000200 		.word	131074
 328 0190 14003A40 		.word	1077542932
 329 0194 00033A40 		.word	1077543680
 330 0198 28023A40 		.word	1077543464
 331 019c 38023A40 		.word	1077543480
 332 01a0 18023A40 		.word	1077543448
 333 01a4 30003A40 		.word	1077542960
 334 01a8 FFFFFFDF 		.word	-536870913
 335 01ac 80003A40 		.word	1077543040
 336 01b0 00000000 		.word	ADC_offset
 337 01b4 10270000 		.word	10000
 338 01b8 88130000 		.word	5000
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 12


 339 01bc 00000000 		.word	ADC_countsPer10Volt
 340              		.cfi_endproc
 341              	.LFE3:
 342              		.size	ADC_Init, .-ADC_Init
 343              		.section	.text.ADC_Enable,"ax",%progbits
 344              		.align	2
 345              		.global	ADC_Enable
 346              		.code	16
 347              		.thumb_func
 348              		.type	ADC_Enable, %function
 349              	ADC_Enable:
 350              	.LFB4:
 283:Generated_Source\PSoC4/ADC.c **** 
 284:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 285:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 286:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 287:Generated_Source\PSoC4/ADC.c **** *
 288:Generated_Source\PSoC4/ADC.c **** * Summary:
 289:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 290:Generated_Source\PSoC4/ADC.c **** *
 291:Generated_Source\PSoC4/ADC.c **** * Parameters:
 292:Generated_Source\PSoC4/ADC.c **** *  None.
 293:Generated_Source\PSoC4/ADC.c **** *
 294:Generated_Source\PSoC4/ADC.c **** * Return:
 295:Generated_Source\PSoC4/ADC.c **** *  None.
 296:Generated_Source\PSoC4/ADC.c **** *
 297:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 298:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 299:Generated_Source\PSoC4/ADC.c **** {
 351              		.loc 1 299 0
 352              		.cfi_startproc
 353 0000 80B5     		push	{r7, lr}
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 7, -8
 356              		.cfi_offset 14, -4
 357 0002 00AF     		add	r7, sp, #0
 358              		.cfi_def_cfa_register 7
 300:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 359              		.loc 1 300 0
 360 0004 0A4B     		ldr	r3, .L21
 361 0006 1B68     		ldr	r3, [r3]
 362 0008 002B     		cmp	r3, #0
 363 000a 0EDB     		blt	.L18
 301:Generated_Source\PSoC4/ADC.c ****     {
 302:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 303:Generated_Source\PSoC4/ADC.c **** 
 304:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 364              		.loc 1 304 0
 365 000c C046     		mov	r8, r8
 366              	.L20:
 367              		.loc 1 304 0 is_stmt 0 discriminator 1
 368 000e 094B     		ldr	r3, .L21+4
 369 0010 1B68     		ldr	r3, [r3]
 370 0012 002B     		cmp	r3, #0
 371 0014 FBDB     		blt	.L20
 305:Generated_Source\PSoC4/ADC.c ****             {
 306:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 13


 307:Generated_Source\PSoC4/ADC.c ****             }
 308:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 309:Generated_Source\PSoC4/ADC.c ****         
 310:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 372              		.loc 1 310 0 is_stmt 1
 373 0016 064B     		ldr	r3, .L21
 374 0018 054A     		ldr	r2, .L21
 375 001a 1268     		ldr	r2, [r2]
 376 001c 8021     		mov	r1, #128
 377 001e 0906     		lsl	r1, r1, #24
 378 0020 0A43     		orr	r2, r1
 379 0022 1A60     		str	r2, [r3]
 311:Generated_Source\PSoC4/ADC.c ****         
 312:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 313:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 380              		.loc 1 313 0
 381 0024 0A20     		mov	r0, #10
 382 0026 FFF7FEFF 		bl	CyDelayUs
 383              	.L18:
 314:Generated_Source\PSoC4/ADC.c ****     }
 315:Generated_Source\PSoC4/ADC.c **** }
 384              		.loc 1 315 0
 385 002a BD46     		mov	sp, r7
 386              		@ sp needed
 387 002c 80BD     		pop	{r7, pc}
 388              	.L22:
 389 002e C046     		.align	2
 390              	.L21:
 391 0030 00003A40 		.word	1077542912
 392 0034 08023A40 		.word	1077543432
 393              		.cfi_endproc
 394              	.LFE4:
 395              		.size	ADC_Enable, .-ADC_Enable
 396              		.section	.text.ADC_Stop,"ax",%progbits
 397              		.align	2
 398              		.global	ADC_Stop
 399              		.code	16
 400              		.thumb_func
 401              		.type	ADC_Stop, %function
 402              	ADC_Stop:
 403              	.LFB5:
 316:Generated_Source\PSoC4/ADC.c **** 
 317:Generated_Source\PSoC4/ADC.c **** 
 318:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 320:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 321:Generated_Source\PSoC4/ADC.c **** *
 322:Generated_Source\PSoC4/ADC.c **** * Summary:
 323:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 324:Generated_Source\PSoC4/ADC.c **** *  mode.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Parameters:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** * Return:
 330:Generated_Source\PSoC4/ADC.c **** *  None.
 331:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 14


 332:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 333:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 334:Generated_Source\PSoC4/ADC.c **** {
 404              		.loc 1 334 0
 405              		.cfi_startproc
 406 0000 80B5     		push	{r7, lr}
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 7, -8
 409              		.cfi_offset 14, -4
 410 0002 00AF     		add	r7, sp, #0
 411              		.cfi_def_cfa_register 7
 335:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 412              		.loc 1 335 0
 413 0004 034B     		ldr	r3, .L24
 414 0006 034A     		ldr	r2, .L24
 415 0008 1268     		ldr	r2, [r2]
 416 000a 5200     		lsl	r2, r2, #1
 417 000c 5208     		lsr	r2, r2, #1
 418 000e 1A60     		str	r2, [r3]
 336:Generated_Source\PSoC4/ADC.c **** }
 419              		.loc 1 336 0
 420 0010 BD46     		mov	sp, r7
 421              		@ sp needed
 422 0012 80BD     		pop	{r7, pc}
 423              	.L25:
 424              		.align	2
 425              	.L24:
 426 0014 00003A40 		.word	1077542912
 427              		.cfi_endproc
 428              	.LFE5:
 429              		.size	ADC_Stop, .-ADC_Stop
 430              		.section	.text.ADC_StartConvert,"ax",%progbits
 431              		.align	2
 432              		.global	ADC_StartConvert
 433              		.code	16
 434              		.thumb_func
 435              		.type	ADC_StartConvert, %function
 436              	ADC_StartConvert:
 437              	.LFB6:
 337:Generated_Source\PSoC4/ADC.c **** 
 338:Generated_Source\PSoC4/ADC.c **** 
 339:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 340:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 341:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 342:Generated_Source\PSoC4/ADC.c **** *
 343:Generated_Source\PSoC4/ADC.c **** * Summary:
 344:Generated_Source\PSoC4/ADC.c **** *  Description:
 345:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 346:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 347:Generated_Source\PSoC4/ADC.c **** *
 348:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 349:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 350:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 351:Generated_Source\PSoC4/ADC.c **** *
 352:Generated_Source\PSoC4/ADC.c **** * Parameters:
 353:Generated_Source\PSoC4/ADC.c **** *  None.
 354:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 15


 355:Generated_Source\PSoC4/ADC.c **** * Return:
 356:Generated_Source\PSoC4/ADC.c **** *  None.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 359:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 360:Generated_Source\PSoC4/ADC.c **** {
 438              		.loc 1 360 0
 439              		.cfi_startproc
 440 0000 80B5     		push	{r7, lr}
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 7, -8
 443              		.cfi_offset 14, -4
 444 0002 00AF     		add	r7, sp, #0
 445              		.cfi_def_cfa_register 7
 361:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 362:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 446              		.loc 1 362 0
 447 0004 044B     		ldr	r3, .L27
 448 0006 044A     		ldr	r2, .L27
 449 0008 1268     		ldr	r2, [r2]
 450 000a 8021     		mov	r1, #128
 451 000c 4902     		lsl	r1, r1, #9
 452 000e 0A43     		orr	r2, r1
 453 0010 1A60     		str	r2, [r3]
 363:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 364:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 365:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 366:Generated_Source\PSoC4/ADC.c **** 
 367:Generated_Source\PSoC4/ADC.c **** }
 454              		.loc 1 367 0
 455 0012 BD46     		mov	sp, r7
 456              		@ sp needed
 457 0014 80BD     		pop	{r7, pc}
 458              	.L28:
 459 0016 C046     		.align	2
 460              	.L27:
 461 0018 04003A40 		.word	1077542916
 462              		.cfi_endproc
 463              	.LFE6:
 464              		.size	ADC_StartConvert, .-ADC_StartConvert
 465              		.section	.text.ADC_StopConvert,"ax",%progbits
 466              		.align	2
 467              		.global	ADC_StopConvert
 468              		.code	16
 469              		.thumb_func
 470              		.type	ADC_StopConvert, %function
 471              	ADC_StopConvert:
 472              	.LFB7:
 368:Generated_Source\PSoC4/ADC.c **** 
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 371:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 372:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 373:Generated_Source\PSoC4/ADC.c **** *
 374:Generated_Source\PSoC4/ADC.c **** * Summary:
 375:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 376:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 16


 377:Generated_Source\PSoC4/ADC.c **** * Parameters:
 378:Generated_Source\PSoC4/ADC.c **** *  None.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** * Return:
 381:Generated_Source\PSoC4/ADC.c **** *  None.
 382:Generated_Source\PSoC4/ADC.c **** *
 383:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 384:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 385:Generated_Source\PSoC4/ADC.c **** {
 473              		.loc 1 385 0
 474              		.cfi_startproc
 475 0000 80B5     		push	{r7, lr}
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 7, -8
 478              		.cfi_offset 14, -4
 479 0002 00AF     		add	r7, sp, #0
 480              		.cfi_def_cfa_register 7
 386:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 387:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 481              		.loc 1 387 0
 482 0004 034B     		ldr	r3, .L30
 483 0006 034A     		ldr	r2, .L30
 484 0008 1268     		ldr	r2, [r2]
 485 000a 0349     		ldr	r1, .L30+4
 486 000c 0A40     		and	r2, r1
 487 000e 1A60     		str	r2, [r3]
 388:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 389:Generated_Source\PSoC4/ADC.c **** }
 488              		.loc 1 389 0
 489 0010 BD46     		mov	sp, r7
 490              		@ sp needed
 491 0012 80BD     		pop	{r7, pc}
 492              	.L31:
 493              		.align	2
 494              	.L30:
 495 0014 04003A40 		.word	1077542916
 496 0018 FFFFFEFF 		.word	-65537
 497              		.cfi_endproc
 498              	.LFE7:
 499              		.size	ADC_StopConvert, .-ADC_StopConvert
 500              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 501              		.align	2
 502              		.global	ADC_IsEndConversion
 503              		.code	16
 504              		.thumb_func
 505              		.type	ADC_IsEndConversion, %function
 506              	ADC_IsEndConversion:
 507              	.LFB8:
 390:Generated_Source\PSoC4/ADC.c **** 
 391:Generated_Source\PSoC4/ADC.c **** 
 392:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 393:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 394:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 395:Generated_Source\PSoC4/ADC.c **** *
 396:Generated_Source\PSoC4/ADC.c **** * Summary:
 397:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 398:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 17


 399:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 400:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 401:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 402:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 403:Generated_Source\PSoC4/ADC.c **** *  completed.
 404:Generated_Source\PSoC4/ADC.c **** *
 405:Generated_Source\PSoC4/ADC.c **** * Parameters:
 406:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 407:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 408:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 409:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 410:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 411:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 412:Generated_Source\PSoC4/ADC.c **** *
 413:Generated_Source\PSoC4/ADC.c **** * Return:
 414:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 415:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 416:Generated_Source\PSoC4/ADC.c **** *
 417:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 418:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 419:Generated_Source\PSoC4/ADC.c **** {
 508              		.loc 1 419 0
 509              		.cfi_startproc
 510 0000 80B5     		push	{r7, lr}
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 7, -8
 513              		.cfi_offset 14, -4
 514 0002 84B0     		sub	sp, sp, #16
 515              		.cfi_def_cfa_offset 24
 516 0004 00AF     		add	r7, sp, #0
 517              		.cfi_def_cfa_register 7
 518 0006 7860     		str	r0, [r7, #4]
 420:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 519              		.loc 1 420 0
 520 0008 0023     		mov	r3, #0
 521 000a FB60     		str	r3, [r7, #12]
 421:Generated_Source\PSoC4/ADC.c **** 
 422:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 522              		.loc 1 422 0
 523 000c 7B68     		ldr	r3, [r7, #4]
 524 000e 0322     		mov	r2, #3
 525 0010 1340     		and	r3, r2
 526 0012 11D0     		beq	.L33
 527              	.L35:
 423:Generated_Source\PSoC4/ADC.c ****     {
 424:Generated_Source\PSoC4/ADC.c ****         do
 425:Generated_Source\PSoC4/ADC.c ****         {
 426:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 528              		.loc 1 426 0 discriminator 2
 529 0014 0B4B     		ldr	r3, .L37
 530 0016 1B68     		ldr	r3, [r3]
 531 0018 0122     		mov	r2, #1
 532 001a 1340     		and	r3, r2
 533 001c FB60     		str	r3, [r7, #12]
 427:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 534              		.loc 1 427 0 discriminator 2
 535 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 18


 536 0020 002B     		cmp	r3, #0
 537 0022 03D1     		bne	.L34
 538              		.loc 1 427 0 is_stmt 0 discriminator 1
 539 0024 7B68     		ldr	r3, [r7, #4]
 540 0026 0222     		mov	r2, #2
 541 0028 1340     		and	r3, r2
 542 002a F3D1     		bne	.L35
 543              	.L34:
 428:Generated_Source\PSoC4/ADC.c **** 
 429:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 544              		.loc 1 429 0 is_stmt 1
 545 002c FB68     		ldr	r3, [r7, #12]
 546 002e 002B     		cmp	r3, #0
 547 0030 02D0     		beq	.L33
 430:Generated_Source\PSoC4/ADC.c ****         {
 431:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 432:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 548              		.loc 1 432 0
 549 0032 044B     		ldr	r3, .L37
 550 0034 0122     		mov	r2, #1
 551 0036 1A60     		str	r2, [r3]
 552              	.L33:
 433:Generated_Source\PSoC4/ADC.c ****         }
 434:Generated_Source\PSoC4/ADC.c ****     }
 435:Generated_Source\PSoC4/ADC.c **** 
 436:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 437:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 438:Generated_Source\PSoC4/ADC.c ****         {
 439:Generated_Source\PSoC4/ADC.c ****             do
 440:Generated_Source\PSoC4/ADC.c ****             {
 441:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 442:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 443:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 444:Generated_Source\PSoC4/ADC.c **** 
 445:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 446:Generated_Source\PSoC4/ADC.c ****             {
 447:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 448:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 449:Generated_Source\PSoC4/ADC.c ****             }
 450:Generated_Source\PSoC4/ADC.c ****         }
 451:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 452:Generated_Source\PSoC4/ADC.c **** 
 453:Generated_Source\PSoC4/ADC.c ****     return (status);
 553              		.loc 1 453 0
 554 0038 FB68     		ldr	r3, [r7, #12]
 454:Generated_Source\PSoC4/ADC.c **** }
 555              		.loc 1 454 0
 556 003a 181C     		mov	r0, r3
 557 003c BD46     		mov	sp, r7
 558 003e 04B0     		add	sp, sp, #16
 559              		@ sp needed
 560 0040 80BD     		pop	{r7, pc}
 561              	.L38:
 562 0042 C046     		.align	2
 563              	.L37:
 564 0044 10023A40 		.word	1077543440
 565              		.cfi_endproc
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 19


 566              	.LFE8:
 567              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 568              		.section	.text.ADC_GetResult16,"ax",%progbits
 569              		.align	2
 570              		.global	ADC_GetResult16
 571              		.code	16
 572              		.thumb_func
 573              		.type	ADC_GetResult16, %function
 574              	ADC_GetResult16:
 575              	.LFB9:
 455:Generated_Source\PSoC4/ADC.c **** 
 456:Generated_Source\PSoC4/ADC.c **** 
 457:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 458:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 459:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 460:Generated_Source\PSoC4/ADC.c **** *
 461:Generated_Source\PSoC4/ADC.c **** * Summary:
 462:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 463:Generated_Source\PSoC4/ADC.c **** *
 464:Generated_Source\PSoC4/ADC.c **** * Parameters:
 465:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 466:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 467:Generated_Source\PSoC4/ADC.c **** *
 468:Generated_Source\PSoC4/ADC.c **** * Return:
 469:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 470:Generated_Source\PSoC4/ADC.c **** *
 471:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 472:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 473:Generated_Source\PSoC4/ADC.c **** {
 576              		.loc 1 473 0
 577              		.cfi_startproc
 578 0000 80B5     		push	{r7, lr}
 579              		.cfi_def_cfa_offset 8
 580              		.cfi_offset 7, -8
 581              		.cfi_offset 14, -4
 582 0002 84B0     		sub	sp, sp, #16
 583              		.cfi_def_cfa_offset 24
 584 0004 00AF     		add	r7, sp, #0
 585              		.cfi_def_cfa_register 7
 586 0006 7860     		str	r0, [r7, #4]
 474:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 475:Generated_Source\PSoC4/ADC.c **** 
 476:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 477:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 587              		.loc 1 477 0
 588 0008 7B68     		ldr	r3, [r7, #4]
 589 000a 002B     		cmp	r3, #0
 590 000c 02D0     		beq	.L40
 591              		.loc 1 477 0 is_stmt 0 discriminator 1
 592 000e 0020     		mov	r0, #0
 593 0010 FFF7FEFF 		bl	CyHalt
 594              	.L40:
 478:Generated_Source\PSoC4/ADC.c **** 
 479:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 595              		.loc 1 479 0 is_stmt 1
 596 0014 7B68     		ldr	r3, [r7, #4]
 597 0016 002B     		cmp	r3, #0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 20


 598 0018 09D1     		bne	.L41
 480:Generated_Source\PSoC4/ADC.c ****     {
 481:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 599              		.loc 1 481 0
 600 001a 7B68     		ldr	r3, [r7, #4]
 601 001c 9B00     		lsl	r3, r3, #2
 602 001e 084A     		ldr	r2, .L44
 603 0020 9446     		mov	ip, r2
 604 0022 6344     		add	r3, r3, ip
 605 0024 1B68     		ldr	r3, [r3]
 606 0026 1B04     		lsl	r3, r3, #16
 607 0028 1B0C     		lsr	r3, r3, #16
 608 002a FB60     		str	r3, [r7, #12]
 609 002c 01E0     		b	.L42
 610              	.L41:
 482:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 483:Generated_Source\PSoC4/ADC.c ****     }
 484:Generated_Source\PSoC4/ADC.c ****     else
 485:Generated_Source\PSoC4/ADC.c ****     {
 486:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 487:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 488:Generated_Source\PSoC4/ADC.c ****         #else
 489:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 611              		.loc 1 489 0
 612 002e 0023     		mov	r3, #0
 613 0030 FB60     		str	r3, [r7, #12]
 614              	.L42:
 490:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 491:Generated_Source\PSoC4/ADC.c ****     }
 492:Generated_Source\PSoC4/ADC.c **** 
 493:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 615              		.loc 1 493 0
 616 0032 FB68     		ldr	r3, [r7, #12]
 617 0034 9BB2     		uxth	r3, r3
 618 0036 1BB2     		sxth	r3, r3
 494:Generated_Source\PSoC4/ADC.c **** }
 619              		.loc 1 494 0
 620 0038 181C     		mov	r0, r3
 621 003a BD46     		mov	sp, r7
 622 003c 04B0     		add	sp, sp, #16
 623              		@ sp needed
 624 003e 80BD     		pop	{r7, pc}
 625              	.L45:
 626              		.align	2
 627              	.L44:
 628 0040 80013A40 		.word	1077543296
 629              		.cfi_endproc
 630              	.LFE9:
 631              		.size	ADC_GetResult16, .-ADC_GetResult16
 632              		.section	.text.ADC_SetChanMask,"ax",%progbits
 633              		.align	2
 634              		.global	ADC_SetChanMask
 635              		.code	16
 636              		.thumb_func
 637              		.type	ADC_SetChanMask, %function
 638              	ADC_SetChanMask:
 639              	.LFB10:
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 21


 495:Generated_Source\PSoC4/ADC.c **** 
 496:Generated_Source\PSoC4/ADC.c **** 
 497:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 498:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 499:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 500:Generated_Source\PSoC4/ADC.c **** *
 501:Generated_Source\PSoC4/ADC.c **** * Summary:
 502:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 503:Generated_Source\PSoC4/ADC.c **** *
 504:Generated_Source\PSoC4/ADC.c **** * Parameters:
 505:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 506:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 507:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 508:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 509:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 510:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 511:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 512:Generated_Source\PSoC4/ADC.c **** *
 513:Generated_Source\PSoC4/ADC.c **** * Return:
 514:Generated_Source\PSoC4/ADC.c **** *  None.
 515:Generated_Source\PSoC4/ADC.c **** *
 516:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 517:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 518:Generated_Source\PSoC4/ADC.c **** {
 640              		.loc 1 518 0
 641              		.cfi_startproc
 642 0000 80B5     		push	{r7, lr}
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 7, -8
 645              		.cfi_offset 14, -4
 646 0002 82B0     		sub	sp, sp, #8
 647              		.cfi_def_cfa_offset 16
 648 0004 00AF     		add	r7, sp, #0
 649              		.cfi_def_cfa_register 7
 650 0006 7860     		str	r0, [r7, #4]
 519:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 651              		.loc 1 519 0
 652 0008 034B     		ldr	r3, .L47
 653 000a 7A68     		ldr	r2, [r7, #4]
 654 000c 0121     		mov	r1, #1
 655 000e 0A40     		and	r2, r1
 656 0010 1A60     		str	r2, [r3]
 520:Generated_Source\PSoC4/ADC.c **** }
 657              		.loc 1 520 0
 658 0012 BD46     		mov	sp, r7
 659 0014 02B0     		add	sp, sp, #8
 660              		@ sp needed
 661 0016 80BD     		pop	{r7, pc}
 662              	.L48:
 663              		.align	2
 664              	.L47:
 665 0018 20003A40 		.word	1077542944
 666              		.cfi_endproc
 667              	.LFE10:
 668              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 669              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 670              		.align	2
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 22


 671              		.global	ADC_SetLowLimit
 672              		.code	16
 673              		.thumb_func
 674              		.type	ADC_SetLowLimit, %function
 675              	ADC_SetLowLimit:
 676              	.LFB11:
 521:Generated_Source\PSoC4/ADC.c **** 
 522:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 523:Generated_Source\PSoC4/ADC.c **** 
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 526:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 527:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 528:Generated_Source\PSoC4/ADC.c ****     *
 529:Generated_Source\PSoC4/ADC.c ****     * Summary:
 530:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 531:Generated_Source\PSoC4/ADC.c ****     *
 532:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 533:Generated_Source\PSoC4/ADC.c ****     *  None.
 534:Generated_Source\PSoC4/ADC.c ****     *
 535:Generated_Source\PSoC4/ADC.c ****     * Return:
 536:Generated_Source\PSoC4/ADC.c ****     *  None.
 537:Generated_Source\PSoC4/ADC.c ****     *
 538:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 539:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 540:Generated_Source\PSoC4/ADC.c ****     {
 541:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 542:Generated_Source\PSoC4/ADC.c ****     }
 543:Generated_Source\PSoC4/ADC.c **** 
 544:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 545:Generated_Source\PSoC4/ADC.c **** 
 546:Generated_Source\PSoC4/ADC.c **** 
 547:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 548:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 549:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 550:Generated_Source\PSoC4/ADC.c **** *
 551:Generated_Source\PSoC4/ADC.c **** * Summary:
 552:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 553:Generated_Source\PSoC4/ADC.c **** *
 554:Generated_Source\PSoC4/ADC.c **** * Parameters:
 555:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 556:Generated_Source\PSoC4/ADC.c **** *
 557:Generated_Source\PSoC4/ADC.c **** * Return:
 558:Generated_Source\PSoC4/ADC.c **** *  None.
 559:Generated_Source\PSoC4/ADC.c **** *
 560:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 561:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 562:Generated_Source\PSoC4/ADC.c **** {
 677              		.loc 1 562 0
 678              		.cfi_startproc
 679 0000 80B5     		push	{r7, lr}
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 82B0     		sub	sp, sp, #8
 684              		.cfi_def_cfa_offset 16
 685 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 23


 686              		.cfi_def_cfa_register 7
 687 0006 7860     		str	r0, [r7, #4]
 563:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 688              		.loc 1 563 0
 689 0008 084B     		ldr	r3, .L50
 690 000a 084A     		ldr	r2, .L50
 691 000c 1268     		ldr	r2, [r2]
 692 000e 120C     		lsr	r2, r2, #16
 693 0010 1204     		lsl	r2, r2, #16
 694 0012 1A60     		str	r2, [r3]
 564:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 695              		.loc 1 564 0
 696 0014 054B     		ldr	r3, .L50
 697 0016 054A     		ldr	r2, .L50
 698 0018 1168     		ldr	r1, [r2]
 699 001a 7A68     		ldr	r2, [r7, #4]
 700 001c 1204     		lsl	r2, r2, #16
 701 001e 120C     		lsr	r2, r2, #16
 702 0020 0A43     		orr	r2, r1
 703 0022 1A60     		str	r2, [r3]
 565:Generated_Source\PSoC4/ADC.c **** }
 704              		.loc 1 565 0
 705 0024 BD46     		mov	sp, r7
 706 0026 02B0     		add	sp, sp, #8
 707              		@ sp needed
 708 0028 80BD     		pop	{r7, pc}
 709              	.L51:
 710 002a C046     		.align	2
 711              	.L50:
 712 002c 18003A40 		.word	1077542936
 713              		.cfi_endproc
 714              	.LFE11:
 715              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 716              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 717              		.align	2
 718              		.global	ADC_SetHighLimit
 719              		.code	16
 720              		.thumb_func
 721              		.type	ADC_SetHighLimit, %function
 722              	ADC_SetHighLimit:
 723              	.LFB12:
 566:Generated_Source\PSoC4/ADC.c **** 
 567:Generated_Source\PSoC4/ADC.c **** 
 568:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 569:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 570:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 571:Generated_Source\PSoC4/ADC.c **** *
 572:Generated_Source\PSoC4/ADC.c **** * Summary:
 573:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 574:Generated_Source\PSoC4/ADC.c **** *
 575:Generated_Source\PSoC4/ADC.c **** * Parameters:
 576:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 577:Generated_Source\PSoC4/ADC.c **** *
 578:Generated_Source\PSoC4/ADC.c **** * Return:
 579:Generated_Source\PSoC4/ADC.c **** *  None.
 580:Generated_Source\PSoC4/ADC.c **** *
 581:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 24


 582:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 583:Generated_Source\PSoC4/ADC.c **** {
 724              		.loc 1 583 0
 725              		.cfi_startproc
 726 0000 80B5     		push	{r7, lr}
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 7, -8
 729              		.cfi_offset 14, -4
 730 0002 82B0     		sub	sp, sp, #8
 731              		.cfi_def_cfa_offset 16
 732 0004 00AF     		add	r7, sp, #0
 733              		.cfi_def_cfa_register 7
 734 0006 7860     		str	r0, [r7, #4]
 584:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 735              		.loc 1 584 0
 736 0008 074B     		ldr	r3, .L53
 737 000a 074A     		ldr	r2, .L53
 738 000c 1268     		ldr	r2, [r2]
 739 000e 1204     		lsl	r2, r2, #16
 740 0010 120C     		lsr	r2, r2, #16
 741 0012 1A60     		str	r2, [r3]
 585:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 742              		.loc 1 585 0
 743 0014 044B     		ldr	r3, .L53
 744 0016 044A     		ldr	r2, .L53
 745 0018 1168     		ldr	r1, [r2]
 746 001a 7A68     		ldr	r2, [r7, #4]
 747 001c 1204     		lsl	r2, r2, #16
 748 001e 0A43     		orr	r2, r1
 749 0020 1A60     		str	r2, [r3]
 586:Generated_Source\PSoC4/ADC.c **** }
 750              		.loc 1 586 0
 751 0022 BD46     		mov	sp, r7
 752 0024 02B0     		add	sp, sp, #8
 753              		@ sp needed
 754 0026 80BD     		pop	{r7, pc}
 755              	.L54:
 756              		.align	2
 757              	.L53:
 758 0028 18003A40 		.word	1077542936
 759              		.cfi_endproc
 760              	.LFE12:
 761              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 762              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 763              		.align	2
 764              		.global	ADC_SetLimitMask
 765              		.code	16
 766              		.thumb_func
 767              		.type	ADC_SetLimitMask, %function
 768              	ADC_SetLimitMask:
 769              	.LFB13:
 587:Generated_Source\PSoC4/ADC.c **** 
 588:Generated_Source\PSoC4/ADC.c **** 
 589:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 590:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 591:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 592:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 25


 593:Generated_Source\PSoC4/ADC.c **** * Summary:
 594:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 595:Generated_Source\PSoC4/ADC.c **** *
 596:Generated_Source\PSoC4/ADC.c **** * Parameters:
 597:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 598:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 599:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 600:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 601:Generated_Source\PSoC4/ADC.c **** *
 602:Generated_Source\PSoC4/ADC.c **** * Return:
 603:Generated_Source\PSoC4/ADC.c **** *  None.
 604:Generated_Source\PSoC4/ADC.c **** *
 605:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 606:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 607:Generated_Source\PSoC4/ADC.c **** {
 770              		.loc 1 607 0
 771              		.cfi_startproc
 772 0000 80B5     		push	{r7, lr}
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 82B0     		sub	sp, sp, #8
 777              		.cfi_def_cfa_offset 16
 778 0004 00AF     		add	r7, sp, #0
 779              		.cfi_def_cfa_register 7
 780 0006 7860     		str	r0, [r7, #4]
 608:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 781              		.loc 1 608 0
 782 0008 034B     		ldr	r3, .L56
 783 000a 7A68     		ldr	r2, [r7, #4]
 784 000c 0121     		mov	r1, #1
 785 000e 0A40     		and	r2, r1
 786 0010 1A60     		str	r2, [r3]
 609:Generated_Source\PSoC4/ADC.c **** }
 787              		.loc 1 609 0
 788 0012 BD46     		mov	sp, r7
 789 0014 02B0     		add	sp, sp, #8
 790              		@ sp needed
 791 0016 80BD     		pop	{r7, pc}
 792              	.L57:
 793              		.align	2
 794              	.L56:
 795 0018 38023A40 		.word	1077543480
 796              		.cfi_endproc
 797              	.LFE13:
 798              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 799              		.section	.text.ADC_SetSatMask,"ax",%progbits
 800              		.align	2
 801              		.global	ADC_SetSatMask
 802              		.code	16
 803              		.thumb_func
 804              		.type	ADC_SetSatMask, %function
 805              	ADC_SetSatMask:
 806              	.LFB14:
 610:Generated_Source\PSoC4/ADC.c **** 
 611:Generated_Source\PSoC4/ADC.c **** 
 612:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 26


 613:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 614:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 615:Generated_Source\PSoC4/ADC.c **** *
 616:Generated_Source\PSoC4/ADC.c **** * Summary:
 617:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 618:Generated_Source\PSoC4/ADC.c **** *
 619:Generated_Source\PSoC4/ADC.c **** * Parameters:
 620:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 621:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 622:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 623:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Return:
 626:Generated_Source\PSoC4/ADC.c **** *  None.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 629:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 630:Generated_Source\PSoC4/ADC.c **** {
 807              		.loc 1 630 0
 808              		.cfi_startproc
 809 0000 80B5     		push	{r7, lr}
 810              		.cfi_def_cfa_offset 8
 811              		.cfi_offset 7, -8
 812              		.cfi_offset 14, -4
 813 0002 82B0     		sub	sp, sp, #8
 814              		.cfi_def_cfa_offset 16
 815 0004 00AF     		add	r7, sp, #0
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
 631:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 818              		.loc 1 631 0
 819 0008 034B     		ldr	r3, .L59
 820 000a 7A68     		ldr	r2, [r7, #4]
 821 000c 0121     		mov	r1, #1
 822 000e 0A40     		and	r2, r1
 823 0010 1A60     		str	r2, [r3]
 632:Generated_Source\PSoC4/ADC.c **** }
 824              		.loc 1 632 0
 825 0012 BD46     		mov	sp, r7
 826 0014 02B0     		add	sp, sp, #8
 827              		@ sp needed
 828 0016 80BD     		pop	{r7, pc}
 829              	.L60:
 830              		.align	2
 831              	.L59:
 832 0018 28023A40 		.word	1077543464
 833              		.cfi_endproc
 834              	.LFE14:
 835              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 836              		.section	.text.ADC_SetOffset,"ax",%progbits
 837              		.align	2
 838              		.global	ADC_SetOffset
 839              		.code	16
 840              		.thumb_func
 841              		.type	ADC_SetOffset, %function
 842              	ADC_SetOffset:
 843              	.LFB15:
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 27


 633:Generated_Source\PSoC4/ADC.c **** 
 634:Generated_Source\PSoC4/ADC.c **** 
 635:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 636:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 637:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 638:Generated_Source\PSoC4/ADC.c **** *
 639:Generated_Source\PSoC4/ADC.c **** * Summary:
 640:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 641:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 642:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 643:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 644:Generated_Source\PSoC4/ADC.c **** *
 645:Generated_Source\PSoC4/ADC.c **** * Parameters:
 646:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 647:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 648:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 649:Generated_Source\PSoC4/ADC.c **** *
 650:Generated_Source\PSoC4/ADC.c **** * Return:
 651:Generated_Source\PSoC4/ADC.c **** *  None.
 652:Generated_Source\PSoC4/ADC.c **** *
 653:Generated_Source\PSoC4/ADC.c **** * Global variables:
 654:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 655:Generated_Source\PSoC4/ADC.c **** *
 656:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 657:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 658:Generated_Source\PSoC4/ADC.c **** {
 844              		.loc 1 658 0
 845              		.cfi_startproc
 846 0000 80B5     		push	{r7, lr}
 847              		.cfi_def_cfa_offset 8
 848              		.cfi_offset 7, -8
 849              		.cfi_offset 14, -4
 850 0002 82B0     		sub	sp, sp, #8
 851              		.cfi_def_cfa_offset 16
 852 0004 00AF     		add	r7, sp, #0
 853              		.cfi_def_cfa_register 7
 854 0006 7860     		str	r0, [r7, #4]
 855 0008 0A1C     		mov	r2, r1
 856 000a BB1C     		add	r3, r7, #2
 857 000c 1A80     		strh	r2, [r3]
 659:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 660:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 858              		.loc 1 660 0
 859 000e 7B68     		ldr	r3, [r7, #4]
 860 0010 002B     		cmp	r3, #0
 861 0012 02D0     		beq	.L62
 862              		.loc 1 660 0 is_stmt 0 discriminator 1
 863 0014 0020     		mov	r0, #0
 864 0016 FFF7FEFF 		bl	CyHalt
 865              	.L62:
 661:Generated_Source\PSoC4/ADC.c **** 
 662:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 866              		.loc 1 662 0 is_stmt 1
 867 001a 044B     		ldr	r3, .L63
 868 001c 7A68     		ldr	r2, [r7, #4]
 869 001e 5200     		lsl	r2, r2, #1
 870 0020 B91C     		add	r1, r7, #2
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 28


 871 0022 0988     		ldrh	r1, [r1]
 872 0024 D152     		strh	r1, [r2, r3]
 663:Generated_Source\PSoC4/ADC.c **** }
 873              		.loc 1 663 0
 874 0026 BD46     		mov	sp, r7
 875 0028 02B0     		add	sp, sp, #8
 876              		@ sp needed
 877 002a 80BD     		pop	{r7, pc}
 878              	.L64:
 879              		.align	2
 880              	.L63:
 881 002c 00000000 		.word	ADC_offset
 882              		.cfi_endproc
 883              	.LFE15:
 884              		.size	ADC_SetOffset, .-ADC_SetOffset
 885              		.section	.text.ADC_SetGain,"ax",%progbits
 886              		.align	2
 887              		.global	ADC_SetGain
 888              		.code	16
 889              		.thumb_func
 890              		.type	ADC_SetGain, %function
 891              	ADC_SetGain:
 892              	.LFB16:
 664:Generated_Source\PSoC4/ADC.c **** 
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 667:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 668:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 669:Generated_Source\PSoC4/ADC.c **** *
 670:Generated_Source\PSoC4/ADC.c **** * Summary:
 671:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 672:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 673:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 674:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 675:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 676:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 677:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 678:Generated_Source\PSoC4/ADC.c **** *
 679:Generated_Source\PSoC4/ADC.c **** * Parameters:
 680:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 681:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 682:Generated_Source\PSoC4/ADC.c **** *
 683:Generated_Source\PSoC4/ADC.c **** * Return:
 684:Generated_Source\PSoC4/ADC.c **** *  None.
 685:Generated_Source\PSoC4/ADC.c **** *
 686:Generated_Source\PSoC4/ADC.c **** * Global variables:
 687:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 688:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 689:Generated_Source\PSoC4/ADC.c **** *
 690:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 691:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 692:Generated_Source\PSoC4/ADC.c **** {
 893              		.loc 1 692 0
 894              		.cfi_startproc
 895 0000 80B5     		push	{r7, lr}
 896              		.cfi_def_cfa_offset 8
 897              		.cfi_offset 7, -8
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 29


 898              		.cfi_offset 14, -4
 899 0002 82B0     		sub	sp, sp, #8
 900              		.cfi_def_cfa_offset 16
 901 0004 00AF     		add	r7, sp, #0
 902              		.cfi_def_cfa_register 7
 903 0006 7860     		str	r0, [r7, #4]
 904 0008 3960     		str	r1, [r7]
 693:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 694:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 905              		.loc 1 694 0
 906 000a 7B68     		ldr	r3, [r7, #4]
 907 000c 002B     		cmp	r3, #0
 908 000e 02D0     		beq	.L66
 909              		.loc 1 694 0 is_stmt 0 discriminator 1
 910 0010 0020     		mov	r0, #0
 911 0012 FFF7FEFF 		bl	CyHalt
 912              	.L66:
 695:Generated_Source\PSoC4/ADC.c **** 
 696:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 913              		.loc 1 696 0 is_stmt 1
 914 0016 044B     		ldr	r3, .L67
 915 0018 7A68     		ldr	r2, [r7, #4]
 916 001a 9200     		lsl	r2, r2, #2
 917 001c 3968     		ldr	r1, [r7]
 918 001e D150     		str	r1, [r2, r3]
 697:Generated_Source\PSoC4/ADC.c **** }
 919              		.loc 1 697 0
 920 0020 BD46     		mov	sp, r7
 921 0022 02B0     		add	sp, sp, #8
 922              		@ sp needed
 923 0024 80BD     		pop	{r7, pc}
 924              	.L68:
 925 0026 C046     		.align	2
 926              	.L67:
 927 0028 00000000 		.word	ADC_countsPer10Volt
 928              		.cfi_endproc
 929              	.LFE16:
 930              		.size	ADC_SetGain, .-ADC_SetGain
 931              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 932              		.align	2
 933              		.global	ADC_CountsTo_mVolts
 934              		.code	16
 935              		.thumb_func
 936              		.type	ADC_CountsTo_mVolts, %function
 937              	ADC_CountsTo_mVolts:
 938              	.LFB17:
 698:Generated_Source\PSoC4/ADC.c **** 
 699:Generated_Source\PSoC4/ADC.c **** 
 700:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 701:Generated_Source\PSoC4/ADC.c **** 
 702:Generated_Source\PSoC4/ADC.c **** 
 703:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 704:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 705:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 706:Generated_Source\PSoC4/ADC.c ****     *
 707:Generated_Source\PSoC4/ADC.c ****     * Summary:
 708:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 30


 709:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 710:Generated_Source\PSoC4/ADC.c ****     *
 711:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 712:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 713:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 714:Generated_Source\PSoC4/ADC.c ****     *
 715:Generated_Source\PSoC4/ADC.c ****     * Return:
 716:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 717:Generated_Source\PSoC4/ADC.c ****     *
 718:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 719:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 720:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 721:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 722:Generated_Source\PSoC4/ADC.c ****     *
 723:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 724:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 725:Generated_Source\PSoC4/ADC.c ****     {
 939              		.loc 1 725 0
 940              		.cfi_startproc
 941 0000 80B5     		push	{r7, lr}
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 7, -8
 944              		.cfi_offset 14, -4
 945 0002 84B0     		sub	sp, sp, #16
 946              		.cfi_def_cfa_offset 24
 947 0004 00AF     		add	r7, sp, #0
 948              		.cfi_def_cfa_register 7
 949 0006 7860     		str	r0, [r7, #4]
 950 0008 0A1C     		mov	r2, r1
 951 000a BB1C     		add	r3, r7, #2
 952 000c 1A80     		strh	r2, [r3]
 726:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 729:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 953              		.loc 1 729 0
 954 000e 7B68     		ldr	r3, [r7, #4]
 955 0010 002B     		cmp	r3, #0
 956 0012 02D0     		beq	.L70
 957              		.loc 1 729 0 is_stmt 0 discriminator 1
 958 0014 0020     		mov	r0, #0
 959 0016 FFF7FEFF 		bl	CyHalt
 960              	.L70:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 732:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 733:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 734:Generated_Source\PSoC4/ADC.c ****             {
 735:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 736:Generated_Source\PSoC4/ADC.c ****             }
 737:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 738:Generated_Source\PSoC4/ADC.c **** 
 739:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 740:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 961              		.loc 1 740 0 is_stmt 1
 962 001a 1F4B     		ldr	r3, .L76
 963 001c 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 31


 964 001e 5200     		lsl	r2, r2, #1
 965 0020 D35A     		ldrh	r3, [r2, r3]
 966 0022 99B2     		uxth	r1, r3
 967 0024 BB1C     		add	r3, r7, #2
 968 0026 1A88     		ldrh	r2, [r3]
 969 0028 8BB2     		uxth	r3, r1
 970 002a D31A     		sub	r3, r2, r3
 971 002c 9AB2     		uxth	r2, r3
 972 002e BB1C     		add	r3, r7, #2
 973 0030 1A80     		strh	r2, [r3]
 741:Generated_Source\PSoC4/ADC.c **** 
 742:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 974              		.loc 1 742 0
 975 0032 BB1C     		add	r3, r7, #2
 976 0034 0022     		mov	r2, #0
 977 0036 9B5E     		ldrsh	r3, [r3, r2]
 978 0038 184A     		ldr	r2, .L76+4
 979 003a 5A43     		mul	r2, r3
 743:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 980              		.loc 1 743 0
 981 003c BB1C     		add	r3, r7, #2
 982 003e 0021     		mov	r1, #0
 983 0040 5B5E     		ldrsh	r3, [r3, r1]
 984 0042 002B     		cmp	r3, #0
 985 0044 08DD     		ble	.L71
 986              		.loc 1 743 0 is_stmt 0 discriminator 1
 987 0046 164B     		ldr	r3, .L76+8
 988 0048 7968     		ldr	r1, [r7, #4]
 989 004a 8900     		lsl	r1, r1, #2
 990 004c CB58     		ldr	r3, [r1, r3]
 991 004e 002B     		cmp	r3, #0
 992 0050 00DA     		bge	.L72
 993 0052 0133     		add	r3, r3, #1
 994              	.L72:
 995 0054 5B10     		asr	r3, r3, #1
 996 0056 08E0     		b	.L73
 997              	.L71:
 998              		.loc 1 743 0 discriminator 2
 999 0058 114B     		ldr	r3, .L76+8
 1000 005a 7968     		ldr	r1, [r7, #4]
 1001 005c 8900     		lsl	r1, r1, #2
 1002 005e CB58     		ldr	r3, [r1, r3]
 1003 0060 002B     		cmp	r3, #0
 1004 0062 00DA     		bge	.L74
 1005 0064 0133     		add	r3, r3, #1
 1006              	.L74:
 1007 0066 5B10     		asr	r3, r3, #1
 1008 0068 5B42     		neg	r3, r3
 1009              	.L73:
 742:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1010              		.loc 1 742 0 is_stmt 1
 1011 006a D118     		add	r1, r2, r3
 744:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1012              		.loc 1 744 0
 1013 006c 0C4B     		ldr	r3, .L76+8
 1014 006e 7A68     		ldr	r2, [r7, #4]
 1015 0070 9200     		lsl	r2, r2, #2
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 32


 1016 0072 D358     		ldr	r3, [r2, r3]
 1017 0074 081C     		mov	r0, r1
 1018 0076 191C     		mov	r1, r3
 1019 0078 FFF7FEFF 		bl	__aeabi_idiv
 1020 007c 031C     		mov	r3, r0
 1021 007e 1A1C     		mov	r2, r3
 742:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1022              		.loc 1 742 0
 1023 0080 0E23     		mov	r3, #14
 1024 0082 FB18     		add	r3, r7, r3
 1025 0084 1A80     		strh	r2, [r3]
 745:Generated_Source\PSoC4/ADC.c **** 
 746:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1026              		.loc 1 746 0
 1027 0086 0E23     		mov	r3, #14
 1028 0088 FB18     		add	r3, r7, r3
 1029 008a 1B88     		ldrh	r3, [r3]
 1030 008c 1BB2     		sxth	r3, r3
 747:Generated_Source\PSoC4/ADC.c ****     }
 1031              		.loc 1 747 0
 1032 008e 181C     		mov	r0, r3
 1033 0090 BD46     		mov	sp, r7
 1034 0092 04B0     		add	sp, sp, #16
 1035              		@ sp needed
 1036 0094 80BD     		pop	{r7, pc}
 1037              	.L77:
 1038 0096 C046     		.align	2
 1039              	.L76:
 1040 0098 00000000 		.word	ADC_offset
 1041 009c 10270000 		.word	10000
 1042 00a0 00000000 		.word	ADC_countsPer10Volt
 1043              		.cfi_endproc
 1044              	.LFE17:
 1045              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1046              		.global	__aeabi_lmul
 1047              		.global	__aeabi_ldivmod
 1048              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1049              		.align	2
 1050              		.global	ADC_CountsTo_uVolts
 1051              		.code	16
 1052              		.thumb_func
 1053              		.type	ADC_CountsTo_uVolts, %function
 1054              	ADC_CountsTo_uVolts:
 1055              	.LFB18:
 748:Generated_Source\PSoC4/ADC.c **** 
 749:Generated_Source\PSoC4/ADC.c **** 
 750:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 751:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 752:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 753:Generated_Source\PSoC4/ADC.c ****     *
 754:Generated_Source\PSoC4/ADC.c ****     * Summary:
 755:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 756:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 757:Generated_Source\PSoC4/ADC.c ****     *
 758:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 759:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 760:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 33


 761:Generated_Source\PSoC4/ADC.c ****     *
 762:Generated_Source\PSoC4/ADC.c ****     * Return:
 763:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 764:Generated_Source\PSoC4/ADC.c ****     *
 765:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 766:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 767:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 768:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 769:Generated_Source\PSoC4/ADC.c ****     *
 770:Generated_Source\PSoC4/ADC.c ****     * Theory:
 771:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 772:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 773:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 774:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 775:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 776:Generated_Source\PSoC4/ADC.c ****     *
 777:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 778:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 779:Generated_Source\PSoC4/ADC.c ****     {
 1056              		.loc 1 779 0
 1057              		.cfi_startproc
 1058 0000 B0B5     		push	{r4, r5, r7, lr}
 1059              		.cfi_def_cfa_offset 16
 1060              		.cfi_offset 4, -16
 1061              		.cfi_offset 5, -12
 1062              		.cfi_offset 7, -8
 1063              		.cfi_offset 14, -4
 1064 0002 86B0     		sub	sp, sp, #24
 1065              		.cfi_def_cfa_offset 40
 1066 0004 00AF     		add	r7, sp, #0
 1067              		.cfi_def_cfa_register 7
 1068 0006 F860     		str	r0, [r7, #12]
 1069 0008 0A1C     		mov	r2, r1
 1070 000a 0A23     		mov	r3, #10
 1071 000c FB18     		add	r3, r7, r3
 1072 000e 1A80     		strh	r2, [r3]
 780:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 783:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1073              		.loc 1 783 0
 1074 0010 FB68     		ldr	r3, [r7, #12]
 1075 0012 002B     		cmp	r3, #0
 1076 0014 02D0     		beq	.L79
 1077              		.loc 1 783 0 is_stmt 0 discriminator 1
 1078 0016 0020     		mov	r0, #0
 1079 0018 FFF7FEFF 		bl	CyHalt
 1080              	.L79:
 784:Generated_Source\PSoC4/ADC.c **** 
 785:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 786:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 787:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 788:Generated_Source\PSoC4/ADC.c ****             {
 789:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 790:Generated_Source\PSoC4/ADC.c ****             }
 791:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 792:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 34


 793:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 794:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1081              		.loc 1 794 0 is_stmt 1
 1082 001c 194B     		ldr	r3, .L81
 1083 001e FA68     		ldr	r2, [r7, #12]
 1084 0020 5200     		lsl	r2, r2, #1
 1085 0022 D35A     		ldrh	r3, [r2, r3]
 1086 0024 99B2     		uxth	r1, r3
 1087 0026 0A23     		mov	r3, #10
 1088 0028 FB18     		add	r3, r7, r3
 1089 002a 1A88     		ldrh	r2, [r3]
 1090 002c 8BB2     		uxth	r3, r1
 1091 002e D31A     		sub	r3, r2, r3
 1092 0030 9AB2     		uxth	r2, r3
 1093 0032 0A23     		mov	r3, #10
 1094 0034 FB18     		add	r3, r7, r3
 1095 0036 1A80     		strh	r2, [r3]
 795:Generated_Source\PSoC4/ADC.c **** 
 796:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1096              		.loc 1 796 0
 1097 0038 0A23     		mov	r3, #10
 1098 003a FB18     		add	r3, r7, r3
 1099 003c 1B88     		ldrh	r3, [r3]
 1100 003e 1BB2     		sxth	r3, r3
 1101 0040 3B60     		str	r3, [r7]
 1102 0042 DB17     		asr	r3, r3, #31
 1103 0044 7B60     		str	r3, [r7, #4]
 1104 0046 3868     		ldr	r0, [r7]
 1105 0048 7968     		ldr	r1, [r7, #4]
 1106 004a 0F4A     		ldr	r2, .L81+4
 1107 004c 0023     		mov	r3, #0
 1108 004e FFF7FEFF 		bl	__aeabi_lmul
 1109 0052 021C     		mov	r2, r0
 1110 0054 0B1C     		mov	r3, r1
 1111 0056 101C     		mov	r0, r2
 1112 0058 191C     		mov	r1, r3
 1113 005a 0C4B     		ldr	r3, .L81+8
 1114 005c FA68     		ldr	r2, [r7, #12]
 1115 005e 9200     		lsl	r2, r2, #2
 1116 0060 D358     		ldr	r3, [r2, r3]
 1117 0062 1C1C     		mov	r4, r3
 1118 0064 DB17     		asr	r3, r3, #31
 1119 0066 1D1C     		mov	r5, r3
 1120 0068 221C     		mov	r2, r4
 1121 006a 2B1C     		mov	r3, r5
 1122 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1123 0070 031C     		mov	r3, r0
 1124 0072 0C1C     		mov	r4, r1
 1125 0074 3B61     		str	r3, [r7, #16]
 1126 0076 7C61     		str	r4, [r7, #20]
 797:Generated_Source\PSoC4/ADC.c **** 
 798:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1127              		.loc 1 798 0
 1128 0078 3B69     		ldr	r3, [r7, #16]
 799:Generated_Source\PSoC4/ADC.c ****     }
 1129              		.loc 1 799 0
 1130 007a 181C     		mov	r0, r3
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 35


 1131 007c BD46     		mov	sp, r7
 1132 007e 06B0     		add	sp, sp, #24
 1133              		@ sp needed
 1134 0080 B0BD     		pop	{r4, r5, r7, pc}
 1135              	.L82:
 1136 0082 C046     		.align	2
 1137              	.L81:
 1138 0084 00000000 		.word	ADC_offset
 1139 0088 80969800 		.word	10000000
 1140 008c 00000000 		.word	ADC_countsPer10Volt
 1141              		.cfi_endproc
 1142              	.LFE18:
 1143              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1144              		.global	__aeabi_i2f
 1145              		.global	__aeabi_fmul
 1146              		.global	__aeabi_fdiv
 1147              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1148              		.align	2
 1149              		.global	ADC_CountsTo_Volts
 1150              		.code	16
 1151              		.thumb_func
 1152              		.type	ADC_CountsTo_Volts, %function
 1153              	ADC_CountsTo_Volts:
 1154              	.LFB19:
 800:Generated_Source\PSoC4/ADC.c **** 
 801:Generated_Source\PSoC4/ADC.c **** 
 802:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 803:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 804:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 805:Generated_Source\PSoC4/ADC.c ****     *
 806:Generated_Source\PSoC4/ADC.c ****     * Summary:
 807:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 808:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 809:Generated_Source\PSoC4/ADC.c ****     *
 810:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 811:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 812:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 813:Generated_Source\PSoC4/ADC.c ****     *
 814:Generated_Source\PSoC4/ADC.c ****     * Return:
 815:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 816:Generated_Source\PSoC4/ADC.c ****     *
 817:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 818:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 819:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 820:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 821:Generated_Source\PSoC4/ADC.c ****     *
 822:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 823:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 824:Generated_Source\PSoC4/ADC.c ****     {
 1155              		.loc 1 824 0
 1156              		.cfi_startproc
 1157 0000 90B5     		push	{r4, r7, lr}
 1158              		.cfi_def_cfa_offset 12
 1159              		.cfi_offset 4, -12
 1160              		.cfi_offset 7, -8
 1161              		.cfi_offset 14, -4
 1162 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 36


 1163              		.cfi_def_cfa_offset 32
 1164 0004 00AF     		add	r7, sp, #0
 1165              		.cfi_def_cfa_register 7
 1166 0006 7860     		str	r0, [r7, #4]
 1167 0008 0A1C     		mov	r2, r1
 1168 000a BB1C     		add	r3, r7, #2
 1169 000c 1A80     		strh	r2, [r3]
 825:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 826:Generated_Source\PSoC4/ADC.c **** 
 827:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 828:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1170              		.loc 1 828 0
 1171 000e 7B68     		ldr	r3, [r7, #4]
 1172 0010 002B     		cmp	r3, #0
 1173 0012 02D0     		beq	.L84
 1174              		.loc 1 828 0 is_stmt 0 discriminator 1
 1175 0014 0020     		mov	r0, #0
 1176 0016 FFF7FEFF 		bl	CyHalt
 1177              	.L84:
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 831:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 832:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 833:Generated_Source\PSoC4/ADC.c ****             {
 834:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 835:Generated_Source\PSoC4/ADC.c ****             }
 836:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 837:Generated_Source\PSoC4/ADC.c **** 
 838:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 839:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1178              		.loc 1 839 0 is_stmt 1
 1179 001a 164B     		ldr	r3, .L86
 1180 001c 7A68     		ldr	r2, [r7, #4]
 1181 001e 5200     		lsl	r2, r2, #1
 1182 0020 D35A     		ldrh	r3, [r2, r3]
 1183 0022 99B2     		uxth	r1, r3
 1184 0024 BB1C     		add	r3, r7, #2
 1185 0026 1A88     		ldrh	r2, [r3]
 1186 0028 8BB2     		uxth	r3, r1
 1187 002a D31A     		sub	r3, r2, r3
 1188 002c 9AB2     		uxth	r2, r3
 1189 002e BB1C     		add	r3, r7, #2
 1190 0030 1A80     		strh	r2, [r3]
 840:Generated_Source\PSoC4/ADC.c **** 
 841:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1191              		.loc 1 841 0
 1192 0032 BB1C     		add	r3, r7, #2
 1193 0034 0022     		mov	r2, #0
 1194 0036 9B5E     		ldrsh	r3, [r3, r2]
 1195 0038 181C     		mov	r0, r3
 1196 003a FFF7FEFF 		bl	__aeabi_i2f
 1197 003e 031C     		add	r3, r0, #0
 1198 0040 181C     		add	r0, r3, #0
 1199 0042 0D49     		ldr	r1, .L86+4
 1200 0044 FFF7FEFF 		bl	__aeabi_fmul
 1201 0048 031C     		add	r3, r0, #0
 1202 004a 1C1C     		add	r4, r3, #0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 37


 1203 004c 0B4B     		ldr	r3, .L86+8
 1204 004e 7A68     		ldr	r2, [r7, #4]
 1205 0050 9200     		lsl	r2, r2, #2
 1206 0052 D358     		ldr	r3, [r2, r3]
 1207 0054 181C     		mov	r0, r3
 1208 0056 FFF7FEFF 		bl	__aeabi_i2f
 1209 005a 031C     		add	r3, r0, #0
 1210 005c 201C     		add	r0, r4, #0
 1211 005e 191C     		add	r1, r3, #0
 1212 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1213 0064 031C     		add	r3, r0, #0
 1214 0066 FB60     		str	r3, [r7, #12]
 842:Generated_Source\PSoC4/ADC.c **** 
 843:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1215              		.loc 1 843 0
 1216 0068 FB68     		ldr	r3, [r7, #12]
 844:Generated_Source\PSoC4/ADC.c ****     }
 1217              		.loc 1 844 0
 1218 006a 181C     		add	r0, r3, #0
 1219 006c BD46     		mov	sp, r7
 1220 006e 05B0     		add	sp, sp, #20
 1221              		@ sp needed
 1222 0070 90BD     		pop	{r4, r7, pc}
 1223              	.L87:
 1224 0072 C046     		.align	2
 1225              	.L86:
 1226 0074 00000000 		.word	ADC_offset
 1227 0078 00002041 		.word	1092616192
 1228 007c 00000000 		.word	ADC_countsPer10Volt
 1229              		.cfi_endproc
 1230              	.LFE19:
 1231              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1232              		.text
 1233              	.Letext0:
 1234              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1235              		.section	.debug_info,"",%progbits
 1236              	.Ldebug_info0:
 1237 0000 77040000 		.4byte	0x477
 1238 0004 0400     		.2byte	0x4
 1239 0006 00000000 		.4byte	.Ldebug_abbrev0
 1240 000a 04       		.byte	0x4
 1241 000b 01       		.uleb128 0x1
 1242 000c 27000000 		.4byte	.LASF59
 1243 0010 01       		.byte	0x1
 1244 0011 10030000 		.4byte	.LASF60
 1245 0015 29010000 		.4byte	.LASF61
 1246 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1247 001d 00000000 		.4byte	0
 1248 0021 00000000 		.4byte	.Ldebug_line0
 1249 0025 02       		.uleb128 0x2
 1250 0026 01       		.byte	0x1
 1251 0027 06       		.byte	0x6
 1252 0028 78030000 		.4byte	.LASF0
 1253 002c 02       		.uleb128 0x2
 1254 002d 01       		.byte	0x1
 1255 002e 08       		.byte	0x8
 1256 002f AC010000 		.4byte	.LASF1
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 38


 1257 0033 02       		.uleb128 0x2
 1258 0034 02       		.byte	0x2
 1259 0035 05       		.byte	0x5
 1260 0036 FA000000 		.4byte	.LASF2
 1261 003a 02       		.uleb128 0x2
 1262 003b 02       		.byte	0x2
 1263 003c 07       		.byte	0x7
 1264 003d E7000000 		.4byte	.LASF3
 1265 0041 02       		.uleb128 0x2
 1266 0042 04       		.byte	0x4
 1267 0043 05       		.byte	0x5
 1268 0044 6A030000 		.4byte	.LASF4
 1269 0048 02       		.uleb128 0x2
 1270 0049 04       		.byte	0x4
 1271 004a 07       		.byte	0x7
 1272 004b D1010000 		.4byte	.LASF5
 1273 004f 02       		.uleb128 0x2
 1274 0050 08       		.byte	0x8
 1275 0051 05       		.byte	0x5
 1276 0052 00000000 		.4byte	.LASF6
 1277 0056 02       		.uleb128 0x2
 1278 0057 08       		.byte	0x8
 1279 0058 07       		.byte	0x7
 1280 0059 8C020000 		.4byte	.LASF7
 1281 005d 03       		.uleb128 0x3
 1282 005e 04       		.byte	0x4
 1283 005f 05       		.byte	0x5
 1284 0060 696E7400 		.ascii	"int\000"
 1285 0064 02       		.uleb128 0x2
 1286 0065 04       		.byte	0x4
 1287 0066 07       		.byte	0x7
 1288 0067 6D020000 		.4byte	.LASF8
 1289 006b 04       		.uleb128 0x4
 1290 006c 50030000 		.4byte	.LASF9
 1291 0070 02       		.byte	0x2
 1292 0071 3801     		.2byte	0x138
 1293 0073 2C000000 		.4byte	0x2c
 1294 0077 04       		.uleb128 0x4
 1295 0078 44020000 		.4byte	.LASF10
 1296 007c 02       		.byte	0x2
 1297 007d 3901     		.2byte	0x139
 1298 007f 3A000000 		.4byte	0x3a
 1299 0083 04       		.uleb128 0x4
 1300 0084 55020000 		.4byte	.LASF11
 1301 0088 02       		.byte	0x2
 1302 0089 3A01     		.2byte	0x13a
 1303 008b 48000000 		.4byte	0x48
 1304 008f 04       		.uleb128 0x4
 1305 0090 CB010000 		.4byte	.LASF12
 1306 0094 02       		.byte	0x2
 1307 0095 3C01     		.2byte	0x13c
 1308 0097 33000000 		.4byte	0x33
 1309 009b 04       		.uleb128 0x4
 1310 009c E3010000 		.4byte	.LASF13
 1311 00a0 02       		.byte	0x2
 1312 00a1 3D01     		.2byte	0x13d
 1313 00a3 41000000 		.4byte	0x41
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 39


 1314 00a7 04       		.uleb128 0x4
 1315 00a8 83010000 		.4byte	.LASF14
 1316 00ac 02       		.byte	0x2
 1317 00ad 3E01     		.2byte	0x13e
 1318 00af B3000000 		.4byte	0xb3
 1319 00b3 02       		.uleb128 0x2
 1320 00b4 04       		.byte	0x4
 1321 00b5 04       		.byte	0x4
 1322 00b6 BC000000 		.4byte	.LASF15
 1323 00ba 02       		.uleb128 0x2
 1324 00bb 08       		.byte	0x8
 1325 00bc 04       		.byte	0x4
 1326 00bd 2C020000 		.4byte	.LASF16
 1327 00c1 04       		.uleb128 0x4
 1328 00c2 90030000 		.4byte	.LASF17
 1329 00c6 02       		.byte	0x2
 1330 00c7 4301     		.2byte	0x143
 1331 00c9 4F000000 		.4byte	0x4f
 1332 00cd 02       		.uleb128 0x2
 1333 00ce 01       		.byte	0x1
 1334 00cf 08       		.byte	0x8
 1335 00d0 73030000 		.4byte	.LASF18
 1336 00d4 04       		.uleb128 0x4
 1337 00d5 21000000 		.4byte	.LASF19
 1338 00d9 02       		.byte	0x2
 1339 00da E401     		.2byte	0x1e4
 1340 00dc E0000000 		.4byte	0xe0
 1341 00e0 05       		.uleb128 0x5
 1342 00e1 83000000 		.4byte	0x83
 1343 00e5 02       		.uleb128 0x2
 1344 00e6 04       		.byte	0x4
 1345 00e7 07       		.byte	0x7
 1346 00e8 CF020000 		.4byte	.LASF20
 1347 00ec 06       		.uleb128 0x6
 1348 00ed AA020000 		.4byte	.LASF24
 1349 00f1 01       		.byte	0x1
 1350 00f2 3F       		.byte	0x3f
 1351 00f3 00000000 		.4byte	.LFB2
 1352 00f7 24000000 		.4byte	.LFE2-.LFB2
 1353 00fb 01       		.uleb128 0x1
 1354 00fc 9C       		.byte	0x9c
 1355 00fd 07       		.uleb128 0x7
 1356 00fe B4020000 		.4byte	.LASF35
 1357 0102 01       		.byte	0x1
 1358 0103 5E       		.byte	0x5e
 1359 0104 00000000 		.4byte	.LFB3
 1360 0108 C0010000 		.4byte	.LFE3-.LFB3
 1361 010c 01       		.uleb128 0x1
 1362 010d 9C       		.byte	0x9c
 1363 010e 3D010000 		.4byte	0x13d
 1364 0112 08       		.uleb128 0x8
 1365 0113 32030000 		.4byte	.LASF21
 1366 0117 01       		.byte	0x1
 1367 0118 60       		.byte	0x60
 1368 0119 83000000 		.4byte	0x83
 1369 011d 02       		.uleb128 0x2
 1370 011e 91       		.byte	0x91
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 40


 1371 011f 74       		.sleb128 -12
 1372 0120 08       		.uleb128 0x8
 1373 0121 96010000 		.4byte	.LASF22
 1374 0125 01       		.byte	0x1
 1375 0126 61       		.byte	0x61
 1376 0127 83000000 		.4byte	0x83
 1377 012b 02       		.uleb128 0x2
 1378 012c 91       		.byte	0x91
 1379 012d 6C       		.sleb128 -20
 1380 012e 08       		.uleb128 0x8
 1381 012f 85020000 		.4byte	.LASF23
 1382 0133 01       		.byte	0x1
 1383 0134 62       		.byte	0x62
 1384 0135 9B000000 		.4byte	0x9b
 1385 0139 02       		.uleb128 0x2
 1386 013a 91       		.byte	0x91
 1387 013b 70       		.sleb128 -16
 1388 013c 00       		.byte	0
 1389 013d 09       		.uleb128 0x9
 1390 013e 7A020000 		.4byte	.LASF25
 1391 0142 01       		.byte	0x1
 1392 0143 2A01     		.2byte	0x12a
 1393 0145 00000000 		.4byte	.LFB4
 1394 0149 38000000 		.4byte	.LFE4-.LFB4
 1395 014d 01       		.uleb128 0x1
 1396 014e 9C       		.byte	0x9c
 1397 014f 0A       		.uleb128 0xa
 1398 0150 96030000 		.4byte	.LASF26
 1399 0154 01       		.byte	0x1
 1400 0155 4D01     		.2byte	0x14d
 1401 0157 00000000 		.4byte	.LFB5
 1402 015b 18000000 		.4byte	.LFE5-.LFB5
 1403 015f 01       		.uleb128 0x1
 1404 0160 9C       		.byte	0x9c
 1405 0161 0A       		.uleb128 0xa
 1406 0162 FF020000 		.4byte	.LASF27
 1407 0166 01       		.byte	0x1
 1408 0167 6701     		.2byte	0x167
 1409 0169 00000000 		.4byte	.LFB6
 1410 016d 1C000000 		.4byte	.LFE6-.LFB6
 1411 0171 01       		.uleb128 0x1
 1412 0172 9C       		.byte	0x9c
 1413 0173 0A       		.uleb128 0xa
 1414 0174 40030000 		.4byte	.LASF28
 1415 0178 01       		.byte	0x1
 1416 0179 8001     		.2byte	0x180
 1417 017b 00000000 		.4byte	.LFB7
 1418 017f 1C000000 		.4byte	.LFE7-.LFB7
 1419 0183 01       		.uleb128 0x1
 1420 0184 9C       		.byte	0x9c
 1421 0185 0B       		.uleb128 0xb
 1422 0186 18020000 		.4byte	.LASF30
 1423 018a 01       		.byte	0x1
 1424 018b A201     		.2byte	0x1a2
 1425 018d 83000000 		.4byte	0x83
 1426 0191 00000000 		.4byte	.LFB8
 1427 0195 48000000 		.4byte	.LFE8-.LFB8
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 41


 1428 0199 01       		.uleb128 0x1
 1429 019a 9C       		.byte	0x9c
 1430 019b BE010000 		.4byte	0x1be
 1431 019f 0C       		.uleb128 0xc
 1432 01a0 38030000 		.4byte	.LASF32
 1433 01a4 01       		.byte	0x1
 1434 01a5 A201     		.2byte	0x1a2
 1435 01a7 83000000 		.4byte	0x83
 1436 01ab 02       		.uleb128 0x2
 1437 01ac 91       		.byte	0x91
 1438 01ad 6C       		.sleb128 -20
 1439 01ae 0D       		.uleb128 0xd
 1440 01af 22010000 		.4byte	.LASF29
 1441 01b3 01       		.byte	0x1
 1442 01b4 A401     		.2byte	0x1a4
 1443 01b6 83000000 		.4byte	0x83
 1444 01ba 02       		.uleb128 0x2
 1445 01bb 91       		.byte	0x91
 1446 01bc 74       		.sleb128 -12
 1447 01bd 00       		.byte	0
 1448 01be 0E       		.uleb128 0xe
 1449 01bf E9010000 		.4byte	.LASF31
 1450 01c3 01       		.byte	0x1
 1451 01c4 D801     		.2byte	0x1d8
 1452 01c6 8F000000 		.4byte	0x8f
 1453 01ca 00000000 		.4byte	.LFB9
 1454 01ce 44000000 		.4byte	.LFE9-.LFB9
 1455 01d2 01       		.uleb128 0x1
 1456 01d3 9C       		.byte	0x9c
 1457 01d4 F7010000 		.4byte	0x1f7
 1458 01d8 0C       		.uleb128 0xc
 1459 01d9 C3020000 		.4byte	.LASF33
 1460 01dd 01       		.byte	0x1
 1461 01de D801     		.2byte	0x1d8
 1462 01e0 83000000 		.4byte	0x83
 1463 01e4 02       		.uleb128 0x2
 1464 01e5 91       		.byte	0x91
 1465 01e6 6C       		.sleb128 -20
 1466 01e7 0D       		.uleb128 0xd
 1467 01e8 A3020000 		.4byte	.LASF34
 1468 01ec 01       		.byte	0x1
 1469 01ed DA01     		.2byte	0x1da
 1470 01ef 83000000 		.4byte	0x83
 1471 01f3 02       		.uleb128 0x2
 1472 01f4 91       		.byte	0x91
 1473 01f5 74       		.sleb128 -12
 1474 01f6 00       		.byte	0
 1475 01f7 0F       		.uleb128 0xf
 1476 01f8 F9010000 		.4byte	.LASF36
 1477 01fc 01       		.byte	0x1
 1478 01fd 0502     		.2byte	0x205
 1479 01ff 00000000 		.4byte	.LFB10
 1480 0203 1C000000 		.4byte	.LFE10-.LFB10
 1481 0207 01       		.uleb128 0x1
 1482 0208 9C       		.byte	0x9c
 1483 0209 1D020000 		.4byte	0x21d
 1484 020d 0C       		.uleb128 0xc
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 42


 1485 020e 2D030000 		.4byte	.LASF37
 1486 0212 01       		.byte	0x1
 1487 0213 0502     		.2byte	0x205
 1488 0215 83000000 		.4byte	0x83
 1489 0219 02       		.uleb128 0x2
 1490 021a 91       		.byte	0x91
 1491 021b 74       		.sleb128 -12
 1492 021c 00       		.byte	0
 1493 021d 0F       		.uleb128 0xf
 1494 021e 12010000 		.4byte	.LASF38
 1495 0222 01       		.byte	0x1
 1496 0223 3102     		.2byte	0x231
 1497 0225 00000000 		.4byte	.LFB11
 1498 0229 30000000 		.4byte	.LFE11-.LFB11
 1499 022d 01       		.uleb128 0x1
 1500 022e 9C       		.byte	0x9c
 1501 022f 43020000 		.4byte	0x243
 1502 0233 0C       		.uleb128 0xc
 1503 0234 33020000 		.4byte	.LASF39
 1504 0238 01       		.byte	0x1
 1505 0239 3102     		.2byte	0x231
 1506 023b 83000000 		.4byte	0x83
 1507 023f 02       		.uleb128 0x2
 1508 0240 91       		.byte	0x91
 1509 0241 74       		.sleb128 -12
 1510 0242 00       		.byte	0
 1511 0243 0F       		.uleb128 0xf
 1512 0244 BA010000 		.4byte	.LASF40
 1513 0248 01       		.byte	0x1
 1514 0249 4602     		.2byte	0x246
 1515 024b 00000000 		.4byte	.LFB12
 1516 024f 2C000000 		.4byte	.LFE12-.LFB12
 1517 0253 01       		.uleb128 0x1
 1518 0254 9C       		.byte	0x9c
 1519 0255 69020000 		.4byte	0x269
 1520 0259 0C       		.uleb128 0xc
 1521 025a C2000000 		.4byte	.LASF41
 1522 025e 01       		.byte	0x1
 1523 025f 4602     		.2byte	0x246
 1524 0261 83000000 		.4byte	0x83
 1525 0265 02       		.uleb128 0x2
 1526 0266 91       		.byte	0x91
 1527 0267 74       		.sleb128 -12
 1528 0268 00       		.byte	0
 1529 0269 0F       		.uleb128 0xf
 1530 026a 5C020000 		.4byte	.LASF42
 1531 026e 01       		.byte	0x1
 1532 026f 5E02     		.2byte	0x25e
 1533 0271 00000000 		.4byte	.LFB13
 1534 0275 1C000000 		.4byte	.LFE13-.LFB13
 1535 0279 01       		.uleb128 0x1
 1536 027a 9C       		.byte	0x9c
 1537 027b 8F020000 		.4byte	0x28f
 1538 027f 0C       		.uleb128 0xc
 1539 0280 2D030000 		.4byte	.LASF37
 1540 0284 01       		.byte	0x1
 1541 0285 5E02     		.2byte	0x25e
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 43


 1542 0287 83000000 		.4byte	0x83
 1543 028b 02       		.uleb128 0x2
 1544 028c 91       		.byte	0x91
 1545 028d 74       		.sleb128 -12
 1546 028e 00       		.byte	0
 1547 028f 0F       		.uleb128 0xf
 1548 0290 09020000 		.4byte	.LASF43
 1549 0294 01       		.byte	0x1
 1550 0295 7502     		.2byte	0x275
 1551 0297 00000000 		.4byte	.LFB14
 1552 029b 1C000000 		.4byte	.LFE14-.LFB14
 1553 029f 01       		.uleb128 0x1
 1554 02a0 9C       		.byte	0x9c
 1555 02a1 B5020000 		.4byte	0x2b5
 1556 02a5 0C       		.uleb128 0xc
 1557 02a6 2D030000 		.4byte	.LASF37
 1558 02aa 01       		.byte	0x1
 1559 02ab 7502     		.2byte	0x275
 1560 02ad 83000000 		.4byte	0x83
 1561 02b1 02       		.uleb128 0x2
 1562 02b2 91       		.byte	0x91
 1563 02b3 74       		.sleb128 -12
 1564 02b4 00       		.byte	0
 1565 02b5 10       		.uleb128 0x10
 1566 02b6 04010000 		.4byte	.LASF44
 1567 02ba 01       		.byte	0x1
 1568 02bb 9102     		.2byte	0x291
 1569 02bd 00000000 		.4byte	.LFB15
 1570 02c1 30000000 		.4byte	.LFE15-.LFB15
 1571 02c5 01       		.uleb128 0x1
 1572 02c6 9C       		.byte	0x9c
 1573 02c7 EA020000 		.4byte	0x2ea
 1574 02cb 0C       		.uleb128 0xc
 1575 02cc C3020000 		.4byte	.LASF33
 1576 02d0 01       		.byte	0x1
 1577 02d1 9102     		.2byte	0x291
 1578 02d3 83000000 		.4byte	0x83
 1579 02d7 02       		.uleb128 0x2
 1580 02d8 91       		.byte	0x91
 1581 02d9 74       		.sleb128 -12
 1582 02da 0C       		.uleb128 0xc
 1583 02db B5000000 		.4byte	.LASF45
 1584 02df 01       		.byte	0x1
 1585 02e0 9102     		.2byte	0x291
 1586 02e2 8F000000 		.4byte	0x8f
 1587 02e6 02       		.uleb128 0x2
 1588 02e7 91       		.byte	0x91
 1589 02e8 72       		.sleb128 -14
 1590 02e9 00       		.byte	0
 1591 02ea 10       		.uleb128 0x10
 1592 02eb A0010000 		.4byte	.LASF46
 1593 02ef 01       		.byte	0x1
 1594 02f0 B302     		.2byte	0x2b3
 1595 02f2 00000000 		.4byte	.LFB16
 1596 02f6 2C000000 		.4byte	.LFE16-.LFB16
 1597 02fa 01       		.uleb128 0x1
 1598 02fb 9C       		.byte	0x9c
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 44


 1599 02fc 1F030000 		.4byte	0x31f
 1600 0300 0C       		.uleb128 0xc
 1601 0301 C3020000 		.4byte	.LASF33
 1602 0305 01       		.byte	0x1
 1603 0306 B302     		.2byte	0x2b3
 1604 0308 83000000 		.4byte	0x83
 1605 030c 02       		.uleb128 0x2
 1606 030d 91       		.byte	0x91
 1607 030e 74       		.sleb128 -12
 1608 030f 0C       		.uleb128 0xc
 1609 0310 3C020000 		.4byte	.LASF47
 1610 0314 01       		.byte	0x1
 1611 0315 B302     		.2byte	0x2b3
 1612 0317 9B000000 		.4byte	0x9b
 1613 031b 02       		.uleb128 0x2
 1614 031c 91       		.byte	0x91
 1615 031d 70       		.sleb128 -16
 1616 031e 00       		.byte	0
 1617 031f 0E       		.uleb128 0xe
 1618 0320 CC000000 		.4byte	.LASF48
 1619 0324 01       		.byte	0x1
 1620 0325 D402     		.2byte	0x2d4
 1621 0327 8F000000 		.4byte	0x8f
 1622 032b 00000000 		.4byte	.LFB17
 1623 032f A4000000 		.4byte	.LFE17-.LFB17
 1624 0333 01       		.uleb128 0x1
 1625 0334 9C       		.byte	0x9c
 1626 0335 67030000 		.4byte	0x367
 1627 0339 0C       		.uleb128 0xc
 1628 033a C3020000 		.4byte	.LASF33
 1629 033e 01       		.byte	0x1
 1630 033f D402     		.2byte	0x2d4
 1631 0341 83000000 		.4byte	0x83
 1632 0345 02       		.uleb128 0x2
 1633 0346 91       		.byte	0x91
 1634 0347 6C       		.sleb128 -20
 1635 0348 0C       		.uleb128 0xc
 1636 0349 4B020000 		.4byte	.LASF49
 1637 034d 01       		.byte	0x1
 1638 034e D402     		.2byte	0x2d4
 1639 0350 8F000000 		.4byte	0x8f
 1640 0354 02       		.uleb128 0x2
 1641 0355 91       		.byte	0x91
 1642 0356 6A       		.sleb128 -22
 1643 0357 0D       		.uleb128 0xd
 1644 0358 C8020000 		.4byte	.LASF50
 1645 035c 01       		.byte	0x1
 1646 035d D602     		.2byte	0x2d6
 1647 035f 8F000000 		.4byte	0x8f
 1648 0363 02       		.uleb128 0x2
 1649 0364 91       		.byte	0x91
 1650 0365 76       		.sleb128 -10
 1651 0366 00       		.byte	0
 1652 0367 0E       		.uleb128 0xe
 1653 0368 D8020000 		.4byte	.LASF51
 1654 036c 01       		.byte	0x1
 1655 036d 0A03     		.2byte	0x30a
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 45


 1656 036f 9B000000 		.4byte	0x9b
 1657 0373 00000000 		.4byte	.LFB18
 1658 0377 90000000 		.4byte	.LFE18-.LFB18
 1659 037b 01       		.uleb128 0x1
 1660 037c 9C       		.byte	0x9c
 1661 037d AF030000 		.4byte	0x3af
 1662 0381 0C       		.uleb128 0xc
 1663 0382 C3020000 		.4byte	.LASF33
 1664 0386 01       		.byte	0x1
 1665 0387 0A03     		.2byte	0x30a
 1666 0389 83000000 		.4byte	0x83
 1667 038d 02       		.uleb128 0x2
 1668 038e 91       		.byte	0x91
 1669 038f 64       		.sleb128 -28
 1670 0390 0C       		.uleb128 0xc
 1671 0391 4B020000 		.4byte	.LASF49
 1672 0395 01       		.byte	0x1
 1673 0396 0A03     		.2byte	0x30a
 1674 0398 8F000000 		.4byte	0x8f
 1675 039c 02       		.uleb128 0x2
 1676 039d 91       		.byte	0x91
 1677 039e 62       		.sleb128 -30
 1678 039f 0D       		.uleb128 0xd
 1679 03a0 E0000000 		.4byte	.LASF52
 1680 03a4 01       		.byte	0x1
 1681 03a5 0C03     		.2byte	0x30c
 1682 03a7 C1000000 		.4byte	0xc1
 1683 03ab 02       		.uleb128 0x2
 1684 03ac 91       		.byte	0x91
 1685 03ad 68       		.sleb128 -24
 1686 03ae 00       		.byte	0
 1687 03af 0E       		.uleb128 0xe
 1688 03b0 EC020000 		.4byte	.LASF53
 1689 03b4 01       		.byte	0x1
 1690 03b5 3703     		.2byte	0x337
 1691 03b7 A7000000 		.4byte	0xa7
 1692 03bb 00000000 		.4byte	.LFB19
 1693 03bf 80000000 		.4byte	.LFE19-.LFB19
 1694 03c3 01       		.uleb128 0x1
 1695 03c4 9C       		.byte	0x9c
 1696 03c5 F7030000 		.4byte	0x3f7
 1697 03c9 0C       		.uleb128 0xc
 1698 03ca C3020000 		.4byte	.LASF33
 1699 03ce 01       		.byte	0x1
 1700 03cf 3703     		.2byte	0x337
 1701 03d1 83000000 		.4byte	0x83
 1702 03d5 02       		.uleb128 0x2
 1703 03d6 91       		.byte	0x91
 1704 03d7 64       		.sleb128 -28
 1705 03d8 0C       		.uleb128 0xc
 1706 03d9 4B020000 		.4byte	.LASF49
 1707 03dd 01       		.byte	0x1
 1708 03de 3703     		.2byte	0x337
 1709 03e0 8F000000 		.4byte	0x8f
 1710 03e4 02       		.uleb128 0x2
 1711 03e5 91       		.byte	0x91
 1712 03e6 62       		.sleb128 -30
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 46


 1713 03e7 0D       		.uleb128 0xd
 1714 03e8 BD020000 		.4byte	.LASF54
 1715 03ec 01       		.byte	0x1
 1716 03ed 3903     		.2byte	0x339
 1717 03ef A7000000 		.4byte	0xa7
 1718 03f3 02       		.uleb128 0x2
 1719 03f4 91       		.byte	0x91
 1720 03f5 6C       		.sleb128 -20
 1721 03f6 00       		.byte	0
 1722 03f7 11       		.uleb128 0x11
 1723 03f8 83000000 		.4byte	0x83
 1724 03fc 07040000 		.4byte	0x407
 1725 0400 12       		.uleb128 0x12
 1726 0401 E5000000 		.4byte	0xe5
 1727 0405 00       		.byte	0
 1728 0406 00       		.byte	0
 1729 0407 08       		.uleb128 0x8
 1730 0408 0E000000 		.4byte	.LASF55
 1731 040c 01       		.byte	0x1
 1732 040d 21       		.byte	0x21
 1733 040e 18040000 		.4byte	0x418
 1734 0412 05       		.uleb128 0x5
 1735 0413 03       		.byte	0x3
 1736 0414 00000000 		.4byte	ADC_channelsConfig
 1737 0418 13       		.uleb128 0x13
 1738 0419 F7030000 		.4byte	0x3f7
 1739 041d 14       		.uleb128 0x14
 1740 041e 84030000 		.4byte	.LASF56
 1741 0422 01       		.byte	0x1
 1742 0423 18       		.byte	0x18
 1743 0424 6B000000 		.4byte	0x6b
 1744 0428 05       		.uleb128 0x5
 1745 0429 03       		.byte	0x3
 1746 042a 00000000 		.4byte	ADC_initVar
 1747 042e 11       		.uleb128 0x11
 1748 042f 8F000000 		.4byte	0x8f
 1749 0433 3E040000 		.4byte	0x43e
 1750 0437 12       		.uleb128 0x12
 1751 0438 E5000000 		.4byte	0xe5
 1752 043c 00       		.byte	0
 1753 043d 00       		.byte	0
 1754 043e 14       		.uleb128 0x14
 1755 043f 8B010000 		.4byte	.LASF57
 1756 0443 01       		.byte	0x1
 1757 0444 19       		.byte	0x19
 1758 0445 4F040000 		.4byte	0x44f
 1759 0449 05       		.uleb128 0x5
 1760 044a 03       		.byte	0x3
 1761 044b 00000000 		.4byte	ADC_offset
 1762 044f 05       		.uleb128 0x5
 1763 0450 2E040000 		.4byte	0x42e
 1764 0454 11       		.uleb128 0x11
 1765 0455 9B000000 		.4byte	0x9b
 1766 0459 64040000 		.4byte	0x464
 1767 045d 12       		.uleb128 0x12
 1768 045e E5000000 		.4byte	0xe5
 1769 0462 00       		.byte	0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 47


 1770 0463 00       		.byte	0
 1771 0464 14       		.uleb128 0x14
 1772 0465 56030000 		.4byte	.LASF58
 1773 0469 01       		.byte	0x1
 1774 046a 1A       		.byte	0x1a
 1775 046b 75040000 		.4byte	0x475
 1776 046f 05       		.uleb128 0x5
 1777 0470 03       		.byte	0x3
 1778 0471 00000000 		.4byte	ADC_countsPer10Volt
 1779 0475 05       		.uleb128 0x5
 1780 0476 54040000 		.4byte	0x454
 1781 047a 00       		.byte	0
 1782              		.section	.debug_abbrev,"",%progbits
 1783              	.Ldebug_abbrev0:
 1784 0000 01       		.uleb128 0x1
 1785 0001 11       		.uleb128 0x11
 1786 0002 01       		.byte	0x1
 1787 0003 25       		.uleb128 0x25
 1788 0004 0E       		.uleb128 0xe
 1789 0005 13       		.uleb128 0x13
 1790 0006 0B       		.uleb128 0xb
 1791 0007 03       		.uleb128 0x3
 1792 0008 0E       		.uleb128 0xe
 1793 0009 1B       		.uleb128 0x1b
 1794 000a 0E       		.uleb128 0xe
 1795 000b 55       		.uleb128 0x55
 1796 000c 17       		.uleb128 0x17
 1797 000d 11       		.uleb128 0x11
 1798 000e 01       		.uleb128 0x1
 1799 000f 10       		.uleb128 0x10
 1800 0010 17       		.uleb128 0x17
 1801 0011 00       		.byte	0
 1802 0012 00       		.byte	0
 1803 0013 02       		.uleb128 0x2
 1804 0014 24       		.uleb128 0x24
 1805 0015 00       		.byte	0
 1806 0016 0B       		.uleb128 0xb
 1807 0017 0B       		.uleb128 0xb
 1808 0018 3E       		.uleb128 0x3e
 1809 0019 0B       		.uleb128 0xb
 1810 001a 03       		.uleb128 0x3
 1811 001b 0E       		.uleb128 0xe
 1812 001c 00       		.byte	0
 1813 001d 00       		.byte	0
 1814 001e 03       		.uleb128 0x3
 1815 001f 24       		.uleb128 0x24
 1816 0020 00       		.byte	0
 1817 0021 0B       		.uleb128 0xb
 1818 0022 0B       		.uleb128 0xb
 1819 0023 3E       		.uleb128 0x3e
 1820 0024 0B       		.uleb128 0xb
 1821 0025 03       		.uleb128 0x3
 1822 0026 08       		.uleb128 0x8
 1823 0027 00       		.byte	0
 1824 0028 00       		.byte	0
 1825 0029 04       		.uleb128 0x4
 1826 002a 16       		.uleb128 0x16
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 48


 1827 002b 00       		.byte	0
 1828 002c 03       		.uleb128 0x3
 1829 002d 0E       		.uleb128 0xe
 1830 002e 3A       		.uleb128 0x3a
 1831 002f 0B       		.uleb128 0xb
 1832 0030 3B       		.uleb128 0x3b
 1833 0031 05       		.uleb128 0x5
 1834 0032 49       		.uleb128 0x49
 1835 0033 13       		.uleb128 0x13
 1836 0034 00       		.byte	0
 1837 0035 00       		.byte	0
 1838 0036 05       		.uleb128 0x5
 1839 0037 35       		.uleb128 0x35
 1840 0038 00       		.byte	0
 1841 0039 49       		.uleb128 0x49
 1842 003a 13       		.uleb128 0x13
 1843 003b 00       		.byte	0
 1844 003c 00       		.byte	0
 1845 003d 06       		.uleb128 0x6
 1846 003e 2E       		.uleb128 0x2e
 1847 003f 00       		.byte	0
 1848 0040 3F       		.uleb128 0x3f
 1849 0041 19       		.uleb128 0x19
 1850 0042 03       		.uleb128 0x3
 1851 0043 0E       		.uleb128 0xe
 1852 0044 3A       		.uleb128 0x3a
 1853 0045 0B       		.uleb128 0xb
 1854 0046 3B       		.uleb128 0x3b
 1855 0047 0B       		.uleb128 0xb
 1856 0048 27       		.uleb128 0x27
 1857 0049 19       		.uleb128 0x19
 1858 004a 11       		.uleb128 0x11
 1859 004b 01       		.uleb128 0x1
 1860 004c 12       		.uleb128 0x12
 1861 004d 06       		.uleb128 0x6
 1862 004e 40       		.uleb128 0x40
 1863 004f 18       		.uleb128 0x18
 1864 0050 9642     		.uleb128 0x2116
 1865 0052 19       		.uleb128 0x19
 1866 0053 00       		.byte	0
 1867 0054 00       		.byte	0
 1868 0055 07       		.uleb128 0x7
 1869 0056 2E       		.uleb128 0x2e
 1870 0057 01       		.byte	0x1
 1871 0058 3F       		.uleb128 0x3f
 1872 0059 19       		.uleb128 0x19
 1873 005a 03       		.uleb128 0x3
 1874 005b 0E       		.uleb128 0xe
 1875 005c 3A       		.uleb128 0x3a
 1876 005d 0B       		.uleb128 0xb
 1877 005e 3B       		.uleb128 0x3b
 1878 005f 0B       		.uleb128 0xb
 1879 0060 27       		.uleb128 0x27
 1880 0061 19       		.uleb128 0x19
 1881 0062 11       		.uleb128 0x11
 1882 0063 01       		.uleb128 0x1
 1883 0064 12       		.uleb128 0x12
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 49


 1884 0065 06       		.uleb128 0x6
 1885 0066 40       		.uleb128 0x40
 1886 0067 18       		.uleb128 0x18
 1887 0068 9642     		.uleb128 0x2116
 1888 006a 19       		.uleb128 0x19
 1889 006b 01       		.uleb128 0x1
 1890 006c 13       		.uleb128 0x13
 1891 006d 00       		.byte	0
 1892 006e 00       		.byte	0
 1893 006f 08       		.uleb128 0x8
 1894 0070 34       		.uleb128 0x34
 1895 0071 00       		.byte	0
 1896 0072 03       		.uleb128 0x3
 1897 0073 0E       		.uleb128 0xe
 1898 0074 3A       		.uleb128 0x3a
 1899 0075 0B       		.uleb128 0xb
 1900 0076 3B       		.uleb128 0x3b
 1901 0077 0B       		.uleb128 0xb
 1902 0078 49       		.uleb128 0x49
 1903 0079 13       		.uleb128 0x13
 1904 007a 02       		.uleb128 0x2
 1905 007b 18       		.uleb128 0x18
 1906 007c 00       		.byte	0
 1907 007d 00       		.byte	0
 1908 007e 09       		.uleb128 0x9
 1909 007f 2E       		.uleb128 0x2e
 1910 0080 00       		.byte	0
 1911 0081 3F       		.uleb128 0x3f
 1912 0082 19       		.uleb128 0x19
 1913 0083 03       		.uleb128 0x3
 1914 0084 0E       		.uleb128 0xe
 1915 0085 3A       		.uleb128 0x3a
 1916 0086 0B       		.uleb128 0xb
 1917 0087 3B       		.uleb128 0x3b
 1918 0088 05       		.uleb128 0x5
 1919 0089 27       		.uleb128 0x27
 1920 008a 19       		.uleb128 0x19
 1921 008b 11       		.uleb128 0x11
 1922 008c 01       		.uleb128 0x1
 1923 008d 12       		.uleb128 0x12
 1924 008e 06       		.uleb128 0x6
 1925 008f 40       		.uleb128 0x40
 1926 0090 18       		.uleb128 0x18
 1927 0091 9642     		.uleb128 0x2116
 1928 0093 19       		.uleb128 0x19
 1929 0094 00       		.byte	0
 1930 0095 00       		.byte	0
 1931 0096 0A       		.uleb128 0xa
 1932 0097 2E       		.uleb128 0x2e
 1933 0098 00       		.byte	0
 1934 0099 3F       		.uleb128 0x3f
 1935 009a 19       		.uleb128 0x19
 1936 009b 03       		.uleb128 0x3
 1937 009c 0E       		.uleb128 0xe
 1938 009d 3A       		.uleb128 0x3a
 1939 009e 0B       		.uleb128 0xb
 1940 009f 3B       		.uleb128 0x3b
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 50


 1941 00a0 05       		.uleb128 0x5
 1942 00a1 27       		.uleb128 0x27
 1943 00a2 19       		.uleb128 0x19
 1944 00a3 11       		.uleb128 0x11
 1945 00a4 01       		.uleb128 0x1
 1946 00a5 12       		.uleb128 0x12
 1947 00a6 06       		.uleb128 0x6
 1948 00a7 40       		.uleb128 0x40
 1949 00a8 18       		.uleb128 0x18
 1950 00a9 9742     		.uleb128 0x2117
 1951 00ab 19       		.uleb128 0x19
 1952 00ac 00       		.byte	0
 1953 00ad 00       		.byte	0
 1954 00ae 0B       		.uleb128 0xb
 1955 00af 2E       		.uleb128 0x2e
 1956 00b0 01       		.byte	0x1
 1957 00b1 3F       		.uleb128 0x3f
 1958 00b2 19       		.uleb128 0x19
 1959 00b3 03       		.uleb128 0x3
 1960 00b4 0E       		.uleb128 0xe
 1961 00b5 3A       		.uleb128 0x3a
 1962 00b6 0B       		.uleb128 0xb
 1963 00b7 3B       		.uleb128 0x3b
 1964 00b8 05       		.uleb128 0x5
 1965 00b9 27       		.uleb128 0x27
 1966 00ba 19       		.uleb128 0x19
 1967 00bb 49       		.uleb128 0x49
 1968 00bc 13       		.uleb128 0x13
 1969 00bd 11       		.uleb128 0x11
 1970 00be 01       		.uleb128 0x1
 1971 00bf 12       		.uleb128 0x12
 1972 00c0 06       		.uleb128 0x6
 1973 00c1 40       		.uleb128 0x40
 1974 00c2 18       		.uleb128 0x18
 1975 00c3 9742     		.uleb128 0x2117
 1976 00c5 19       		.uleb128 0x19
 1977 00c6 01       		.uleb128 0x1
 1978 00c7 13       		.uleb128 0x13
 1979 00c8 00       		.byte	0
 1980 00c9 00       		.byte	0
 1981 00ca 0C       		.uleb128 0xc
 1982 00cb 05       		.uleb128 0x5
 1983 00cc 00       		.byte	0
 1984 00cd 03       		.uleb128 0x3
 1985 00ce 0E       		.uleb128 0xe
 1986 00cf 3A       		.uleb128 0x3a
 1987 00d0 0B       		.uleb128 0xb
 1988 00d1 3B       		.uleb128 0x3b
 1989 00d2 05       		.uleb128 0x5
 1990 00d3 49       		.uleb128 0x49
 1991 00d4 13       		.uleb128 0x13
 1992 00d5 02       		.uleb128 0x2
 1993 00d6 18       		.uleb128 0x18
 1994 00d7 00       		.byte	0
 1995 00d8 00       		.byte	0
 1996 00d9 0D       		.uleb128 0xd
 1997 00da 34       		.uleb128 0x34
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 51


 1998 00db 00       		.byte	0
 1999 00dc 03       		.uleb128 0x3
 2000 00dd 0E       		.uleb128 0xe
 2001 00de 3A       		.uleb128 0x3a
 2002 00df 0B       		.uleb128 0xb
 2003 00e0 3B       		.uleb128 0x3b
 2004 00e1 05       		.uleb128 0x5
 2005 00e2 49       		.uleb128 0x49
 2006 00e3 13       		.uleb128 0x13
 2007 00e4 02       		.uleb128 0x2
 2008 00e5 18       		.uleb128 0x18
 2009 00e6 00       		.byte	0
 2010 00e7 00       		.byte	0
 2011 00e8 0E       		.uleb128 0xe
 2012 00e9 2E       		.uleb128 0x2e
 2013 00ea 01       		.byte	0x1
 2014 00eb 3F       		.uleb128 0x3f
 2015 00ec 19       		.uleb128 0x19
 2016 00ed 03       		.uleb128 0x3
 2017 00ee 0E       		.uleb128 0xe
 2018 00ef 3A       		.uleb128 0x3a
 2019 00f0 0B       		.uleb128 0xb
 2020 00f1 3B       		.uleb128 0x3b
 2021 00f2 05       		.uleb128 0x5
 2022 00f3 27       		.uleb128 0x27
 2023 00f4 19       		.uleb128 0x19
 2024 00f5 49       		.uleb128 0x49
 2025 00f6 13       		.uleb128 0x13
 2026 00f7 11       		.uleb128 0x11
 2027 00f8 01       		.uleb128 0x1
 2028 00f9 12       		.uleb128 0x12
 2029 00fa 06       		.uleb128 0x6
 2030 00fb 40       		.uleb128 0x40
 2031 00fc 18       		.uleb128 0x18
 2032 00fd 9642     		.uleb128 0x2116
 2033 00ff 19       		.uleb128 0x19
 2034 0100 01       		.uleb128 0x1
 2035 0101 13       		.uleb128 0x13
 2036 0102 00       		.byte	0
 2037 0103 00       		.byte	0
 2038 0104 0F       		.uleb128 0xf
 2039 0105 2E       		.uleb128 0x2e
 2040 0106 01       		.byte	0x1
 2041 0107 3F       		.uleb128 0x3f
 2042 0108 19       		.uleb128 0x19
 2043 0109 03       		.uleb128 0x3
 2044 010a 0E       		.uleb128 0xe
 2045 010b 3A       		.uleb128 0x3a
 2046 010c 0B       		.uleb128 0xb
 2047 010d 3B       		.uleb128 0x3b
 2048 010e 05       		.uleb128 0x5
 2049 010f 27       		.uleb128 0x27
 2050 0110 19       		.uleb128 0x19
 2051 0111 11       		.uleb128 0x11
 2052 0112 01       		.uleb128 0x1
 2053 0113 12       		.uleb128 0x12
 2054 0114 06       		.uleb128 0x6
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 52


 2055 0115 40       		.uleb128 0x40
 2056 0116 18       		.uleb128 0x18
 2057 0117 9742     		.uleb128 0x2117
 2058 0119 19       		.uleb128 0x19
 2059 011a 01       		.uleb128 0x1
 2060 011b 13       		.uleb128 0x13
 2061 011c 00       		.byte	0
 2062 011d 00       		.byte	0
 2063 011e 10       		.uleb128 0x10
 2064 011f 2E       		.uleb128 0x2e
 2065 0120 01       		.byte	0x1
 2066 0121 3F       		.uleb128 0x3f
 2067 0122 19       		.uleb128 0x19
 2068 0123 03       		.uleb128 0x3
 2069 0124 0E       		.uleb128 0xe
 2070 0125 3A       		.uleb128 0x3a
 2071 0126 0B       		.uleb128 0xb
 2072 0127 3B       		.uleb128 0x3b
 2073 0128 05       		.uleb128 0x5
 2074 0129 27       		.uleb128 0x27
 2075 012a 19       		.uleb128 0x19
 2076 012b 11       		.uleb128 0x11
 2077 012c 01       		.uleb128 0x1
 2078 012d 12       		.uleb128 0x12
 2079 012e 06       		.uleb128 0x6
 2080 012f 40       		.uleb128 0x40
 2081 0130 18       		.uleb128 0x18
 2082 0131 9642     		.uleb128 0x2116
 2083 0133 19       		.uleb128 0x19
 2084 0134 01       		.uleb128 0x1
 2085 0135 13       		.uleb128 0x13
 2086 0136 00       		.byte	0
 2087 0137 00       		.byte	0
 2088 0138 11       		.uleb128 0x11
 2089 0139 01       		.uleb128 0x1
 2090 013a 01       		.byte	0x1
 2091 013b 49       		.uleb128 0x49
 2092 013c 13       		.uleb128 0x13
 2093 013d 01       		.uleb128 0x1
 2094 013e 13       		.uleb128 0x13
 2095 013f 00       		.byte	0
 2096 0140 00       		.byte	0
 2097 0141 12       		.uleb128 0x12
 2098 0142 21       		.uleb128 0x21
 2099 0143 00       		.byte	0
 2100 0144 49       		.uleb128 0x49
 2101 0145 13       		.uleb128 0x13
 2102 0146 2F       		.uleb128 0x2f
 2103 0147 0B       		.uleb128 0xb
 2104 0148 00       		.byte	0
 2105 0149 00       		.byte	0
 2106 014a 13       		.uleb128 0x13
 2107 014b 26       		.uleb128 0x26
 2108 014c 00       		.byte	0
 2109 014d 49       		.uleb128 0x49
 2110 014e 13       		.uleb128 0x13
 2111 014f 00       		.byte	0
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 53


 2112 0150 00       		.byte	0
 2113 0151 14       		.uleb128 0x14
 2114 0152 34       		.uleb128 0x34
 2115 0153 00       		.byte	0
 2116 0154 03       		.uleb128 0x3
 2117 0155 0E       		.uleb128 0xe
 2118 0156 3A       		.uleb128 0x3a
 2119 0157 0B       		.uleb128 0xb
 2120 0158 3B       		.uleb128 0x3b
 2121 0159 0B       		.uleb128 0xb
 2122 015a 49       		.uleb128 0x49
 2123 015b 13       		.uleb128 0x13
 2124 015c 3F       		.uleb128 0x3f
 2125 015d 19       		.uleb128 0x19
 2126 015e 02       		.uleb128 0x2
 2127 015f 18       		.uleb128 0x18
 2128 0160 00       		.byte	0
 2129 0161 00       		.byte	0
 2130 0162 00       		.byte	0
 2131              		.section	.debug_aranges,"",%progbits
 2132 0000 A4000000 		.4byte	0xa4
 2133 0004 0200     		.2byte	0x2
 2134 0006 00000000 		.4byte	.Ldebug_info0
 2135 000a 04       		.byte	0x4
 2136 000b 00       		.byte	0
 2137 000c 0000     		.2byte	0
 2138 000e 0000     		.2byte	0
 2139 0010 00000000 		.4byte	.LFB2
 2140 0014 24000000 		.4byte	.LFE2-.LFB2
 2141 0018 00000000 		.4byte	.LFB3
 2142 001c C0010000 		.4byte	.LFE3-.LFB3
 2143 0020 00000000 		.4byte	.LFB4
 2144 0024 38000000 		.4byte	.LFE4-.LFB4
 2145 0028 00000000 		.4byte	.LFB5
 2146 002c 18000000 		.4byte	.LFE5-.LFB5
 2147 0030 00000000 		.4byte	.LFB6
 2148 0034 1C000000 		.4byte	.LFE6-.LFB6
 2149 0038 00000000 		.4byte	.LFB7
 2150 003c 1C000000 		.4byte	.LFE7-.LFB7
 2151 0040 00000000 		.4byte	.LFB8
 2152 0044 48000000 		.4byte	.LFE8-.LFB8
 2153 0048 00000000 		.4byte	.LFB9
 2154 004c 44000000 		.4byte	.LFE9-.LFB9
 2155 0050 00000000 		.4byte	.LFB10
 2156 0054 1C000000 		.4byte	.LFE10-.LFB10
 2157 0058 00000000 		.4byte	.LFB11
 2158 005c 30000000 		.4byte	.LFE11-.LFB11
 2159 0060 00000000 		.4byte	.LFB12
 2160 0064 2C000000 		.4byte	.LFE12-.LFB12
 2161 0068 00000000 		.4byte	.LFB13
 2162 006c 1C000000 		.4byte	.LFE13-.LFB13
 2163 0070 00000000 		.4byte	.LFB14
 2164 0074 1C000000 		.4byte	.LFE14-.LFB14
 2165 0078 00000000 		.4byte	.LFB15
 2166 007c 30000000 		.4byte	.LFE15-.LFB15
 2167 0080 00000000 		.4byte	.LFB16
 2168 0084 2C000000 		.4byte	.LFE16-.LFB16
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 54


 2169 0088 00000000 		.4byte	.LFB17
 2170 008c A4000000 		.4byte	.LFE17-.LFB17
 2171 0090 00000000 		.4byte	.LFB18
 2172 0094 90000000 		.4byte	.LFE18-.LFB18
 2173 0098 00000000 		.4byte	.LFB19
 2174 009c 80000000 		.4byte	.LFE19-.LFB19
 2175 00a0 00000000 		.4byte	0
 2176 00a4 00000000 		.4byte	0
 2177              		.section	.debug_ranges,"",%progbits
 2178              	.Ldebug_ranges0:
 2179 0000 00000000 		.4byte	.LFB2
 2180 0004 24000000 		.4byte	.LFE2
 2181 0008 00000000 		.4byte	.LFB3
 2182 000c C0010000 		.4byte	.LFE3
 2183 0010 00000000 		.4byte	.LFB4
 2184 0014 38000000 		.4byte	.LFE4
 2185 0018 00000000 		.4byte	.LFB5
 2186 001c 18000000 		.4byte	.LFE5
 2187 0020 00000000 		.4byte	.LFB6
 2188 0024 1C000000 		.4byte	.LFE6
 2189 0028 00000000 		.4byte	.LFB7
 2190 002c 1C000000 		.4byte	.LFE7
 2191 0030 00000000 		.4byte	.LFB8
 2192 0034 48000000 		.4byte	.LFE8
 2193 0038 00000000 		.4byte	.LFB9
 2194 003c 44000000 		.4byte	.LFE9
 2195 0040 00000000 		.4byte	.LFB10
 2196 0044 1C000000 		.4byte	.LFE10
 2197 0048 00000000 		.4byte	.LFB11
 2198 004c 30000000 		.4byte	.LFE11
 2199 0050 00000000 		.4byte	.LFB12
 2200 0054 2C000000 		.4byte	.LFE12
 2201 0058 00000000 		.4byte	.LFB13
 2202 005c 1C000000 		.4byte	.LFE13
 2203 0060 00000000 		.4byte	.LFB14
 2204 0064 1C000000 		.4byte	.LFE14
 2205 0068 00000000 		.4byte	.LFB15
 2206 006c 30000000 		.4byte	.LFE15
 2207 0070 00000000 		.4byte	.LFB16
 2208 0074 2C000000 		.4byte	.LFE16
 2209 0078 00000000 		.4byte	.LFB17
 2210 007c A4000000 		.4byte	.LFE17
 2211 0080 00000000 		.4byte	.LFB18
 2212 0084 90000000 		.4byte	.LFE18
 2213 0088 00000000 		.4byte	.LFB19
 2214 008c 80000000 		.4byte	.LFE19
 2215 0090 00000000 		.4byte	0
 2216 0094 00000000 		.4byte	0
 2217              		.section	.debug_line,"",%progbits
 2218              	.Ldebug_line0:
 2219 0000 97020000 		.section	.debug_str,"MS",%progbits,1
 2219      02004000 
 2219      00000201 
 2219      FB0E0D00 
 2219      01010101 
 2220              	.LASF6:
 2221 0000 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 55


 2221      206C6F6E 
 2221      6720696E 
 2221      7400
 2222              	.LASF55:
 2223 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2223      6368616E 
 2223      6E656C73 
 2223      436F6E66 
 2223      696700
 2224              	.LASF19:
 2225 0021 72656733 		.ascii	"reg32\000"
 2225      3200
 2226              	.LASF59:
 2227 0027 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2227      4320342E 
 2227      392E3320 
 2227      32303135 
 2227      30333033 
 2228 005a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2228      20726576 
 2228      6973696F 
 2228      6E203232 
 2228      31323230 
 2229 008d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2229      66756E63 
 2229      74696F6E 
 2229      2D736563 
 2229      74696F6E 
 2230              	.LASF45:
 2231 00b5 6F666673 		.ascii	"offset\000"
 2231      657400
 2232              	.LASF15:
 2233 00bc 666C6F61 		.ascii	"float\000"
 2233      7400
 2234              	.LASF41:
 2235 00c2 68696768 		.ascii	"highLimit\000"
 2235      4C696D69 
 2235      7400
 2236              	.LASF48:
 2237 00cc 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2237      436F756E 
 2237      7473546F 
 2237      5F6D566F 
 2237      6C747300 
 2238              	.LASF52:
 2239 00e0 75566F6C 		.ascii	"uVolts\000"
 2239      747300
 2240              	.LASF3:
 2241 00e7 73686F72 		.ascii	"short unsigned int\000"
 2241      7420756E 
 2241      7369676E 
 2241      65642069 
 2241      6E7400
 2242              	.LASF2:
 2243 00fa 73686F72 		.ascii	"short int\000"
 2243      7420696E 
 2243      7400
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 56


 2244              	.LASF44:
 2245 0104 4144435F 		.ascii	"ADC_SetOffset\000"
 2245      5365744F 
 2245      66667365 
 2245      7400
 2246              	.LASF38:
 2247 0112 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2247      5365744C 
 2247      6F774C69 
 2247      6D697400 
 2248              	.LASF29:
 2249 0122 73746174 		.ascii	"status\000"
 2249      757300
 2250              	.LASF61:
 2251 0129 433A5C55 		.ascii	"C:\\Users\\TTSS\\Dropbox\\Projects\\hackAIR\\AirQua"
 2251      73657273 
 2251      5C545453 
 2251      535C4472 
 2251      6F70626F 
 2252 0156 6C697479 		.ascii	"lityBeacons\\AnalogLedSensor_DN7C3CA006.cydsn\000"
 2252      42656163 
 2252      6F6E735C 
 2252      416E616C 
 2252      6F674C65 
 2253              	.LASF14:
 2254 0183 666C6F61 		.ascii	"float32\000"
 2254      74333200 
 2255              	.LASF57:
 2256 018b 4144435F 		.ascii	"ADC_offset\000"
 2256      6F666673 
 2256      657400
 2257              	.LASF22:
 2258 0196 746D7052 		.ascii	"tmpRegVal\000"
 2258      65675661 
 2258      6C00
 2259              	.LASF46:
 2260 01a0 4144435F 		.ascii	"ADC_SetGain\000"
 2260      53657447 
 2260      61696E00 
 2261              	.LASF1:
 2262 01ac 756E7369 		.ascii	"unsigned char\000"
 2262      676E6564 
 2262      20636861 
 2262      7200
 2263              	.LASF40:
 2264 01ba 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2264      53657448 
 2264      6967684C 
 2264      696D6974 
 2264      00
 2265              	.LASF12:
 2266 01cb 696E7431 		.ascii	"int16\000"
 2266      3600
 2267              	.LASF5:
 2268 01d1 6C6F6E67 		.ascii	"long unsigned int\000"
 2268      20756E73 
 2268      69676E65 
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 57


 2268      6420696E 
 2268      7400
 2269              	.LASF13:
 2270 01e3 696E7433 		.ascii	"int32\000"
 2270      3200
 2271              	.LASF31:
 2272 01e9 4144435F 		.ascii	"ADC_GetResult16\000"
 2272      47657452 
 2272      6573756C 
 2272      74313600 
 2273              	.LASF36:
 2274 01f9 4144435F 		.ascii	"ADC_SetChanMask\000"
 2274      53657443 
 2274      68616E4D 
 2274      61736B00 
 2275              	.LASF43:
 2276 0209 4144435F 		.ascii	"ADC_SetSatMask\000"
 2276      53657453 
 2276      61744D61 
 2276      736B00
 2277              	.LASF30:
 2278 0218 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2278      4973456E 
 2278      64436F6E 
 2278      76657273 
 2278      696F6E00 
 2279              	.LASF16:
 2280 022c 646F7562 		.ascii	"double\000"
 2280      6C6500
 2281              	.LASF39:
 2282 0233 6C6F774C 		.ascii	"lowLimit\000"
 2282      696D6974 
 2282      00
 2283              	.LASF47:
 2284 023c 61646347 		.ascii	"adcGain\000"
 2284      61696E00 
 2285              	.LASF10:
 2286 0244 75696E74 		.ascii	"uint16\000"
 2286      313600
 2287              	.LASF49:
 2288 024b 61646343 		.ascii	"adcCounts\000"
 2288      6F756E74 
 2288      7300
 2289              	.LASF11:
 2290 0255 75696E74 		.ascii	"uint32\000"
 2290      333200
 2291              	.LASF42:
 2292 025c 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2292      5365744C 
 2292      696D6974 
 2292      4D61736B 
 2292      00
 2293              	.LASF8:
 2294 026d 756E7369 		.ascii	"unsigned int\000"
 2294      676E6564 
 2294      20696E74 
 2294      00
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 58


 2295              	.LASF25:
 2296 027a 4144435F 		.ascii	"ADC_Enable\000"
 2296      456E6162 
 2296      6C6500
 2297              	.LASF23:
 2298 0285 636F756E 		.ascii	"counts\000"
 2298      747300
 2299              	.LASF7:
 2300 028c 6C6F6E67 		.ascii	"long long unsigned int\000"
 2300      206C6F6E 
 2300      6720756E 
 2300      7369676E 
 2300      65642069 
 2301              	.LASF34:
 2302 02a3 72657375 		.ascii	"result\000"
 2302      6C7400
 2303              	.LASF24:
 2304 02aa 4144435F 		.ascii	"ADC_Start\000"
 2304      53746172 
 2304      7400
 2305              	.LASF35:
 2306 02b4 4144435F 		.ascii	"ADC_Init\000"
 2306      496E6974 
 2306      00
 2307              	.LASF54:
 2308 02bd 766F6C74 		.ascii	"volts\000"
 2308      7300
 2309              	.LASF33:
 2310 02c3 6368616E 		.ascii	"chan\000"
 2310      00
 2311              	.LASF50:
 2312 02c8 6D566F6C 		.ascii	"mVolts\000"
 2312      747300
 2313              	.LASF20:
 2314 02cf 73697A65 		.ascii	"sizetype\000"
 2314      74797065 
 2314      00
 2315              	.LASF51:
 2316 02d8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2316      436F756E 
 2316      7473546F 
 2316      5F75566F 
 2316      6C747300 
 2317              	.LASF53:
 2318 02ec 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2318      436F756E 
 2318      7473546F 
 2318      5F566F6C 
 2318      747300
 2319              	.LASF27:
 2320 02ff 4144435F 		.ascii	"ADC_StartConvert\000"
 2320      53746172 
 2320      74436F6E 
 2320      76657274 
 2320      00
 2321              	.LASF60:
 2322 0310 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
ARM GAS  C:\Users\TTSS\AppData\Local\Temp\ccP9d3GW.s 			page 59


 2322      72617465 
 2322      645F536F 
 2322      75726365 
 2322      5C50536F 
 2323              	.LASF37:
 2324 032d 6D61736B 		.ascii	"mask\000"
 2324      00
 2325              	.LASF21:
 2326 0332 63684E75 		.ascii	"chNum\000"
 2326      6D00
 2327              	.LASF32:
 2328 0338 7265744D 		.ascii	"retMode\000"
 2328      6F646500 
 2329              	.LASF28:
 2330 0340 4144435F 		.ascii	"ADC_StopConvert\000"
 2330      53746F70 
 2330      436F6E76 
 2330      65727400 
 2331              	.LASF9:
 2332 0350 75696E74 		.ascii	"uint8\000"
 2332      3800
 2333              	.LASF58:
 2334 0356 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2334      636F756E 
 2334      74735065 
 2334      72313056 
 2334      6F6C7400 
 2335              	.LASF4:
 2336 036a 6C6F6E67 		.ascii	"long int\000"
 2336      20696E74 
 2336      00
 2337              	.LASF18:
 2338 0373 63686172 		.ascii	"char\000"
 2338      00
 2339              	.LASF0:
 2340 0378 7369676E 		.ascii	"signed char\000"
 2340      65642063 
 2340      68617200 
 2341              	.LASF56:
 2342 0384 4144435F 		.ascii	"ADC_initVar\000"
 2342      696E6974 
 2342      56617200 
 2343              	.LASF17:
 2344 0390 696E7436 		.ascii	"int64\000"
 2344      3400
 2345              	.LASF26:
 2346 0396 4144435F 		.ascii	"ADC_Stop\000"
 2346      53746F70 
 2346      00
 2347              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
